{"ast":null,"code":"import _createForOfIteratorHelper from \"C:/Users/Danny/Documents/GitHub/projects/MarkDownPreviewer/mark-dowan-previewer/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _classCallCheck from \"C:/Users/Danny/Documents/GitHub/projects/MarkDownPreviewer/mark-dowan-previewer/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Danny/Documents/GitHub/projects/MarkDownPreviewer/mark-dowan-previewer/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _slicedToArray from \"C:/Users/Danny/Documents/GitHub/projects/MarkDownPreviewer/mark-dowan-previewer/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\n/**\n * marked v4.2.12 - a markdown parser\n * Copyright (c) 2011-2023, Christopher Jeffrey. (MIT Licensed)\n * https://github.com/markedjs/marked\n */\n\n/**\n * DO NOT EDIT THIS FILE\n * The code in this file is generated from files in ./src/\n */\n\nfunction getDefaults() {\n  return {\n    async: false,\n    baseUrl: null,\n    breaks: false,\n    extensions: null,\n    gfm: true,\n    headerIds: true,\n    headerPrefix: '',\n    highlight: null,\n    langPrefix: 'language-',\n    mangle: true,\n    pedantic: false,\n    renderer: null,\n    sanitize: false,\n    sanitizer: null,\n    silent: false,\n    smartypants: false,\n    tokenizer: null,\n    walkTokens: null,\n    xhtml: false\n  };\n}\nvar defaults = getDefaults();\nfunction changeDefaults(newDefaults) {\n  defaults = newDefaults;\n}\n\n/**\n * Helpers\n */\nvar escapeTest = /[&<>\"']/;\nvar escapeReplace = new RegExp(escapeTest.source, 'g');\nvar escapeTestNoEncode = /[<>\"']|&(?!(#\\d{1,7}|#[Xx][a-fA-F0-9]{1,6}|\\w+);)/;\nvar escapeReplaceNoEncode = new RegExp(escapeTestNoEncode.source, 'g');\nvar escapeReplacements = {\n  '&': '&amp;',\n  '<': '&lt;',\n  '>': '&gt;',\n  '\"': '&quot;',\n  \"'\": '&#39;'\n};\nvar getEscapeReplacement = function getEscapeReplacement(ch) {\n  return escapeReplacements[ch];\n};\nfunction _escape(html, encode) {\n  if (encode) {\n    if (escapeTest.test(html)) {\n      return html.replace(escapeReplace, getEscapeReplacement);\n    }\n  } else {\n    if (escapeTestNoEncode.test(html)) {\n      return html.replace(escapeReplaceNoEncode, getEscapeReplacement);\n    }\n  }\n  return html;\n}\nvar unescapeTest = /&(#(?:\\d+)|(?:#x[0-9A-Fa-f]+)|(?:\\w+));?/ig;\n\n/**\n * @param {string} html\n */\nfunction unescape(html) {\n  // explicitly match decimal, hex, and named HTML entities\n  return html.replace(unescapeTest, function (_, n) {\n    n = n.toLowerCase();\n    if (n === 'colon') return ':';\n    if (n.charAt(0) === '#') {\n      return n.charAt(1) === 'x' ? String.fromCharCode(parseInt(n.substring(2), 16)) : String.fromCharCode(+n.substring(1));\n    }\n    return '';\n  });\n}\nvar caret = /(^|[^\\[])\\^/g;\n\n/**\n * @param {string | RegExp} regex\n * @param {string} opt\n */\nfunction edit(regex, opt) {\n  regex = typeof regex === 'string' ? regex : regex.source;\n  opt = opt || '';\n  var obj = {\n    replace: function replace(name, val) {\n      val = val.source || val;\n      val = val.replace(caret, '$1');\n      regex = regex.replace(name, val);\n      return obj;\n    },\n    getRegex: function getRegex() {\n      return new RegExp(regex, opt);\n    }\n  };\n  return obj;\n}\nvar nonWordAndColonTest = /[^\\w:]/g;\nvar originIndependentUrl = /^$|^[a-z][a-z0-9+.-]*:|^[?#]/i;\n\n/**\n * @param {boolean} sanitize\n * @param {string} base\n * @param {string} href\n */\nfunction cleanUrl(sanitize, base, href) {\n  if (sanitize) {\n    var prot;\n    try {\n      prot = decodeURIComponent(unescape(href)).replace(nonWordAndColonTest, '').toLowerCase();\n    } catch (e) {\n      return null;\n    }\n    if (prot.indexOf('javascript:') === 0 || prot.indexOf('vbscript:') === 0 || prot.indexOf('data:') === 0) {\n      return null;\n    }\n  }\n  if (base && !originIndependentUrl.test(href)) {\n    href = resolveUrl(base, href);\n  }\n  try {\n    href = encodeURI(href).replace(/%25/g, '%');\n  } catch (e) {\n    return null;\n  }\n  return href;\n}\nvar baseUrls = {};\nvar justDomain = /^[^:]+:\\/*[^/]*$/;\nvar protocol = /^([^:]+:)[\\s\\S]*$/;\nvar domain = /^([^:]+:\\/*[^/]*)[\\s\\S]*$/;\n\n/**\n * @param {string} base\n * @param {string} href\n */\nfunction resolveUrl(base, href) {\n  if (!baseUrls[' ' + base]) {\n    // we can ignore everything in base after the last slash of its path component,\n    // but we might need to add _that_\n    // https://tools.ietf.org/html/rfc3986#section-3\n    if (justDomain.test(base)) {\n      baseUrls[' ' + base] = base + '/';\n    } else {\n      baseUrls[' ' + base] = rtrim(base, '/', true);\n    }\n  }\n  base = baseUrls[' ' + base];\n  var relativeBase = base.indexOf(':') === -1;\n  if (href.substring(0, 2) === '//') {\n    if (relativeBase) {\n      return href;\n    }\n    return base.replace(protocol, '$1') + href;\n  } else if (href.charAt(0) === '/') {\n    if (relativeBase) {\n      return href;\n    }\n    return base.replace(domain, '$1') + href;\n  } else {\n    return base + href;\n  }\n}\nvar noopTest = {\n  exec: function noopTest() {}\n};\nfunction merge(obj) {\n  var i = 1,\n    target,\n    key;\n  for (; i < arguments.length; i++) {\n    target = arguments[i];\n    for (key in target) {\n      if (Object.prototype.hasOwnProperty.call(target, key)) {\n        obj[key] = target[key];\n      }\n    }\n  }\n  return obj;\n}\nfunction splitCells(tableRow, count) {\n  // ensure that every cell-delimiting pipe has a space\n  // before it to distinguish it from an escaped pipe\n  var row = tableRow.replace(/\\|/g, function (match, offset, str) {\n      var escaped = false,\n        curr = offset;\n      while (--curr >= 0 && str[curr] === '\\\\') escaped = !escaped;\n      if (escaped) {\n        // odd number of slashes means | is escaped\n        // so we leave it alone\n        return '|';\n      } else {\n        // add space before unescaped |\n        return ' |';\n      }\n    }),\n    cells = row.split(/ \\|/);\n  var i = 0;\n\n  // First/last cell in a row cannot be empty if it has no leading/trailing pipe\n  if (!cells[0].trim()) {\n    cells.shift();\n  }\n  if (cells.length > 0 && !cells[cells.length - 1].trim()) {\n    cells.pop();\n  }\n  if (cells.length > count) {\n    cells.splice(count);\n  } else {\n    while (cells.length < count) cells.push('');\n  }\n  for (; i < cells.length; i++) {\n    // leading or trailing whitespace is ignored per the gfm spec\n    cells[i] = cells[i].trim().replace(/\\\\\\|/g, '|');\n  }\n  return cells;\n}\n\n/**\n * Remove trailing 'c's. Equivalent to str.replace(/c*$/, '').\n * /c*$/ is vulnerable to REDOS.\n *\n * @param {string} str\n * @param {string} c\n * @param {boolean} invert Remove suffix of non-c chars instead. Default falsey.\n */\nfunction rtrim(str, c, invert) {\n  var l = str.length;\n  if (l === 0) {\n    return '';\n  }\n\n  // Length of suffix matching the invert condition.\n  var suffLen = 0;\n\n  // Step left until we fail to match the invert condition.\n  while (suffLen < l) {\n    var currChar = str.charAt(l - suffLen - 1);\n    if (currChar === c && !invert) {\n      suffLen++;\n    } else if (currChar !== c && invert) {\n      suffLen++;\n    } else {\n      break;\n    }\n  }\n  return str.slice(0, l - suffLen);\n}\nfunction findClosingBracket(str, b) {\n  if (str.indexOf(b[1]) === -1) {\n    return -1;\n  }\n  var l = str.length;\n  var level = 0,\n    i = 0;\n  for (; i < l; i++) {\n    if (str[i] === '\\\\') {\n      i++;\n    } else if (str[i] === b[0]) {\n      level++;\n    } else if (str[i] === b[1]) {\n      level--;\n      if (level < 0) {\n        return i;\n      }\n    }\n  }\n  return -1;\n}\nfunction checkSanitizeDeprecation(opt) {\n  if (opt && opt.sanitize && !opt.silent) {\n    console.warn('marked(): sanitize and sanitizer parameters are deprecated since version 0.7.0, should not be used and will be removed in the future. Read more here: https://marked.js.org/#/USING_ADVANCED.md#options');\n  }\n}\n\n// copied from https://stackoverflow.com/a/5450113/806777\n/**\n * @param {string} pattern\n * @param {number} count\n */\nfunction repeatString(pattern, count) {\n  if (count < 1) {\n    return '';\n  }\n  var result = '';\n  while (count > 1) {\n    if (count & 1) {\n      result += pattern;\n    }\n    count >>= 1;\n    pattern += pattern;\n  }\n  return result + pattern;\n}\nfunction outputLink(cap, link, raw, lexer) {\n  var href = link.href;\n  var title = link.title ? _escape(link.title) : null;\n  var text = cap[1].replace(/\\\\([\\[\\]])/g, '$1');\n  if (cap[0].charAt(0) !== '!') {\n    lexer.state.inLink = true;\n    var token = {\n      type: 'link',\n      raw: raw,\n      href: href,\n      title: title,\n      text: text,\n      tokens: lexer.inlineTokens(text)\n    };\n    lexer.state.inLink = false;\n    return token;\n  }\n  return {\n    type: 'image',\n    raw: raw,\n    href: href,\n    title: title,\n    text: _escape(text)\n  };\n}\nfunction indentCodeCompensation(raw, text) {\n  var matchIndentToCode = raw.match(/^(\\s+)(?:```)/);\n  if (matchIndentToCode === null) {\n    return text;\n  }\n  var indentToCode = matchIndentToCode[1];\n  return text.split('\\n').map(function (node) {\n    var matchIndentInNode = node.match(/^\\s+/);\n    if (matchIndentInNode === null) {\n      return node;\n    }\n    var _matchIndentInNode = _slicedToArray(matchIndentInNode, 1),\n      indentInNode = _matchIndentInNode[0];\n    if (indentInNode.length >= indentToCode.length) {\n      return node.slice(indentToCode.length);\n    }\n    return node;\n  }).join('\\n');\n}\n\n/**\n * Tokenizer\n */\nvar Tokenizer = /*#__PURE__*/function () {\n  function Tokenizer(options) {\n    _classCallCheck(this, Tokenizer);\n    this.options = options || defaults;\n  }\n  _createClass(Tokenizer, [{\n    key: \"space\",\n    value: function space(src) {\n      var cap = this.rules.block.newline.exec(src);\n      if (cap && cap[0].length > 0) {\n        return {\n          type: 'space',\n          raw: cap[0]\n        };\n      }\n    }\n  }, {\n    key: \"code\",\n    value: function code(src) {\n      var cap = this.rules.block.code.exec(src);\n      if (cap) {\n        var text = cap[0].replace(/^ {1,4}/gm, '');\n        return {\n          type: 'code',\n          raw: cap[0],\n          codeBlockStyle: 'indented',\n          text: !this.options.pedantic ? rtrim(text, '\\n') : text\n        };\n      }\n    }\n  }, {\n    key: \"fences\",\n    value: function fences(src) {\n      var cap = this.rules.block.fences.exec(src);\n      if (cap) {\n        var raw = cap[0];\n        var text = indentCodeCompensation(raw, cap[3] || '');\n        return {\n          type: 'code',\n          raw: raw,\n          lang: cap[2] ? cap[2].trim().replace(this.rules.inline._escapes, '$1') : cap[2],\n          text: text\n        };\n      }\n    }\n  }, {\n    key: \"heading\",\n    value: function heading(src) {\n      var cap = this.rules.block.heading.exec(src);\n      if (cap) {\n        var text = cap[2].trim();\n\n        // remove trailing #s\n        if (/#$/.test(text)) {\n          var trimmed = rtrim(text, '#');\n          if (this.options.pedantic) {\n            text = trimmed.trim();\n          } else if (!trimmed || / $/.test(trimmed)) {\n            // CommonMark requires space before trailing #s\n            text = trimmed.trim();\n          }\n        }\n        return {\n          type: 'heading',\n          raw: cap[0],\n          depth: cap[1].length,\n          text: text,\n          tokens: this.lexer.inline(text)\n        };\n      }\n    }\n  }, {\n    key: \"hr\",\n    value: function hr(src) {\n      var cap = this.rules.block.hr.exec(src);\n      if (cap) {\n        return {\n          type: 'hr',\n          raw: cap[0]\n        };\n      }\n    }\n  }, {\n    key: \"blockquote\",\n    value: function blockquote(src) {\n      var cap = this.rules.block.blockquote.exec(src);\n      if (cap) {\n        var text = cap[0].replace(/^ *>[ \\t]?/gm, '');\n        var top = this.lexer.state.top;\n        this.lexer.state.top = true;\n        var tokens = this.lexer.blockTokens(text);\n        this.lexer.state.top = top;\n        return {\n          type: 'blockquote',\n          raw: cap[0],\n          tokens: tokens,\n          text: text\n        };\n      }\n    }\n  }, {\n    key: \"list\",\n    value: function list(src) {\n      var cap = this.rules.block.list.exec(src);\n      if (cap) {\n        var raw, istask, ischecked, indent, i, blankLine, endsWithBlankLine, line, nextLine, rawLine, itemContents, endEarly;\n        var bull = cap[1].trim();\n        var isordered = bull.length > 1;\n        var list = {\n          type: 'list',\n          raw: '',\n          ordered: isordered,\n          start: isordered ? +bull.slice(0, -1) : '',\n          loose: false,\n          items: []\n        };\n        bull = isordered ? \"\\\\d{1,9}\\\\\".concat(bull.slice(-1)) : \"\\\\\".concat(bull);\n        if (this.options.pedantic) {\n          bull = isordered ? bull : '[*+-]';\n        }\n\n        // Get next list item\n        var itemRegex = new RegExp(\"^( {0,3}\".concat(bull, \")((?:[\\t ][^\\\\n]*)?(?:\\\\n|$))\"));\n\n        // Check if current bullet point can start a new List Item\n        while (src) {\n          endEarly = false;\n          if (!(cap = itemRegex.exec(src))) {\n            break;\n          }\n          if (this.rules.block.hr.test(src)) {\n            // End list if bullet was actually HR (possibly move into itemRegex?)\n            break;\n          }\n          raw = cap[0];\n          src = src.substring(raw.length);\n          line = cap[2].split('\\n', 1)[0].replace(/^\\t+/, function (t) {\n            return ' '.repeat(3 * t.length);\n          });\n          nextLine = src.split('\\n', 1)[0];\n          if (this.options.pedantic) {\n            indent = 2;\n            itemContents = line.trimLeft();\n          } else {\n            indent = cap[2].search(/[^ ]/); // Find first non-space char\n            indent = indent > 4 ? 1 : indent; // Treat indented code blocks (> 4 spaces) as having only 1 indent\n            itemContents = line.slice(indent);\n            indent += cap[1].length;\n          }\n          blankLine = false;\n          if (!line && /^ *$/.test(nextLine)) {\n            // Items begin with at most one blank line\n            raw += nextLine + '\\n';\n            src = src.substring(nextLine.length + 1);\n            endEarly = true;\n          }\n          if (!endEarly) {\n            var nextBulletRegex = new RegExp(\"^ {0,\".concat(Math.min(3, indent - 1), \"}(?:[*+-]|\\\\d{1,9}[.)])((?:[ \\t][^\\\\n]*)?(?:\\\\n|$))\"));\n            var hrRegex = new RegExp(\"^ {0,\".concat(Math.min(3, indent - 1), \"}((?:- *){3,}|(?:_ *){3,}|(?:\\\\* *){3,})(?:\\\\n+|$)\"));\n            var fencesBeginRegex = new RegExp(\"^ {0,\".concat(Math.min(3, indent - 1), \"}(?:```|~~~)\"));\n            var headingBeginRegex = new RegExp(\"^ {0,\".concat(Math.min(3, indent - 1), \"}#\"));\n\n            // Check if following lines should be included in List Item\n            while (src) {\n              rawLine = src.split('\\n', 1)[0];\n              nextLine = rawLine;\n\n              // Re-align to follow commonmark nesting rules\n              if (this.options.pedantic) {\n                nextLine = nextLine.replace(/^ {1,4}(?=( {4})*[^ ])/g, '  ');\n              }\n\n              // End list item if found code fences\n              if (fencesBeginRegex.test(nextLine)) {\n                break;\n              }\n\n              // End list item if found start of new heading\n              if (headingBeginRegex.test(nextLine)) {\n                break;\n              }\n\n              // End list item if found start of new bullet\n              if (nextBulletRegex.test(nextLine)) {\n                break;\n              }\n\n              // Horizontal rule found\n              if (hrRegex.test(src)) {\n                break;\n              }\n              if (nextLine.search(/[^ ]/) >= indent || !nextLine.trim()) {\n                // Dedent if possible\n                itemContents += '\\n' + nextLine.slice(indent);\n              } else {\n                // not enough indentation\n                if (blankLine) {\n                  break;\n                }\n\n                // paragraph continuation unless last line was a different block level element\n                if (line.search(/[^ ]/) >= 4) {\n                  // indented code block\n                  break;\n                }\n                if (fencesBeginRegex.test(line)) {\n                  break;\n                }\n                if (headingBeginRegex.test(line)) {\n                  break;\n                }\n                if (hrRegex.test(line)) {\n                  break;\n                }\n                itemContents += '\\n' + nextLine;\n              }\n              if (!blankLine && !nextLine.trim()) {\n                // Check if current line is blank\n                blankLine = true;\n              }\n              raw += rawLine + '\\n';\n              src = src.substring(rawLine.length + 1);\n              line = nextLine.slice(indent);\n            }\n          }\n          if (!list.loose) {\n            // If the previous item ended with a blank line, the list is loose\n            if (endsWithBlankLine) {\n              list.loose = true;\n            } else if (/\\n *\\n *$/.test(raw)) {\n              endsWithBlankLine = true;\n            }\n          }\n\n          // Check for task list items\n          if (this.options.gfm) {\n            istask = /^\\[[ xX]\\] /.exec(itemContents);\n            if (istask) {\n              ischecked = istask[0] !== '[ ] ';\n              itemContents = itemContents.replace(/^\\[[ xX]\\] +/, '');\n            }\n          }\n          list.items.push({\n            type: 'list_item',\n            raw: raw,\n            task: !!istask,\n            checked: ischecked,\n            loose: false,\n            text: itemContents\n          });\n          list.raw += raw;\n        }\n\n        // Do not consume newlines at end of final item. Alternatively, make itemRegex *start* with any newlines to simplify/speed up endsWithBlankLine logic\n        list.items[list.items.length - 1].raw = raw.trimRight();\n        list.items[list.items.length - 1].text = itemContents.trimRight();\n        list.raw = list.raw.trimRight();\n        var l = list.items.length;\n\n        // Item child tokens handled here at end because we needed to have the final item to trim it first\n        for (i = 0; i < l; i++) {\n          this.lexer.state.top = false;\n          list.items[i].tokens = this.lexer.blockTokens(list.items[i].text, []);\n          if (!list.loose) {\n            // Check if list should be loose\n            var spacers = list.items[i].tokens.filter(function (t) {\n              return t.type === 'space';\n            });\n            var hasMultipleLineBreaks = spacers.length > 0 && spacers.some(function (t) {\n              return /\\n.*\\n/.test(t.raw);\n            });\n            list.loose = hasMultipleLineBreaks;\n          }\n        }\n\n        // Set all items to loose if list is loose\n        if (list.loose) {\n          for (i = 0; i < l; i++) {\n            list.items[i].loose = true;\n          }\n        }\n        return list;\n      }\n    }\n  }, {\n    key: \"html\",\n    value: function html(src) {\n      var cap = this.rules.block.html.exec(src);\n      if (cap) {\n        var token = {\n          type: 'html',\n          raw: cap[0],\n          pre: !this.options.sanitizer && (cap[1] === 'pre' || cap[1] === 'script' || cap[1] === 'style'),\n          text: cap[0]\n        };\n        if (this.options.sanitize) {\n          var text = this.options.sanitizer ? this.options.sanitizer(cap[0]) : _escape(cap[0]);\n          token.type = 'paragraph';\n          token.text = text;\n          token.tokens = this.lexer.inline(text);\n        }\n        return token;\n      }\n    }\n  }, {\n    key: \"def\",\n    value: function def(src) {\n      var cap = this.rules.block.def.exec(src);\n      if (cap) {\n        var tag = cap[1].toLowerCase().replace(/\\s+/g, ' ');\n        var href = cap[2] ? cap[2].replace(/^<(.*)>$/, '$1').replace(this.rules.inline._escapes, '$1') : '';\n        var title = cap[3] ? cap[3].substring(1, cap[3].length - 1).replace(this.rules.inline._escapes, '$1') : cap[3];\n        return {\n          type: 'def',\n          tag: tag,\n          raw: cap[0],\n          href: href,\n          title: title\n        };\n      }\n    }\n  }, {\n    key: \"table\",\n    value: function table(src) {\n      var cap = this.rules.block.table.exec(src);\n      if (cap) {\n        var item = {\n          type: 'table',\n          header: splitCells(cap[1]).map(function (c) {\n            return {\n              text: c\n            };\n          }),\n          align: cap[2].replace(/^ *|\\| *$/g, '').split(/ *\\| */),\n          rows: cap[3] && cap[3].trim() ? cap[3].replace(/\\n[ \\t]*$/, '').split('\\n') : []\n        };\n        if (item.header.length === item.align.length) {\n          item.raw = cap[0];\n          var l = item.align.length;\n          var i, j, k, row;\n          for (i = 0; i < l; i++) {\n            if (/^ *-+: *$/.test(item.align[i])) {\n              item.align[i] = 'right';\n            } else if (/^ *:-+: *$/.test(item.align[i])) {\n              item.align[i] = 'center';\n            } else if (/^ *:-+ *$/.test(item.align[i])) {\n              item.align[i] = 'left';\n            } else {\n              item.align[i] = null;\n            }\n          }\n          l = item.rows.length;\n          for (i = 0; i < l; i++) {\n            item.rows[i] = splitCells(item.rows[i], item.header.length).map(function (c) {\n              return {\n                text: c\n              };\n            });\n          }\n\n          // parse child tokens inside headers and cells\n\n          // header child tokens\n          l = item.header.length;\n          for (j = 0; j < l; j++) {\n            item.header[j].tokens = this.lexer.inline(item.header[j].text);\n          }\n\n          // cell child tokens\n          l = item.rows.length;\n          for (j = 0; j < l; j++) {\n            row = item.rows[j];\n            for (k = 0; k < row.length; k++) {\n              row[k].tokens = this.lexer.inline(row[k].text);\n            }\n          }\n          return item;\n        }\n      }\n    }\n  }, {\n    key: \"lheading\",\n    value: function lheading(src) {\n      var cap = this.rules.block.lheading.exec(src);\n      if (cap) {\n        return {\n          type: 'heading',\n          raw: cap[0],\n          depth: cap[2].charAt(0) === '=' ? 1 : 2,\n          text: cap[1],\n          tokens: this.lexer.inline(cap[1])\n        };\n      }\n    }\n  }, {\n    key: \"paragraph\",\n    value: function paragraph(src) {\n      var cap = this.rules.block.paragraph.exec(src);\n      if (cap) {\n        var text = cap[1].charAt(cap[1].length - 1) === '\\n' ? cap[1].slice(0, -1) : cap[1];\n        return {\n          type: 'paragraph',\n          raw: cap[0],\n          text: text,\n          tokens: this.lexer.inline(text)\n        };\n      }\n    }\n  }, {\n    key: \"text\",\n    value: function text(src) {\n      var cap = this.rules.block.text.exec(src);\n      if (cap) {\n        return {\n          type: 'text',\n          raw: cap[0],\n          text: cap[0],\n          tokens: this.lexer.inline(cap[0])\n        };\n      }\n    }\n  }, {\n    key: \"escape\",\n    value: function escape(src) {\n      var cap = this.rules.inline.escape.exec(src);\n      if (cap) {\n        return {\n          type: 'escape',\n          raw: cap[0],\n          text: _escape(cap[1])\n        };\n      }\n    }\n  }, {\n    key: \"tag\",\n    value: function tag(src) {\n      var cap = this.rules.inline.tag.exec(src);\n      if (cap) {\n        if (!this.lexer.state.inLink && /^<a /i.test(cap[0])) {\n          this.lexer.state.inLink = true;\n        } else if (this.lexer.state.inLink && /^<\\/a>/i.test(cap[0])) {\n          this.lexer.state.inLink = false;\n        }\n        if (!this.lexer.state.inRawBlock && /^<(pre|code|kbd|script)(\\s|>)/i.test(cap[0])) {\n          this.lexer.state.inRawBlock = true;\n        } else if (this.lexer.state.inRawBlock && /^<\\/(pre|code|kbd|script)(\\s|>)/i.test(cap[0])) {\n          this.lexer.state.inRawBlock = false;\n        }\n        return {\n          type: this.options.sanitize ? 'text' : 'html',\n          raw: cap[0],\n          inLink: this.lexer.state.inLink,\n          inRawBlock: this.lexer.state.inRawBlock,\n          text: this.options.sanitize ? this.options.sanitizer ? this.options.sanitizer(cap[0]) : _escape(cap[0]) : cap[0]\n        };\n      }\n    }\n  }, {\n    key: \"link\",\n    value: function link(src) {\n      var cap = this.rules.inline.link.exec(src);\n      if (cap) {\n        var trimmedUrl = cap[2].trim();\n        if (!this.options.pedantic && /^</.test(trimmedUrl)) {\n          // commonmark requires matching angle brackets\n          if (!/>$/.test(trimmedUrl)) {\n            return;\n          }\n\n          // ending angle bracket cannot be escaped\n          var rtrimSlash = rtrim(trimmedUrl.slice(0, -1), '\\\\');\n          if ((trimmedUrl.length - rtrimSlash.length) % 2 === 0) {\n            return;\n          }\n        } else {\n          // find closing parenthesis\n          var lastParenIndex = findClosingBracket(cap[2], '()');\n          if (lastParenIndex > -1) {\n            var start = cap[0].indexOf('!') === 0 ? 5 : 4;\n            var linkLen = start + cap[1].length + lastParenIndex;\n            cap[2] = cap[2].substring(0, lastParenIndex);\n            cap[0] = cap[0].substring(0, linkLen).trim();\n            cap[3] = '';\n          }\n        }\n        var href = cap[2];\n        var title = '';\n        if (this.options.pedantic) {\n          // split pedantic href and title\n          var link = /^([^'\"]*[^\\s])\\s+(['\"])(.*)\\2/.exec(href);\n          if (link) {\n            href = link[1];\n            title = link[3];\n          }\n        } else {\n          title = cap[3] ? cap[3].slice(1, -1) : '';\n        }\n        href = href.trim();\n        if (/^</.test(href)) {\n          if (this.options.pedantic && !/>$/.test(trimmedUrl)) {\n            // pedantic allows starting angle bracket without ending angle bracket\n            href = href.slice(1);\n          } else {\n            href = href.slice(1, -1);\n          }\n        }\n        return outputLink(cap, {\n          href: href ? href.replace(this.rules.inline._escapes, '$1') : href,\n          title: title ? title.replace(this.rules.inline._escapes, '$1') : title\n        }, cap[0], this.lexer);\n      }\n    }\n  }, {\n    key: \"reflink\",\n    value: function reflink(src, links) {\n      var cap;\n      if ((cap = this.rules.inline.reflink.exec(src)) || (cap = this.rules.inline.nolink.exec(src))) {\n        var link = (cap[2] || cap[1]).replace(/\\s+/g, ' ');\n        link = links[link.toLowerCase()];\n        if (!link) {\n          var text = cap[0].charAt(0);\n          return {\n            type: 'text',\n            raw: text,\n            text: text\n          };\n        }\n        return outputLink(cap, link, cap[0], this.lexer);\n      }\n    }\n  }, {\n    key: \"emStrong\",\n    value: function emStrong(src, maskedSrc) {\n      var prevChar = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n      var match = this.rules.inline.emStrong.lDelim.exec(src);\n      if (!match) return;\n\n      // _ can't be between two alphanumerics. \\p{L}\\p{N} includes non-english alphabet/numbers as well\n      if (match[3] && prevChar.match(/(?:[0-9A-Za-z\\xAA\\xB2\\xB3\\xB5\\xB9\\xBA\\xBC-\\xBE\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0560-\\u0588\\u05D0-\\u05EA\\u05EF-\\u05F2\\u0620-\\u064A\\u0660-\\u0669\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07C0-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u0860-\\u086A\\u0870-\\u0887\\u0889-\\u088E\\u08A0-\\u08C9\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0966-\\u096F\\u0971-\\u0980\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09E6-\\u09F1\\u09F4-\\u09F9\\u09FC\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A66-\\u0A6F\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0AE6-\\u0AEF\\u0AF9\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B66-\\u0B6F\\u0B71-\\u0B77\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0BE6-\\u0BF2\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D\\u0C58-\\u0C5A\\u0C5D\\u0C60\\u0C61\\u0C66-\\u0C6F\\u0C78-\\u0C7E\\u0C80\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDD\\u0CDE\\u0CE0\\u0CE1\\u0CE6-\\u0CEF\\u0CF1\\u0CF2\\u0D04-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D54-\\u0D56\\u0D58-\\u0D61\\u0D66-\\u0D78\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0DE6-\\u0DEF\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E50-\\u0E59\\u0E81\\u0E82\\u0E84\\u0E86-\\u0E8A\\u0E8C-\\u0EA3\\u0EA5\\u0EA7-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0ED0-\\u0ED9\\u0EDC-\\u0EDF\\u0F00\\u0F20-\\u0F33\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F-\\u1049\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u1090-\\u1099\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1369-\\u137C\\u1380-\\u138F\\u13A0-\\u13F5\\u13F8-\\u13FD\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u1711\\u171F-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u17E0-\\u17E9\\u17F0-\\u17F9\\u1810-\\u1819\\u1820-\\u1878\\u1880-\\u1884\\u1887-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1946-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u19D0-\\u19DA\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1A80-\\u1A89\\u1A90-\\u1A99\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4C\\u1B50-\\u1B59\\u1B83-\\u1BA0\\u1BAE-\\u1BE5\\u1C00-\\u1C23\\u1C40-\\u1C49\\u1C4D-\\u1C7D\\u1C80-\\u1C88\\u1C90-\\u1CBA\\u1CBD-\\u1CBF\\u1CE9-\\u1CEC\\u1CEE-\\u1CF3\\u1CF5\\u1CF6\\u1CFA\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2070\\u2071\\u2074-\\u2079\\u207F-\\u2089\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2150-\\u2189\\u2460-\\u249B\\u24EA-\\u24FF\\u2776-\\u2793\\u2C00-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2CFD\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2E2F\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312F\\u3131-\\u318E\\u3192-\\u3195\\u31A0-\\u31BF\\u31F0-\\u31FF\\u3220-\\u3229\\u3248-\\u324F\\u3251-\\u325F\\u3280-\\u3289\\u32B1-\\u32BF\\u3400-\\u4DBF\\u4E00-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA62B\\uA640-\\uA66E\\uA67F-\\uA69D\\uA6A0-\\uA6EF\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA7CA\\uA7D0\\uA7D1\\uA7D3\\uA7D5-\\uA7D9\\uA7F2-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA830-\\uA835\\uA840-\\uA873\\uA882-\\uA8B3\\uA8D0-\\uA8D9\\uA8F2-\\uA8F7\\uA8FB\\uA8FD\\uA8FE\\uA900-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF-\\uA9D9\\uA9E0-\\uA9E4\\uA9E6-\\uA9FE\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA50-\\uAA59\\uAA60-\\uAA76\\uAA7A\\uAA7E-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB69\\uAB70-\\uABE2\\uABF0-\\uABF9\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF10-\\uFF19\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]|\\uD800[\\uDC00-\\uDC0B\\uDC0D-\\uDC26\\uDC28-\\uDC3A\\uDC3C\\uDC3D\\uDC3F-\\uDC4D\\uDC50-\\uDC5D\\uDC80-\\uDCFA\\uDD07-\\uDD33\\uDD40-\\uDD78\\uDD8A\\uDD8B\\uDE80-\\uDE9C\\uDEA0-\\uDED0\\uDEE1-\\uDEFB\\uDF00-\\uDF23\\uDF2D-\\uDF4A\\uDF50-\\uDF75\\uDF80-\\uDF9D\\uDFA0-\\uDFC3\\uDFC8-\\uDFCF\\uDFD1-\\uDFD5]|\\uD801[\\uDC00-\\uDC9D\\uDCA0-\\uDCA9\\uDCB0-\\uDCD3\\uDCD8-\\uDCFB\\uDD00-\\uDD27\\uDD30-\\uDD63\\uDD70-\\uDD7A\\uDD7C-\\uDD8A\\uDD8C-\\uDD92\\uDD94\\uDD95\\uDD97-\\uDDA1\\uDDA3-\\uDDB1\\uDDB3-\\uDDB9\\uDDBB\\uDDBC\\uDE00-\\uDF36\\uDF40-\\uDF55\\uDF60-\\uDF67\\uDF80-\\uDF85\\uDF87-\\uDFB0\\uDFB2-\\uDFBA]|\\uD802[\\uDC00-\\uDC05\\uDC08\\uDC0A-\\uDC35\\uDC37\\uDC38\\uDC3C\\uDC3F-\\uDC55\\uDC58-\\uDC76\\uDC79-\\uDC9E\\uDCA7-\\uDCAF\\uDCE0-\\uDCF2\\uDCF4\\uDCF5\\uDCFB-\\uDD1B\\uDD20-\\uDD39\\uDD80-\\uDDB7\\uDDBC-\\uDDCF\\uDDD2-\\uDE00\\uDE10-\\uDE13\\uDE15-\\uDE17\\uDE19-\\uDE35\\uDE40-\\uDE48\\uDE60-\\uDE7E\\uDE80-\\uDE9F\\uDEC0-\\uDEC7\\uDEC9-\\uDEE4\\uDEEB-\\uDEEF\\uDF00-\\uDF35\\uDF40-\\uDF55\\uDF58-\\uDF72\\uDF78-\\uDF91\\uDFA9-\\uDFAF]|\\uD803[\\uDC00-\\uDC48\\uDC80-\\uDCB2\\uDCC0-\\uDCF2\\uDCFA-\\uDD23\\uDD30-\\uDD39\\uDE60-\\uDE7E\\uDE80-\\uDEA9\\uDEB0\\uDEB1\\uDF00-\\uDF27\\uDF30-\\uDF45\\uDF51-\\uDF54\\uDF70-\\uDF81\\uDFB0-\\uDFCB\\uDFE0-\\uDFF6]|\\uD804[\\uDC03-\\uDC37\\uDC52-\\uDC6F\\uDC71\\uDC72\\uDC75\\uDC83-\\uDCAF\\uDCD0-\\uDCE8\\uDCF0-\\uDCF9\\uDD03-\\uDD26\\uDD36-\\uDD3F\\uDD44\\uDD47\\uDD50-\\uDD72\\uDD76\\uDD83-\\uDDB2\\uDDC1-\\uDDC4\\uDDD0-\\uDDDA\\uDDDC\\uDDE1-\\uDDF4\\uDE00-\\uDE11\\uDE13-\\uDE2B\\uDE3F\\uDE40\\uDE80-\\uDE86\\uDE88\\uDE8A-\\uDE8D\\uDE8F-\\uDE9D\\uDE9F-\\uDEA8\\uDEB0-\\uDEDE\\uDEF0-\\uDEF9\\uDF05-\\uDF0C\\uDF0F\\uDF10\\uDF13-\\uDF28\\uDF2A-\\uDF30\\uDF32\\uDF33\\uDF35-\\uDF39\\uDF3D\\uDF50\\uDF5D-\\uDF61]|\\uD805[\\uDC00-\\uDC34\\uDC47-\\uDC4A\\uDC50-\\uDC59\\uDC5F-\\uDC61\\uDC80-\\uDCAF\\uDCC4\\uDCC5\\uDCC7\\uDCD0-\\uDCD9\\uDD80-\\uDDAE\\uDDD8-\\uDDDB\\uDE00-\\uDE2F\\uDE44\\uDE50-\\uDE59\\uDE80-\\uDEAA\\uDEB8\\uDEC0-\\uDEC9\\uDF00-\\uDF1A\\uDF30-\\uDF3B\\uDF40-\\uDF46]|\\uD806[\\uDC00-\\uDC2B\\uDCA0-\\uDCF2\\uDCFF-\\uDD06\\uDD09\\uDD0C-\\uDD13\\uDD15\\uDD16\\uDD18-\\uDD2F\\uDD3F\\uDD41\\uDD50-\\uDD59\\uDDA0-\\uDDA7\\uDDAA-\\uDDD0\\uDDE1\\uDDE3\\uDE00\\uDE0B-\\uDE32\\uDE3A\\uDE50\\uDE5C-\\uDE89\\uDE9D\\uDEB0-\\uDEF8]|\\uD807[\\uDC00-\\uDC08\\uDC0A-\\uDC2E\\uDC40\\uDC50-\\uDC6C\\uDC72-\\uDC8F\\uDD00-\\uDD06\\uDD08\\uDD09\\uDD0B-\\uDD30\\uDD46\\uDD50-\\uDD59\\uDD60-\\uDD65\\uDD67\\uDD68\\uDD6A-\\uDD89\\uDD98\\uDDA0-\\uDDA9\\uDEE0-\\uDEF2\\uDF02\\uDF04-\\uDF10\\uDF12-\\uDF33\\uDF50-\\uDF59\\uDFB0\\uDFC0-\\uDFD4]|\\uD808[\\uDC00-\\uDF99]|\\uD809[\\uDC00-\\uDC6E\\uDC80-\\uDD43]|\\uD80B[\\uDF90-\\uDFF0]|[\\uD80C\\uD81C-\\uD820\\uD822\\uD840-\\uD868\\uD86A-\\uD86C\\uD86F-\\uD872\\uD874-\\uD879\\uD880-\\uD883\\uD885-\\uD887][\\uDC00-\\uDFFF]|\\uD80D[\\uDC00-\\uDC2F\\uDC41-\\uDC46]|\\uD811[\\uDC00-\\uDE46]|\\uD81A[\\uDC00-\\uDE38\\uDE40-\\uDE5E\\uDE60-\\uDE69\\uDE70-\\uDEBE\\uDEC0-\\uDEC9\\uDED0-\\uDEED\\uDF00-\\uDF2F\\uDF40-\\uDF43\\uDF50-\\uDF59\\uDF5B-\\uDF61\\uDF63-\\uDF77\\uDF7D-\\uDF8F]|\\uD81B[\\uDE40-\\uDE96\\uDF00-\\uDF4A\\uDF50\\uDF93-\\uDF9F\\uDFE0\\uDFE1\\uDFE3]|\\uD821[\\uDC00-\\uDFF7]|\\uD823[\\uDC00-\\uDCD5\\uDD00-\\uDD08]|\\uD82B[\\uDFF0-\\uDFF3\\uDFF5-\\uDFFB\\uDFFD\\uDFFE]|\\uD82C[\\uDC00-\\uDD22\\uDD32\\uDD50-\\uDD52\\uDD55\\uDD64-\\uDD67\\uDD70-\\uDEFB]|\\uD82F[\\uDC00-\\uDC6A\\uDC70-\\uDC7C\\uDC80-\\uDC88\\uDC90-\\uDC99]|\\uD834[\\uDEC0-\\uDED3\\uDEE0-\\uDEF3\\uDF60-\\uDF78]|\\uD835[\\uDC00-\\uDC54\\uDC56-\\uDC9C\\uDC9E\\uDC9F\\uDCA2\\uDCA5\\uDCA6\\uDCA9-\\uDCAC\\uDCAE-\\uDCB9\\uDCBB\\uDCBD-\\uDCC3\\uDCC5-\\uDD05\\uDD07-\\uDD0A\\uDD0D-\\uDD14\\uDD16-\\uDD1C\\uDD1E-\\uDD39\\uDD3B-\\uDD3E\\uDD40-\\uDD44\\uDD46\\uDD4A-\\uDD50\\uDD52-\\uDEA5\\uDEA8-\\uDEC0\\uDEC2-\\uDEDA\\uDEDC-\\uDEFA\\uDEFC-\\uDF14\\uDF16-\\uDF34\\uDF36-\\uDF4E\\uDF50-\\uDF6E\\uDF70-\\uDF88\\uDF8A-\\uDFA8\\uDFAA-\\uDFC2\\uDFC4-\\uDFCB\\uDFCE-\\uDFFF]|\\uD837[\\uDF00-\\uDF1E\\uDF25-\\uDF2A]|\\uD838[\\uDC30-\\uDC6D\\uDD00-\\uDD2C\\uDD37-\\uDD3D\\uDD40-\\uDD49\\uDD4E\\uDE90-\\uDEAD\\uDEC0-\\uDEEB\\uDEF0-\\uDEF9]|\\uD839[\\uDCD0-\\uDCEB\\uDCF0-\\uDCF9\\uDFE0-\\uDFE6\\uDFE8-\\uDFEB\\uDFED\\uDFEE\\uDFF0-\\uDFFE]|\\uD83A[\\uDC00-\\uDCC4\\uDCC7-\\uDCCF\\uDD00-\\uDD43\\uDD4B\\uDD50-\\uDD59]|\\uD83B[\\uDC71-\\uDCAB\\uDCAD-\\uDCAF\\uDCB1-\\uDCB4\\uDD01-\\uDD2D\\uDD2F-\\uDD3D\\uDE00-\\uDE03\\uDE05-\\uDE1F\\uDE21\\uDE22\\uDE24\\uDE27\\uDE29-\\uDE32\\uDE34-\\uDE37\\uDE39\\uDE3B\\uDE42\\uDE47\\uDE49\\uDE4B\\uDE4D-\\uDE4F\\uDE51\\uDE52\\uDE54\\uDE57\\uDE59\\uDE5B\\uDE5D\\uDE5F\\uDE61\\uDE62\\uDE64\\uDE67-\\uDE6A\\uDE6C-\\uDE72\\uDE74-\\uDE77\\uDE79-\\uDE7C\\uDE7E\\uDE80-\\uDE89\\uDE8B-\\uDE9B\\uDEA1-\\uDEA3\\uDEA5-\\uDEA9\\uDEAB-\\uDEBB]|\\uD83C[\\uDD00-\\uDD0C]|\\uD83E[\\uDFF0-\\uDFF9]|\\uD869[\\uDC00-\\uDEDF\\uDF00-\\uDFFF]|\\uD86D[\\uDC00-\\uDF39\\uDF40-\\uDFFF]|\\uD86E[\\uDC00-\\uDC1D\\uDC20-\\uDFFF]|\\uD873[\\uDC00-\\uDEA1\\uDEB0-\\uDFFF]|\\uD87A[\\uDC00-\\uDFE0]|\\uD87E[\\uDC00-\\uDE1D]|\\uD884[\\uDC00-\\uDF4A\\uDF50-\\uDFFF]|\\uD888[\\uDC00-\\uDFAF])/)) return;\n      var nextChar = match[1] || match[2] || '';\n      if (!nextChar || nextChar && (prevChar === '' || this.rules.inline.punctuation.exec(prevChar))) {\n        var lLength = match[0].length - 1;\n        var rDelim,\n          rLength,\n          delimTotal = lLength,\n          midDelimTotal = 0;\n        var endReg = match[0][0] === '*' ? this.rules.inline.emStrong.rDelimAst : this.rules.inline.emStrong.rDelimUnd;\n        endReg.lastIndex = 0;\n\n        // Clip maskedSrc to same section of string as src (move to lexer?)\n        maskedSrc = maskedSrc.slice(-1 * src.length + lLength);\n        while ((match = endReg.exec(maskedSrc)) != null) {\n          rDelim = match[1] || match[2] || match[3] || match[4] || match[5] || match[6];\n          if (!rDelim) continue; // skip single * in __abc*abc__\n\n          rLength = rDelim.length;\n          if (match[3] || match[4]) {\n            // found another Left Delim\n            delimTotal += rLength;\n            continue;\n          } else if (match[5] || match[6]) {\n            // either Left or Right Delim\n            if (lLength % 3 && !((lLength + rLength) % 3)) {\n              midDelimTotal += rLength;\n              continue; // CommonMark Emphasis Rules 9-10\n            }\n          }\n\n          delimTotal -= rLength;\n          if (delimTotal > 0) continue; // Haven't found enough closing delimiters\n\n          // Remove extra characters. *a*** -> *a*\n          rLength = Math.min(rLength, rLength + delimTotal + midDelimTotal);\n          var raw = src.slice(0, lLength + match.index + (match[0].length - rDelim.length) + rLength);\n\n          // Create `em` if smallest delimiter has odd char count. *a***\n          if (Math.min(lLength, rLength) % 2) {\n            var _text = raw.slice(1, -1);\n            return {\n              type: 'em',\n              raw: raw,\n              text: _text,\n              tokens: this.lexer.inlineTokens(_text)\n            };\n          }\n\n          // Create 'strong' if smallest delimiter has even char count. **a***\n          var text = raw.slice(2, -2);\n          return {\n            type: 'strong',\n            raw: raw,\n            text: text,\n            tokens: this.lexer.inlineTokens(text)\n          };\n        }\n      }\n    }\n  }, {\n    key: \"codespan\",\n    value: function codespan(src) {\n      var cap = this.rules.inline.code.exec(src);\n      if (cap) {\n        var text = cap[2].replace(/\\n/g, ' ');\n        var hasNonSpaceChars = /[^ ]/.test(text);\n        var hasSpaceCharsOnBothEnds = /^ /.test(text) && / $/.test(text);\n        if (hasNonSpaceChars && hasSpaceCharsOnBothEnds) {\n          text = text.substring(1, text.length - 1);\n        }\n        text = _escape(text, true);\n        return {\n          type: 'codespan',\n          raw: cap[0],\n          text: text\n        };\n      }\n    }\n  }, {\n    key: \"br\",\n    value: function br(src) {\n      var cap = this.rules.inline.br.exec(src);\n      if (cap) {\n        return {\n          type: 'br',\n          raw: cap[0]\n        };\n      }\n    }\n  }, {\n    key: \"del\",\n    value: function del(src) {\n      var cap = this.rules.inline.del.exec(src);\n      if (cap) {\n        return {\n          type: 'del',\n          raw: cap[0],\n          text: cap[2],\n          tokens: this.lexer.inlineTokens(cap[2])\n        };\n      }\n    }\n  }, {\n    key: \"autolink\",\n    value: function autolink(src, mangle) {\n      var cap = this.rules.inline.autolink.exec(src);\n      if (cap) {\n        var text, href;\n        if (cap[2] === '@') {\n          text = _escape(this.options.mangle ? mangle(cap[1]) : cap[1]);\n          href = 'mailto:' + text;\n        } else {\n          text = _escape(cap[1]);\n          href = text;\n        }\n        return {\n          type: 'link',\n          raw: cap[0],\n          text: text,\n          href: href,\n          tokens: [{\n            type: 'text',\n            raw: text,\n            text: text\n          }]\n        };\n      }\n    }\n  }, {\n    key: \"url\",\n    value: function url(src, mangle) {\n      var cap;\n      if (cap = this.rules.inline.url.exec(src)) {\n        var text, href;\n        if (cap[2] === '@') {\n          text = _escape(this.options.mangle ? mangle(cap[0]) : cap[0]);\n          href = 'mailto:' + text;\n        } else {\n          // do extended autolink path validation\n          var prevCapZero;\n          do {\n            prevCapZero = cap[0];\n            cap[0] = this.rules.inline._backpedal.exec(cap[0])[0];\n          } while (prevCapZero !== cap[0]);\n          text = _escape(cap[0]);\n          if (cap[1] === 'www.') {\n            href = 'http://' + cap[0];\n          } else {\n            href = cap[0];\n          }\n        }\n        return {\n          type: 'link',\n          raw: cap[0],\n          text: text,\n          href: href,\n          tokens: [{\n            type: 'text',\n            raw: text,\n            text: text\n          }]\n        };\n      }\n    }\n  }, {\n    key: \"inlineText\",\n    value: function inlineText(src, smartypants) {\n      var cap = this.rules.inline.text.exec(src);\n      if (cap) {\n        var text;\n        if (this.lexer.state.inRawBlock) {\n          text = this.options.sanitize ? this.options.sanitizer ? this.options.sanitizer(cap[0]) : _escape(cap[0]) : cap[0];\n        } else {\n          text = _escape(this.options.smartypants ? smartypants(cap[0]) : cap[0]);\n        }\n        return {\n          type: 'text',\n          raw: cap[0],\n          text: text\n        };\n      }\n    }\n  }]);\n  return Tokenizer;\n}();\n/**\n * Block-Level Grammar\n */\nvar block = {\n  newline: /^(?: *(?:\\n|$))+/,\n  code: /^( {4}[^\\n]+(?:\\n(?: *(?:\\n|$))*)?)+/,\n  fences: /^ {0,3}(`{3,}(?=[^`\\n]*\\n)|~{3,})([^\\n]*)\\n(?:|([\\s\\S]*?)\\n)(?: {0,3}\\1[~`]* *(?=\\n|$)|$)/,\n  hr: /^ {0,3}((?:-[\\t ]*){3,}|(?:_[ \\t]*){3,}|(?:\\*[ \\t]*){3,})(?:\\n+|$)/,\n  heading: /^ {0,3}(#{1,6})(?=\\s|$)(.*)(?:\\n+|$)/,\n  blockquote: /^( {0,3}> ?(paragraph|[^\\n]*)(?:\\n|$))+/,\n  list: /^( {0,3}bull)([ \\t][^\\n]+?)?(?:\\n|$)/,\n  html: '^ {0,3}(?:' // optional indentation\n  + '<(script|pre|style|textarea)[\\\\s>][\\\\s\\\\S]*?(?:</\\\\1>[^\\\\n]*\\\\n+|$)' // (1)\n  + '|comment[^\\\\n]*(\\\\n+|$)' // (2)\n  + '|<\\\\?[\\\\s\\\\S]*?(?:\\\\?>\\\\n*|$)' // (3)\n  + '|<![A-Z][\\\\s\\\\S]*?(?:>\\\\n*|$)' // (4)\n  + '|<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?(?:\\\\]\\\\]>\\\\n*|$)' // (5)\n  + '|</?(tag)(?: +|\\\\n|/?>)[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)' // (6)\n  + '|<(?!script|pre|style|textarea)([a-z][\\\\w-]*)(?:attribute)*? */?>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)' // (7) open tag\n  + '|</(?!script|pre|style|textarea)[a-z][\\\\w-]*\\\\s*>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)' // (7) closing tag\n  + ')',\n  def: /^ {0,3}\\[(label)\\]: *(?:\\n *)?([^<\\s][^\\s]*|<.*?>)(?:(?: +(?:\\n *)?| *\\n *)(title))? *(?:\\n+|$)/,\n  table: noopTest,\n  lheading: /^((?:.|\\n(?!\\n))+?)\\n {0,3}(=+|-+) *(?:\\n+|$)/,\n  // regex template, placeholders will be replaced according to different paragraph\n  // interruption rules of commonmark and the original markdown spec:\n  _paragraph: /^([^\\n]+(?:\\n(?!hr|heading|lheading|blockquote|fences|list|html|table| +\\n)[^\\n]+)*)/,\n  text: /^[^\\n]+/\n};\nblock._label = /(?!\\s*\\])(?:\\\\.|[^\\[\\]\\\\])+/;\nblock._title = /(?:\"(?:\\\\\"?|[^\"\\\\])*\"|'[^'\\n]*(?:\\n[^'\\n]+)*\\n?'|\\([^()]*\\))/;\nblock.def = edit(block.def).replace('label', block._label).replace('title', block._title).getRegex();\nblock.bullet = /(?:[*+-]|\\d{1,9}[.)])/;\nblock.listItemStart = edit(/^( *)(bull) */).replace('bull', block.bullet).getRegex();\nblock.list = edit(block.list).replace(/bull/g, block.bullet).replace('hr', '\\\\n+(?=\\\\1?(?:(?:- *){3,}|(?:_ *){3,}|(?:\\\\* *){3,})(?:\\\\n+|$))').replace('def', '\\\\n+(?=' + block.def.source + ')').getRegex();\nblock._tag = 'address|article|aside|base|basefont|blockquote|body|caption' + '|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption' + '|figure|footer|form|frame|frameset|h[1-6]|head|header|hr|html|iframe' + '|legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option' + '|p|param|section|source|summary|table|tbody|td|tfoot|th|thead|title|tr' + '|track|ul';\nblock._comment = /<!--(?!-?>)[\\s\\S]*?(?:-->|$)/;\nblock.html = edit(block.html, 'i').replace('comment', block._comment).replace('tag', block._tag).replace('attribute', / +[a-zA-Z:_][\\w.:-]*(?: *= *\"[^\"\\n]*\"| *= *'[^'\\n]*'| *= *[^\\s\"'=<>`]+)?/).getRegex();\nblock.paragraph = edit(block._paragraph).replace('hr', block.hr).replace('heading', ' {0,3}#{1,6} ').replace('|lheading', '') // setex headings don't interrupt commonmark paragraphs\n.replace('|table', '').replace('blockquote', ' {0,3}>').replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n').replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n.replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)').replace('tag', block._tag) // pars can be interrupted by type (6) html blocks\n.getRegex();\nblock.blockquote = edit(block.blockquote).replace('paragraph', block.paragraph).getRegex();\n\n/**\n * Normal Block Grammar\n */\n\nblock.normal = merge({}, block);\n\n/**\n * GFM Block Grammar\n */\n\nblock.gfm = merge({}, block.normal, {\n  table: '^ *([^\\\\n ].*\\\\|.*)\\\\n' // Header\n  + ' {0,3}(?:\\\\| *)?(:?-+:? *(?:\\\\| *:?-+:? *)*)(?:\\\\| *)?' // Align\n  + '(?:\\\\n((?:(?! *\\\\n|hr|heading|blockquote|code|fences|list|html).*(?:\\\\n|$))*)\\\\n*|$)' // Cells\n});\n\nblock.gfm.table = edit(block.gfm.table).replace('hr', block.hr).replace('heading', ' {0,3}#{1,6} ').replace('blockquote', ' {0,3}>').replace('code', ' {4}[^\\\\n]').replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n').replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n.replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)').replace('tag', block._tag) // tables can be interrupted by type (6) html blocks\n.getRegex();\nblock.gfm.paragraph = edit(block._paragraph).replace('hr', block.hr).replace('heading', ' {0,3}#{1,6} ').replace('|lheading', '') // setex headings don't interrupt commonmark paragraphs\n.replace('table', block.gfm.table) // interrupt paragraphs with table\n.replace('blockquote', ' {0,3}>').replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n').replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n.replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)').replace('tag', block._tag) // pars can be interrupted by type (6) html blocks\n.getRegex();\n/**\n * Pedantic grammar (original John Gruber's loose markdown specification)\n */\n\nblock.pedantic = merge({}, block.normal, {\n  html: edit('^ *(?:comment *(?:\\\\n|\\\\s*$)' + '|<(tag)[\\\\s\\\\S]+?</\\\\1> *(?:\\\\n{2,}|\\\\s*$)' // closed tag\n  + '|<tag(?:\"[^\"]*\"|\\'[^\\']*\\'|\\\\s[^\\'\"/>\\\\s]*)*?/?> *(?:\\\\n{2,}|\\\\s*$))').replace('comment', block._comment).replace(/tag/g, '(?!(?:' + 'a|em|strong|small|s|cite|q|dfn|abbr|data|time|code|var|samp|kbd|sub' + '|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo|span|br|wbr|ins|del|img)' + '\\\\b)\\\\w+(?!:|[^\\\\w\\\\s@]*@)\\\\b').getRegex(),\n  def: /^ *\\[([^\\]]+)\\]: *<?([^\\s>]+)>?(?: +([\"(][^\\n]+[\")]))? *(?:\\n+|$)/,\n  heading: /^(#{1,6})(.*)(?:\\n+|$)/,\n  fences: noopTest,\n  // fences not supported\n  lheading: /^(.+?)\\n {0,3}(=+|-+) *(?:\\n+|$)/,\n  paragraph: edit(block.normal._paragraph).replace('hr', block.hr).replace('heading', ' *#{1,6} *[^\\n]').replace('lheading', block.lheading).replace('blockquote', ' {0,3}>').replace('|fences', '').replace('|list', '').replace('|html', '').getRegex()\n});\n\n/**\n * Inline-Level Grammar\n */\nvar inline = {\n  escape: /^\\\\([!\"#$%&'()*+,\\-./:;<=>?@\\[\\]\\\\^_`{|}~])/,\n  autolink: /^<(scheme:[^\\s\\x00-\\x1f<>]*|email)>/,\n  url: noopTest,\n  tag: '^comment' + '|^</[a-zA-Z][\\\\w:-]*\\\\s*>' // self-closing tag\n  + '|^<[a-zA-Z][\\\\w-]*(?:attribute)*?\\\\s*/?>' // open tag\n  + '|^<\\\\?[\\\\s\\\\S]*?\\\\?>' // processing instruction, e.g. <?php ?>\n  + '|^<![a-zA-Z]+\\\\s[\\\\s\\\\S]*?>' // declaration, e.g. <!DOCTYPE html>\n  + '|^<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?\\\\]\\\\]>',\n  // CDATA section\n  link: /^!?\\[(label)\\]\\(\\s*(href)(?:\\s+(title))?\\s*\\)/,\n  reflink: /^!?\\[(label)\\]\\[(ref)\\]/,\n  nolink: /^!?\\[(ref)\\](?:\\[\\])?/,\n  reflinkSearch: 'reflink|nolink(?!\\\\()',\n  emStrong: {\n    lDelim: /^(?:\\*+(?:([punct_])|[^\\s*]))|^_+(?:([punct*])|([^\\s_]))/,\n    //        (1) and (2) can only be a Right Delimiter. (3) and (4) can only be Left.  (5) and (6) can be either Left or Right.\n    //          () Skip orphan inside strong                                      () Consume to delim     (1) #***                (2) a***#, a***                             (3) #***a, ***a                 (4) ***#              (5) #***#                 (6) a***a\n    rDelimAst: /^(?:[^_*\\\\]|\\\\.)*?\\_\\_(?:[^_*\\\\]|\\\\.)*?\\*(?:[^_*\\\\]|\\\\.)*?(?=\\_\\_)|(?:[^*\\\\]|\\\\.)+(?=[^*])|[punct_](\\*+)(?=[\\s]|$)|(?:[^punct*_\\s\\\\]|\\\\.)(\\*+)(?=[punct_\\s]|$)|[punct_\\s](\\*+)(?=[^punct*_\\s])|[\\s](\\*+)(?=[punct_])|[punct_](\\*+)(?=[punct_])|(?:[^punct*_\\s\\\\]|\\\\.)(\\*+)(?=[^punct*_\\s])/,\n    rDelimUnd: /^(?:[^_*\\\\]|\\\\.)*?\\*\\*(?:[^_*\\\\]|\\\\.)*?\\_(?:[^_*\\\\]|\\\\.)*?(?=\\*\\*)|(?:[^_\\\\]|\\\\.)+(?=[^_])|[punct*](\\_+)(?=[\\s]|$)|(?:[^punct*_\\s\\\\]|\\\\.)(\\_+)(?=[punct*\\s]|$)|[punct*\\s](\\_+)(?=[^punct*_\\s])|[\\s](\\_+)(?=[punct*])|[punct*](\\_+)(?=[punct*])/ // ^- Not allowed for _\n  },\n\n  code: /^(`+)([^`]|[^`][\\s\\S]*?[^`])\\1(?!`)/,\n  br: /^( {2,}|\\\\)\\n(?!\\s*$)/,\n  del: noopTest,\n  text: /^(`+|[^`])(?:(?= {2,}\\n)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*_]|\\b_|$)|[^ ](?= {2,}\\n)))/,\n  punctuation: /^([\\spunctuation])/\n};\n\n// list of punctuation marks from CommonMark spec\n// without * and _ to handle the different emphasis markers * and _\ninline._punctuation = '!\"#$%&\\'()+\\\\-.,/:;<=>?@\\\\[\\\\]`^{|}~';\ninline.punctuation = edit(inline.punctuation).replace(/punctuation/g, inline._punctuation).getRegex();\n\n// sequences em should skip over [title](link), `code`, <html>\ninline.blockSkip = /\\[[^\\]]*?\\]\\([^\\)]*?\\)|`[^`]*?`|<[^>]*?>/g;\n// lookbehind is not available on Safari as of version 16\n// inline.escapedEmSt = /(?<=(?:^|[^\\\\)(?:\\\\[^])*)\\\\[*_]/g;\ninline.escapedEmSt = /(?:^|[^\\\\])(?:\\\\\\\\)*\\\\[*_]/g;\ninline._comment = edit(block._comment).replace('(?:-->|$)', '-->').getRegex();\ninline.emStrong.lDelim = edit(inline.emStrong.lDelim).replace(/punct/g, inline._punctuation).getRegex();\ninline.emStrong.rDelimAst = edit(inline.emStrong.rDelimAst, 'g').replace(/punct/g, inline._punctuation).getRegex();\ninline.emStrong.rDelimUnd = edit(inline.emStrong.rDelimUnd, 'g').replace(/punct/g, inline._punctuation).getRegex();\ninline._escapes = /\\\\([!\"#$%&'()*+,\\-./:;<=>?@\\[\\]\\\\^_`{|}~])/g;\ninline._scheme = /[a-zA-Z][a-zA-Z0-9+.-]{1,31}/;\ninline._email = /[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+(@)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(?![-_])/;\ninline.autolink = edit(inline.autolink).replace('scheme', inline._scheme).replace('email', inline._email).getRegex();\ninline._attribute = /\\s+[a-zA-Z:_][\\w.:-]*(?:\\s*=\\s*\"[^\"]*\"|\\s*=\\s*'[^']*'|\\s*=\\s*[^\\s\"'=<>`]+)?/;\ninline.tag = edit(inline.tag).replace('comment', inline._comment).replace('attribute', inline._attribute).getRegex();\ninline._label = /(?:\\[(?:\\\\.|[^\\[\\]\\\\])*\\]|\\\\.|`[^`]*`|[^\\[\\]\\\\`])*?/;\ninline._href = /<(?:\\\\.|[^\\n<>\\\\])+>|[^\\s\\x00-\\x1f]*/;\ninline._title = /\"(?:\\\\\"?|[^\"\\\\])*\"|'(?:\\\\'?|[^'\\\\])*'|\\((?:\\\\\\)?|[^)\\\\])*\\)/;\ninline.link = edit(inline.link).replace('label', inline._label).replace('href', inline._href).replace('title', inline._title).getRegex();\ninline.reflink = edit(inline.reflink).replace('label', inline._label).replace('ref', block._label).getRegex();\ninline.nolink = edit(inline.nolink).replace('ref', block._label).getRegex();\ninline.reflinkSearch = edit(inline.reflinkSearch, 'g').replace('reflink', inline.reflink).replace('nolink', inline.nolink).getRegex();\n\n/**\n * Normal Inline Grammar\n */\n\ninline.normal = merge({}, inline);\n\n/**\n * Pedantic Inline Grammar\n */\n\ninline.pedantic = merge({}, inline.normal, {\n  strong: {\n    start: /^__|\\*\\*/,\n    middle: /^__(?=\\S)([\\s\\S]*?\\S)__(?!_)|^\\*\\*(?=\\S)([\\s\\S]*?\\S)\\*\\*(?!\\*)/,\n    endAst: /\\*\\*(?!\\*)/g,\n    endUnd: /__(?!_)/g\n  },\n  em: {\n    start: /^_|\\*/,\n    middle: /^()\\*(?=\\S)([\\s\\S]*?\\S)\\*(?!\\*)|^_(?=\\S)([\\s\\S]*?\\S)_(?!_)/,\n    endAst: /\\*(?!\\*)/g,\n    endUnd: /_(?!_)/g\n  },\n  link: edit(/^!?\\[(label)\\]\\((.*?)\\)/).replace('label', inline._label).getRegex(),\n  reflink: edit(/^!?\\[(label)\\]\\s*\\[([^\\]]*)\\]/).replace('label', inline._label).getRegex()\n});\n\n/**\n * GFM Inline Grammar\n */\n\ninline.gfm = merge({}, inline.normal, {\n  escape: edit(inline.escape).replace('])', '~|])').getRegex(),\n  _extended_email: /[A-Za-z0-9._+-]+(@)[a-zA-Z0-9-_]+(?:\\.[a-zA-Z0-9-_]*[a-zA-Z0-9])+(?![-_])/,\n  url: /^((?:ftp|https?):\\/\\/|www\\.)(?:[a-zA-Z0-9\\-]+\\.?)+[^\\s<]*|^email/,\n  _backpedal: /(?:[^?!.,:;*_'\"~()&]+|\\([^)]*\\)|&(?![a-zA-Z0-9]+;$)|[?!.,:;*_'\"~)]+(?!$))+/,\n  del: /^(~~?)(?=[^\\s~])([\\s\\S]*?[^\\s~])\\1(?=[^~]|$)/,\n  text: /^([`~]+|[^`~])(?:(?= {2,}\\n)|(?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*~_]|\\b_|https?:\\/\\/|ftp:\\/\\/|www\\.|$)|[^ ](?= {2,}\\n)|[^a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-](?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)))/\n});\ninline.gfm.url = edit(inline.gfm.url, 'i').replace('email', inline.gfm._extended_email).getRegex();\n/**\n * GFM + Line Breaks Inline Grammar\n */\n\ninline.breaks = merge({}, inline.gfm, {\n  br: edit(inline.br).replace('{2,}', '*').getRegex(),\n  text: edit(inline.gfm.text).replace('\\\\b_', '\\\\b_| {2,}\\\\n').replace(/\\{2,\\}/g, '*').getRegex()\n});\n\n/**\n * smartypants text replacement\n * @param {string} text\n */\nfunction smartypants(text) {\n  return text\n  // em-dashes\n  .replace(/---/g, \"\\u2014\")\n  // en-dashes\n  .replace(/--/g, \"\\u2013\")\n  // opening singles\n  .replace(/(^|[-\\u2014/(\\[{\"\\s])'/g, \"$1\\u2018\")\n  // closing singles & apostrophes\n  .replace(/'/g, \"\\u2019\")\n  // opening doubles\n  .replace(/(^|[-\\u2014/(\\[{\\u2018\\s])\"/g, \"$1\\u201C\")\n  // closing doubles\n  .replace(/\"/g, \"\\u201D\")\n  // ellipses\n  .replace(/\\.{3}/g, \"\\u2026\");\n}\n\n/**\n * mangle email addresses\n * @param {string} text\n */\nfunction mangle(text) {\n  var out = '',\n    i,\n    ch;\n  var l = text.length;\n  for (i = 0; i < l; i++) {\n    ch = text.charCodeAt(i);\n    if (Math.random() > 0.5) {\n      ch = 'x' + ch.toString(16);\n    }\n    out += '&#' + ch + ';';\n  }\n  return out;\n}\n\n/**\n * Block Lexer\n */\nvar Lexer = /*#__PURE__*/function () {\n  function Lexer(options) {\n    _classCallCheck(this, Lexer);\n    this.tokens = [];\n    this.tokens.links = Object.create(null);\n    this.options = options || defaults;\n    this.options.tokenizer = this.options.tokenizer || new Tokenizer();\n    this.tokenizer = this.options.tokenizer;\n    this.tokenizer.options = this.options;\n    this.tokenizer.lexer = this;\n    this.inlineQueue = [];\n    this.state = {\n      inLink: false,\n      inRawBlock: false,\n      top: true\n    };\n    var rules = {\n      block: block.normal,\n      inline: inline.normal\n    };\n    if (this.options.pedantic) {\n      rules.block = block.pedantic;\n      rules.inline = inline.pedantic;\n    } else if (this.options.gfm) {\n      rules.block = block.gfm;\n      if (this.options.breaks) {\n        rules.inline = inline.breaks;\n      } else {\n        rules.inline = inline.gfm;\n      }\n    }\n    this.tokenizer.rules = rules;\n  }\n\n  /**\n   * Expose Rules\n   */\n  _createClass(Lexer, [{\n    key: \"lex\",\n    value:\n    /**\n     * Preprocessing\n     */\n    function lex(src) {\n      src = src.replace(/\\r\\n|\\r/g, '\\n');\n      this.blockTokens(src, this.tokens);\n      var next;\n      while (next = this.inlineQueue.shift()) {\n        this.inlineTokens(next.src, next.tokens);\n      }\n      return this.tokens;\n    }\n\n    /**\n     * Lexing\n     */\n  }, {\n    key: \"blockTokens\",\n    value: function blockTokens(src) {\n      var _this = this;\n      var tokens = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n      if (this.options.pedantic) {\n        src = src.replace(/\\t/g, '    ').replace(/^ +$/gm, '');\n      } else {\n        src = src.replace(/^( *)(\\t+)/gm, function (_, leading, tabs) {\n          return leading + '    '.repeat(tabs.length);\n        });\n      }\n      var token, lastToken, cutSrc, lastParagraphClipped;\n      var _loop = function _loop() {\n        if (_this.options.extensions && _this.options.extensions.block && _this.options.extensions.block.some(function (extTokenizer) {\n          if (token = extTokenizer.call({\n            lexer: _this\n          }, src, tokens)) {\n            src = src.substring(token.raw.length);\n            tokens.push(token);\n            return true;\n          }\n          return false;\n        })) {\n          return \"continue\";\n        }\n\n        // newline\n        if (token = _this.tokenizer.space(src)) {\n          src = src.substring(token.raw.length);\n          if (token.raw.length === 1 && tokens.length > 0) {\n            // if there's a single \\n as a spacer, it's terminating the last line,\n            // so move it there so that we don't get unecessary paragraph tags\n            tokens[tokens.length - 1].raw += '\\n';\n          } else {\n            tokens.push(token);\n          }\n          return \"continue\";\n        }\n\n        // code\n        if (token = _this.tokenizer.code(src)) {\n          src = src.substring(token.raw.length);\n          lastToken = tokens[tokens.length - 1];\n          // An indented code block cannot interrupt a paragraph.\n          if (lastToken && (lastToken.type === 'paragraph' || lastToken.type === 'text')) {\n            lastToken.raw += '\\n' + token.raw;\n            lastToken.text += '\\n' + token.text;\n            _this.inlineQueue[_this.inlineQueue.length - 1].src = lastToken.text;\n          } else {\n            tokens.push(token);\n          }\n          return \"continue\";\n        }\n\n        // fences\n        if (token = _this.tokenizer.fences(src)) {\n          src = src.substring(token.raw.length);\n          tokens.push(token);\n          return \"continue\";\n        }\n\n        // heading\n        if (token = _this.tokenizer.heading(src)) {\n          src = src.substring(token.raw.length);\n          tokens.push(token);\n          return \"continue\";\n        }\n\n        // hr\n        if (token = _this.tokenizer.hr(src)) {\n          src = src.substring(token.raw.length);\n          tokens.push(token);\n          return \"continue\";\n        }\n\n        // blockquote\n        if (token = _this.tokenizer.blockquote(src)) {\n          src = src.substring(token.raw.length);\n          tokens.push(token);\n          return \"continue\";\n        }\n\n        // list\n        if (token = _this.tokenizer.list(src)) {\n          src = src.substring(token.raw.length);\n          tokens.push(token);\n          return \"continue\";\n        }\n\n        // html\n        if (token = _this.tokenizer.html(src)) {\n          src = src.substring(token.raw.length);\n          tokens.push(token);\n          return \"continue\";\n        }\n\n        // def\n        if (token = _this.tokenizer.def(src)) {\n          src = src.substring(token.raw.length);\n          lastToken = tokens[tokens.length - 1];\n          if (lastToken && (lastToken.type === 'paragraph' || lastToken.type === 'text')) {\n            lastToken.raw += '\\n' + token.raw;\n            lastToken.text += '\\n' + token.raw;\n            _this.inlineQueue[_this.inlineQueue.length - 1].src = lastToken.text;\n          } else if (!_this.tokens.links[token.tag]) {\n            _this.tokens.links[token.tag] = {\n              href: token.href,\n              title: token.title\n            };\n          }\n          return \"continue\";\n        }\n\n        // table (gfm)\n        if (token = _this.tokenizer.table(src)) {\n          src = src.substring(token.raw.length);\n          tokens.push(token);\n          return \"continue\";\n        }\n\n        // lheading\n        if (token = _this.tokenizer.lheading(src)) {\n          src = src.substring(token.raw.length);\n          tokens.push(token);\n          return \"continue\";\n        }\n\n        // top-level paragraph\n        // prevent paragraph consuming extensions by clipping 'src' to extension start\n        cutSrc = src;\n        if (_this.options.extensions && _this.options.extensions.startBlock) {\n          var startIndex = Infinity;\n          var tempSrc = src.slice(1);\n          var tempStart;\n          _this.options.extensions.startBlock.forEach(function (getStartIndex) {\n            tempStart = getStartIndex.call({\n              lexer: this\n            }, tempSrc);\n            if (typeof tempStart === 'number' && tempStart >= 0) {\n              startIndex = Math.min(startIndex, tempStart);\n            }\n          });\n          if (startIndex < Infinity && startIndex >= 0) {\n            cutSrc = src.substring(0, startIndex + 1);\n          }\n        }\n        if (_this.state.top && (token = _this.tokenizer.paragraph(cutSrc))) {\n          lastToken = tokens[tokens.length - 1];\n          if (lastParagraphClipped && lastToken.type === 'paragraph') {\n            lastToken.raw += '\\n' + token.raw;\n            lastToken.text += '\\n' + token.text;\n            _this.inlineQueue.pop();\n            _this.inlineQueue[_this.inlineQueue.length - 1].src = lastToken.text;\n          } else {\n            tokens.push(token);\n          }\n          lastParagraphClipped = cutSrc.length !== src.length;\n          src = src.substring(token.raw.length);\n          return \"continue\";\n        }\n\n        // text\n        if (token = _this.tokenizer.text(src)) {\n          src = src.substring(token.raw.length);\n          lastToken = tokens[tokens.length - 1];\n          if (lastToken && lastToken.type === 'text') {\n            lastToken.raw += '\\n' + token.raw;\n            lastToken.text += '\\n' + token.text;\n            _this.inlineQueue.pop();\n            _this.inlineQueue[_this.inlineQueue.length - 1].src = lastToken.text;\n          } else {\n            tokens.push(token);\n          }\n          return \"continue\";\n        }\n        if (src) {\n          var errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);\n          if (_this.options.silent) {\n            console.error(errMsg);\n            return \"break\";\n          } else {\n            throw new Error(errMsg);\n          }\n        }\n      };\n      while (src) {\n        var _ret = _loop();\n        if (_ret === \"continue\") continue;\n        if (_ret === \"break\") break;\n      }\n      this.state.top = true;\n      return tokens;\n    }\n  }, {\n    key: \"inline\",\n    value: function inline(src) {\n      var tokens = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n      this.inlineQueue.push({\n        src: src,\n        tokens: tokens\n      });\n      return tokens;\n    }\n\n    /**\n     * Lexing/Compiling\n     */\n  }, {\n    key: \"inlineTokens\",\n    value: function inlineTokens(src) {\n      var _this2 = this;\n      var tokens = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n      var token, lastToken, cutSrc;\n\n      // String with links masked to avoid interference with em and strong\n      var maskedSrc = src;\n      var match;\n      var keepPrevChar, prevChar;\n\n      // Mask out reflinks\n      if (this.tokens.links) {\n        var links = Object.keys(this.tokens.links);\n        if (links.length > 0) {\n          while ((match = this.tokenizer.rules.inline.reflinkSearch.exec(maskedSrc)) != null) {\n            if (links.includes(match[0].slice(match[0].lastIndexOf('[') + 1, -1))) {\n              maskedSrc = maskedSrc.slice(0, match.index) + '[' + repeatString('a', match[0].length - 2) + ']' + maskedSrc.slice(this.tokenizer.rules.inline.reflinkSearch.lastIndex);\n            }\n          }\n        }\n      }\n      // Mask out other blocks\n      while ((match = this.tokenizer.rules.inline.blockSkip.exec(maskedSrc)) != null) {\n        maskedSrc = maskedSrc.slice(0, match.index) + '[' + repeatString('a', match[0].length - 2) + ']' + maskedSrc.slice(this.tokenizer.rules.inline.blockSkip.lastIndex);\n      }\n\n      // Mask out escaped em & strong delimiters\n      while ((match = this.tokenizer.rules.inline.escapedEmSt.exec(maskedSrc)) != null) {\n        maskedSrc = maskedSrc.slice(0, match.index + match[0].length - 2) + '++' + maskedSrc.slice(this.tokenizer.rules.inline.escapedEmSt.lastIndex);\n        this.tokenizer.rules.inline.escapedEmSt.lastIndex--;\n      }\n      var _loop2 = function _loop2() {\n        if (!keepPrevChar) {\n          prevChar = '';\n        }\n        keepPrevChar = false;\n\n        // extensions\n        if (_this2.options.extensions && _this2.options.extensions.inline && _this2.options.extensions.inline.some(function (extTokenizer) {\n          if (token = extTokenizer.call({\n            lexer: _this2\n          }, src, tokens)) {\n            src = src.substring(token.raw.length);\n            tokens.push(token);\n            return true;\n          }\n          return false;\n        })) {\n          return \"continue\";\n        }\n\n        // escape\n        if (token = _this2.tokenizer.escape(src)) {\n          src = src.substring(token.raw.length);\n          tokens.push(token);\n          return \"continue\";\n        }\n\n        // tag\n        if (token = _this2.tokenizer.tag(src)) {\n          src = src.substring(token.raw.length);\n          lastToken = tokens[tokens.length - 1];\n          if (lastToken && token.type === 'text' && lastToken.type === 'text') {\n            lastToken.raw += token.raw;\n            lastToken.text += token.text;\n          } else {\n            tokens.push(token);\n          }\n          return \"continue\";\n        }\n\n        // link\n        if (token = _this2.tokenizer.link(src)) {\n          src = src.substring(token.raw.length);\n          tokens.push(token);\n          return \"continue\";\n        }\n\n        // reflink, nolink\n        if (token = _this2.tokenizer.reflink(src, _this2.tokens.links)) {\n          src = src.substring(token.raw.length);\n          lastToken = tokens[tokens.length - 1];\n          if (lastToken && token.type === 'text' && lastToken.type === 'text') {\n            lastToken.raw += token.raw;\n            lastToken.text += token.text;\n          } else {\n            tokens.push(token);\n          }\n          return \"continue\";\n        }\n\n        // em & strong\n        if (token = _this2.tokenizer.emStrong(src, maskedSrc, prevChar)) {\n          src = src.substring(token.raw.length);\n          tokens.push(token);\n          return \"continue\";\n        }\n\n        // code\n        if (token = _this2.tokenizer.codespan(src)) {\n          src = src.substring(token.raw.length);\n          tokens.push(token);\n          return \"continue\";\n        }\n\n        // br\n        if (token = _this2.tokenizer.br(src)) {\n          src = src.substring(token.raw.length);\n          tokens.push(token);\n          return \"continue\";\n        }\n\n        // del (gfm)\n        if (token = _this2.tokenizer.del(src)) {\n          src = src.substring(token.raw.length);\n          tokens.push(token);\n          return \"continue\";\n        }\n\n        // autolink\n        if (token = _this2.tokenizer.autolink(src, mangle)) {\n          src = src.substring(token.raw.length);\n          tokens.push(token);\n          return \"continue\";\n        }\n\n        // url (gfm)\n        if (!_this2.state.inLink && (token = _this2.tokenizer.url(src, mangle))) {\n          src = src.substring(token.raw.length);\n          tokens.push(token);\n          return \"continue\";\n        }\n\n        // text\n        // prevent inlineText consuming extensions by clipping 'src' to extension start\n        cutSrc = src;\n        if (_this2.options.extensions && _this2.options.extensions.startInline) {\n          var startIndex = Infinity;\n          var tempSrc = src.slice(1);\n          var tempStart;\n          _this2.options.extensions.startInline.forEach(function (getStartIndex) {\n            tempStart = getStartIndex.call({\n              lexer: this\n            }, tempSrc);\n            if (typeof tempStart === 'number' && tempStart >= 0) {\n              startIndex = Math.min(startIndex, tempStart);\n            }\n          });\n          if (startIndex < Infinity && startIndex >= 0) {\n            cutSrc = src.substring(0, startIndex + 1);\n          }\n        }\n        if (token = _this2.tokenizer.inlineText(cutSrc, smartypants)) {\n          src = src.substring(token.raw.length);\n          if (token.raw.slice(-1) !== '_') {\n            // Track prevChar before string of ____ started\n            prevChar = token.raw.slice(-1);\n          }\n          keepPrevChar = true;\n          lastToken = tokens[tokens.length - 1];\n          if (lastToken && lastToken.type === 'text') {\n            lastToken.raw += token.raw;\n            lastToken.text += token.text;\n          } else {\n            tokens.push(token);\n          }\n          return \"continue\";\n        }\n        if (src) {\n          var errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);\n          if (_this2.options.silent) {\n            console.error(errMsg);\n            return \"break\";\n          } else {\n            throw new Error(errMsg);\n          }\n        }\n      };\n      while (src) {\n        var _ret2 = _loop2();\n        if (_ret2 === \"continue\") continue;\n        if (_ret2 === \"break\") break;\n      }\n      return tokens;\n    }\n  }], [{\n    key: \"rules\",\n    get: function get() {\n      return {\n        block: block,\n        inline: inline\n      };\n    }\n\n    /**\n     * Static Lex Method\n     */\n  }, {\n    key: \"lex\",\n    value: function lex(src, options) {\n      var lexer = new Lexer(options);\n      return lexer.lex(src);\n    }\n\n    /**\n     * Static Lex Inline Method\n     */\n  }, {\n    key: \"lexInline\",\n    value: function lexInline(src, options) {\n      var lexer = new Lexer(options);\n      return lexer.inlineTokens(src);\n    }\n  }]);\n  return Lexer;\n}();\n/**\n * Renderer\n */\nvar Renderer = /*#__PURE__*/function () {\n  function Renderer(options) {\n    _classCallCheck(this, Renderer);\n    this.options = options || defaults;\n  }\n  _createClass(Renderer, [{\n    key: \"code\",\n    value: function code(_code, infostring, escaped) {\n      var lang = (infostring || '').match(/\\S*/)[0];\n      if (this.options.highlight) {\n        var out = this.options.highlight(_code, lang);\n        if (out != null && out !== _code) {\n          escaped = true;\n          _code = out;\n        }\n      }\n      _code = _code.replace(/\\n$/, '') + '\\n';\n      if (!lang) {\n        return '<pre><code>' + (escaped ? _code : _escape(_code, true)) + '</code></pre>\\n';\n      }\n      return '<pre><code class=\"' + this.options.langPrefix + _escape(lang) + '\">' + (escaped ? _code : _escape(_code, true)) + '</code></pre>\\n';\n    }\n\n    /**\n     * @param {string} quote\n     */\n  }, {\n    key: \"blockquote\",\n    value: function blockquote(quote) {\n      return \"<blockquote>\\n\".concat(quote, \"</blockquote>\\n\");\n    }\n  }, {\n    key: \"html\",\n    value: function html(_html) {\n      return _html;\n    }\n\n    /**\n     * @param {string} text\n     * @param {string} level\n     * @param {string} raw\n     * @param {any} slugger\n     */\n  }, {\n    key: \"heading\",\n    value: function heading(text, level, raw, slugger) {\n      if (this.options.headerIds) {\n        var id = this.options.headerPrefix + slugger.slug(raw);\n        return \"<h\".concat(level, \" id=\\\"\").concat(id, \"\\\">\").concat(text, \"</h\").concat(level, \">\\n\");\n      }\n\n      // ignore IDs\n      return \"<h\".concat(level, \">\").concat(text, \"</h\").concat(level, \">\\n\");\n    }\n  }, {\n    key: \"hr\",\n    value: function hr() {\n      return this.options.xhtml ? '<hr/>\\n' : '<hr>\\n';\n    }\n  }, {\n    key: \"list\",\n    value: function list(body, ordered, start) {\n      var type = ordered ? 'ol' : 'ul',\n        startatt = ordered && start !== 1 ? ' start=\"' + start + '\"' : '';\n      return '<' + type + startatt + '>\\n' + body + '</' + type + '>\\n';\n    }\n\n    /**\n     * @param {string} text\n     */\n  }, {\n    key: \"listitem\",\n    value: function listitem(text) {\n      return \"<li>\".concat(text, \"</li>\\n\");\n    }\n  }, {\n    key: \"checkbox\",\n    value: function checkbox(checked) {\n      return '<input ' + (checked ? 'checked=\"\" ' : '') + 'disabled=\"\" type=\"checkbox\"' + (this.options.xhtml ? ' /' : '') + '> ';\n    }\n\n    /**\n     * @param {string} text\n     */\n  }, {\n    key: \"paragraph\",\n    value: function paragraph(text) {\n      return \"<p>\".concat(text, \"</p>\\n\");\n    }\n\n    /**\n     * @param {string} header\n     * @param {string} body\n     */\n  }, {\n    key: \"table\",\n    value: function table(header, body) {\n      if (body) body = \"<tbody>\".concat(body, \"</tbody>\");\n      return '<table>\\n' + '<thead>\\n' + header + '</thead>\\n' + body + '</table>\\n';\n    }\n\n    /**\n     * @param {string} content\n     */\n  }, {\n    key: \"tablerow\",\n    value: function tablerow(content) {\n      return \"<tr>\\n\".concat(content, \"</tr>\\n\");\n    }\n  }, {\n    key: \"tablecell\",\n    value: function tablecell(content, flags) {\n      var type = flags.header ? 'th' : 'td';\n      var tag = flags.align ? \"<\".concat(type, \" align=\\\"\").concat(flags.align, \"\\\">\") : \"<\".concat(type, \">\");\n      return tag + content + \"</\".concat(type, \">\\n\");\n    }\n\n    /**\n     * span level renderer\n     * @param {string} text\n     */\n  }, {\n    key: \"strong\",\n    value: function strong(text) {\n      return \"<strong>\".concat(text, \"</strong>\");\n    }\n\n    /**\n     * @param {string} text\n     */\n  }, {\n    key: \"em\",\n    value: function em(text) {\n      return \"<em>\".concat(text, \"</em>\");\n    }\n\n    /**\n     * @param {string} text\n     */\n  }, {\n    key: \"codespan\",\n    value: function codespan(text) {\n      return \"<code>\".concat(text, \"</code>\");\n    }\n  }, {\n    key: \"br\",\n    value: function br() {\n      return this.options.xhtml ? '<br/>' : '<br>';\n    }\n\n    /**\n     * @param {string} text\n     */\n  }, {\n    key: \"del\",\n    value: function del(text) {\n      return \"<del>\".concat(text, \"</del>\");\n    }\n\n    /**\n     * @param {string} href\n     * @param {string} title\n     * @param {string} text\n     */\n  }, {\n    key: \"link\",\n    value: function link(href, title, text) {\n      href = cleanUrl(this.options.sanitize, this.options.baseUrl, href);\n      if (href === null) {\n        return text;\n      }\n      var out = '<a href=\"' + href + '\"';\n      if (title) {\n        out += ' title=\"' + title + '\"';\n      }\n      out += '>' + text + '</a>';\n      return out;\n    }\n\n    /**\n     * @param {string} href\n     * @param {string} title\n     * @param {string} text\n     */\n  }, {\n    key: \"image\",\n    value: function image(href, title, text) {\n      href = cleanUrl(this.options.sanitize, this.options.baseUrl, href);\n      if (href === null) {\n        return text;\n      }\n      var out = \"<img src=\\\"\".concat(href, \"\\\" alt=\\\"\").concat(text, \"\\\"\");\n      if (title) {\n        out += \" title=\\\"\".concat(title, \"\\\"\");\n      }\n      out += this.options.xhtml ? '/>' : '>';\n      return out;\n    }\n  }, {\n    key: \"text\",\n    value: function text(_text2) {\n      return _text2;\n    }\n  }]);\n  return Renderer;\n}();\n/**\n * TextRenderer\n * returns only the textual part of the token\n */\nvar TextRenderer = /*#__PURE__*/function () {\n  function TextRenderer() {\n    _classCallCheck(this, TextRenderer);\n  }\n  _createClass(TextRenderer, [{\n    key: \"strong\",\n    value:\n    // no need for block level renderers\n    function strong(text) {\n      return text;\n    }\n  }, {\n    key: \"em\",\n    value: function em(text) {\n      return text;\n    }\n  }, {\n    key: \"codespan\",\n    value: function codespan(text) {\n      return text;\n    }\n  }, {\n    key: \"del\",\n    value: function del(text) {\n      return text;\n    }\n  }, {\n    key: \"html\",\n    value: function html(text) {\n      return text;\n    }\n  }, {\n    key: \"text\",\n    value: function text(_text3) {\n      return _text3;\n    }\n  }, {\n    key: \"link\",\n    value: function link(href, title, text) {\n      return '' + text;\n    }\n  }, {\n    key: \"image\",\n    value: function image(href, title, text) {\n      return '' + text;\n    }\n  }, {\n    key: \"br\",\n    value: function br() {\n      return '';\n    }\n  }]);\n  return TextRenderer;\n}();\n/**\n * Slugger generates header id\n */\nvar Slugger = /*#__PURE__*/function () {\n  function Slugger() {\n    _classCallCheck(this, Slugger);\n    this.seen = {};\n  }\n\n  /**\n   * @param {string} value\n   */\n  _createClass(Slugger, [{\n    key: \"serialize\",\n    value: function serialize(value) {\n      return value.toLowerCase().trim()\n      // remove html tags\n      .replace(/<[!\\/a-z].*?>/ig, '')\n      // remove unwanted chars\n      .replace(/[\\u2000-\\u206F\\u2E00-\\u2E7F\\\\'!\"#$%&()*+,./:;<=>?@[\\]^`{|}~]/g, '').replace(/\\s/g, '-');\n    }\n\n    /**\n     * Finds the next safe (unique) slug to use\n     * @param {string} originalSlug\n     * @param {boolean} isDryRun\n     */\n  }, {\n    key: \"getNextSafeSlug\",\n    value: function getNextSafeSlug(originalSlug, isDryRun) {\n      var slug = originalSlug;\n      var occurenceAccumulator = 0;\n      if (this.seen.hasOwnProperty(slug)) {\n        occurenceAccumulator = this.seen[originalSlug];\n        do {\n          occurenceAccumulator++;\n          slug = originalSlug + '-' + occurenceAccumulator;\n        } while (this.seen.hasOwnProperty(slug));\n      }\n      if (!isDryRun) {\n        this.seen[originalSlug] = occurenceAccumulator;\n        this.seen[slug] = 0;\n      }\n      return slug;\n    }\n\n    /**\n     * Convert string to unique id\n     * @param {object} [options]\n     * @param {boolean} [options.dryrun] Generates the next unique slug without\n     * updating the internal accumulator.\n     */\n  }, {\n    key: \"slug\",\n    value: function slug(value) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var slug = this.serialize(value);\n      return this.getNextSafeSlug(slug, options.dryrun);\n    }\n  }]);\n  return Slugger;\n}();\n/**\n * Parsing & Compiling\n */\nvar Parser = /*#__PURE__*/function () {\n  function Parser(options) {\n    _classCallCheck(this, Parser);\n    this.options = options || defaults;\n    this.options.renderer = this.options.renderer || new Renderer();\n    this.renderer = this.options.renderer;\n    this.renderer.options = this.options;\n    this.textRenderer = new TextRenderer();\n    this.slugger = new Slugger();\n  }\n\n  /**\n   * Static Parse Method\n   */\n  _createClass(Parser, [{\n    key: \"parse\",\n    value:\n    /**\n     * Parse Loop\n     */\n    function parse(tokens) {\n      var top = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      var out = '',\n        i,\n        j,\n        k,\n        l2,\n        l3,\n        row,\n        cell,\n        header,\n        body,\n        token,\n        ordered,\n        start,\n        loose,\n        itemBody,\n        item,\n        checked,\n        task,\n        checkbox,\n        ret;\n      var l = tokens.length;\n      for (i = 0; i < l; i++) {\n        token = tokens[i];\n\n        // Run any renderer extensions\n        if (this.options.extensions && this.options.extensions.renderers && this.options.extensions.renderers[token.type]) {\n          ret = this.options.extensions.renderers[token.type].call({\n            parser: this\n          }, token);\n          if (ret !== false || !['space', 'hr', 'heading', 'code', 'table', 'blockquote', 'list', 'html', 'paragraph', 'text'].includes(token.type)) {\n            out += ret || '';\n            continue;\n          }\n        }\n        switch (token.type) {\n          case 'space':\n            {\n              continue;\n            }\n          case 'hr':\n            {\n              out += this.renderer.hr();\n              continue;\n            }\n          case 'heading':\n            {\n              out += this.renderer.heading(this.parseInline(token.tokens), token.depth, unescape(this.parseInline(token.tokens, this.textRenderer)), this.slugger);\n              continue;\n            }\n          case 'code':\n            {\n              out += this.renderer.code(token.text, token.lang, token.escaped);\n              continue;\n            }\n          case 'table':\n            {\n              header = '';\n\n              // header\n              cell = '';\n              l2 = token.header.length;\n              for (j = 0; j < l2; j++) {\n                cell += this.renderer.tablecell(this.parseInline(token.header[j].tokens), {\n                  header: true,\n                  align: token.align[j]\n                });\n              }\n              header += this.renderer.tablerow(cell);\n              body = '';\n              l2 = token.rows.length;\n              for (j = 0; j < l2; j++) {\n                row = token.rows[j];\n                cell = '';\n                l3 = row.length;\n                for (k = 0; k < l3; k++) {\n                  cell += this.renderer.tablecell(this.parseInline(row[k].tokens), {\n                    header: false,\n                    align: token.align[k]\n                  });\n                }\n                body += this.renderer.tablerow(cell);\n              }\n              out += this.renderer.table(header, body);\n              continue;\n            }\n          case 'blockquote':\n            {\n              body = this.parse(token.tokens);\n              out += this.renderer.blockquote(body);\n              continue;\n            }\n          case 'list':\n            {\n              ordered = token.ordered;\n              start = token.start;\n              loose = token.loose;\n              l2 = token.items.length;\n              body = '';\n              for (j = 0; j < l2; j++) {\n                item = token.items[j];\n                checked = item.checked;\n                task = item.task;\n                itemBody = '';\n                if (item.task) {\n                  checkbox = this.renderer.checkbox(checked);\n                  if (loose) {\n                    if (item.tokens.length > 0 && item.tokens[0].type === 'paragraph') {\n                      item.tokens[0].text = checkbox + ' ' + item.tokens[0].text;\n                      if (item.tokens[0].tokens && item.tokens[0].tokens.length > 0 && item.tokens[0].tokens[0].type === 'text') {\n                        item.tokens[0].tokens[0].text = checkbox + ' ' + item.tokens[0].tokens[0].text;\n                      }\n                    } else {\n                      item.tokens.unshift({\n                        type: 'text',\n                        text: checkbox\n                      });\n                    }\n                  } else {\n                    itemBody += checkbox;\n                  }\n                }\n                itemBody += this.parse(item.tokens, loose);\n                body += this.renderer.listitem(itemBody, task, checked);\n              }\n              out += this.renderer.list(body, ordered, start);\n              continue;\n            }\n          case 'html':\n            {\n              // TODO parse inline content if parameter markdown=1\n              out += this.renderer.html(token.text);\n              continue;\n            }\n          case 'paragraph':\n            {\n              out += this.renderer.paragraph(this.parseInline(token.tokens));\n              continue;\n            }\n          case 'text':\n            {\n              body = token.tokens ? this.parseInline(token.tokens) : token.text;\n              while (i + 1 < l && tokens[i + 1].type === 'text') {\n                token = tokens[++i];\n                body += '\\n' + (token.tokens ? this.parseInline(token.tokens) : token.text);\n              }\n              out += top ? this.renderer.paragraph(body) : body;\n              continue;\n            }\n          default:\n            {\n              var errMsg = 'Token with \"' + token.type + '\" type was not found.';\n              if (this.options.silent) {\n                console.error(errMsg);\n                return;\n              } else {\n                throw new Error(errMsg);\n              }\n            }\n        }\n      }\n      return out;\n    }\n\n    /**\n     * Parse Inline Tokens\n     */\n  }, {\n    key: \"parseInline\",\n    value: function parseInline(tokens, renderer) {\n      renderer = renderer || this.renderer;\n      var out = '',\n        i,\n        token,\n        ret;\n      var l = tokens.length;\n      for (i = 0; i < l; i++) {\n        token = tokens[i];\n\n        // Run any renderer extensions\n        if (this.options.extensions && this.options.extensions.renderers && this.options.extensions.renderers[token.type]) {\n          ret = this.options.extensions.renderers[token.type].call({\n            parser: this\n          }, token);\n          if (ret !== false || !['escape', 'html', 'link', 'image', 'strong', 'em', 'codespan', 'br', 'del', 'text'].includes(token.type)) {\n            out += ret || '';\n            continue;\n          }\n        }\n        switch (token.type) {\n          case 'escape':\n            {\n              out += renderer.text(token.text);\n              break;\n            }\n          case 'html':\n            {\n              out += renderer.html(token.text);\n              break;\n            }\n          case 'link':\n            {\n              out += renderer.link(token.href, token.title, this.parseInline(token.tokens, renderer));\n              break;\n            }\n          case 'image':\n            {\n              out += renderer.image(token.href, token.title, token.text);\n              break;\n            }\n          case 'strong':\n            {\n              out += renderer.strong(this.parseInline(token.tokens, renderer));\n              break;\n            }\n          case 'em':\n            {\n              out += renderer.em(this.parseInline(token.tokens, renderer));\n              break;\n            }\n          case 'codespan':\n            {\n              out += renderer.codespan(token.text);\n              break;\n            }\n          case 'br':\n            {\n              out += renderer.br();\n              break;\n            }\n          case 'del':\n            {\n              out += renderer.del(this.parseInline(token.tokens, renderer));\n              break;\n            }\n          case 'text':\n            {\n              out += renderer.text(token.text);\n              break;\n            }\n          default:\n            {\n              var errMsg = 'Token with \"' + token.type + '\" type was not found.';\n              if (this.options.silent) {\n                console.error(errMsg);\n                return;\n              } else {\n                throw new Error(errMsg);\n              }\n            }\n        }\n      }\n      return out;\n    }\n  }], [{\n    key: \"parse\",\n    value: function parse(tokens, options) {\n      var parser = new Parser(options);\n      return parser.parse(tokens);\n    }\n\n    /**\n     * Static Parse Inline Method\n     */\n  }, {\n    key: \"parseInline\",\n    value: function parseInline(tokens, options) {\n      var parser = new Parser(options);\n      return parser.parseInline(tokens);\n    }\n  }]);\n  return Parser;\n}();\n/**\n * Marked\n */\nfunction marked(src, opt, callback) {\n  // throw error in case of non string input\n  if (typeof src === 'undefined' || src === null) {\n    throw new Error('marked(): input parameter is undefined or null');\n  }\n  if (typeof src !== 'string') {\n    throw new Error('marked(): input parameter is of type ' + Object.prototype.toString.call(src) + ', string expected');\n  }\n  if (typeof opt === 'function') {\n    callback = opt;\n    opt = null;\n  }\n  opt = merge({}, marked.defaults, opt || {});\n  checkSanitizeDeprecation(opt);\n  if (callback) {\n    var highlight = opt.highlight;\n    var tokens;\n    try {\n      tokens = Lexer.lex(src, opt);\n    } catch (e) {\n      return callback(e);\n    }\n    var done = function done(err) {\n      var out;\n      if (!err) {\n        try {\n          if (opt.walkTokens) {\n            marked.walkTokens(tokens, opt.walkTokens);\n          }\n          out = Parser.parse(tokens, opt);\n        } catch (e) {\n          err = e;\n        }\n      }\n      opt.highlight = highlight;\n      return err ? callback(err) : callback(null, out);\n    };\n    if (!highlight || highlight.length < 3) {\n      return done();\n    }\n    delete opt.highlight;\n    if (!tokens.length) return done();\n    var pending = 0;\n    marked.walkTokens(tokens, function (token) {\n      if (token.type === 'code') {\n        pending++;\n        setTimeout(function () {\n          highlight(token.text, token.lang, function (err, code) {\n            if (err) {\n              return done(err);\n            }\n            if (code != null && code !== token.text) {\n              token.text = code;\n              token.escaped = true;\n            }\n            pending--;\n            if (pending === 0) {\n              done();\n            }\n          });\n        }, 0);\n      }\n    });\n    if (pending === 0) {\n      done();\n    }\n    return;\n  }\n  function onError(e) {\n    e.message += '\\nPlease report this to https://github.com/markedjs/marked.';\n    if (opt.silent) {\n      return '<p>An error occurred:</p><pre>' + _escape(e.message + '', true) + '</pre>';\n    }\n    throw e;\n  }\n  try {\n    var _tokens = Lexer.lex(src, opt);\n    if (opt.walkTokens) {\n      if (opt.async) {\n        return Promise.all(marked.walkTokens(_tokens, opt.walkTokens)).then(function () {\n          return Parser.parse(_tokens, opt);\n        }).catch(onError);\n      }\n      marked.walkTokens(_tokens, opt.walkTokens);\n    }\n    return Parser.parse(_tokens, opt);\n  } catch (e) {\n    onError(e);\n  }\n}\n\n/**\n * Options\n */\n\nmarked.options = marked.setOptions = function (opt) {\n  merge(marked.defaults, opt);\n  changeDefaults(marked.defaults);\n  return marked;\n};\nmarked.getDefaults = getDefaults;\nmarked.defaults = defaults;\n\n/**\n * Use Extension\n */\n\nmarked.use = function () {\n  var extensions = marked.defaults.extensions || {\n    renderers: {},\n    childTokens: {}\n  };\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n  args.forEach(function (pack) {\n    // copy options to new object\n    var opts = merge({}, pack);\n\n    // set async to true if it was set to true before\n    opts.async = marked.defaults.async || opts.async;\n\n    // ==-- Parse \"addon\" extensions --== //\n    if (pack.extensions) {\n      pack.extensions.forEach(function (ext) {\n        if (!ext.name) {\n          throw new Error('extension name required');\n        }\n        if (ext.renderer) {\n          // Renderer extensions\n          var prevRenderer = extensions.renderers[ext.name];\n          if (prevRenderer) {\n            // Replace extension with func to run new extension but fall back if false\n            extensions.renderers[ext.name] = function () {\n              for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n                args[_key2] = arguments[_key2];\n              }\n              var ret = ext.renderer.apply(this, args);\n              if (ret === false) {\n                ret = prevRenderer.apply(this, args);\n              }\n              return ret;\n            };\n          } else {\n            extensions.renderers[ext.name] = ext.renderer;\n          }\n        }\n        if (ext.tokenizer) {\n          // Tokenizer Extensions\n          if (!ext.level || ext.level !== 'block' && ext.level !== 'inline') {\n            throw new Error(\"extension level must be 'block' or 'inline'\");\n          }\n          if (extensions[ext.level]) {\n            extensions[ext.level].unshift(ext.tokenizer);\n          } else {\n            extensions[ext.level] = [ext.tokenizer];\n          }\n          if (ext.start) {\n            // Function to check for start of token\n            if (ext.level === 'block') {\n              if (extensions.startBlock) {\n                extensions.startBlock.push(ext.start);\n              } else {\n                extensions.startBlock = [ext.start];\n              }\n            } else if (ext.level === 'inline') {\n              if (extensions.startInline) {\n                extensions.startInline.push(ext.start);\n              } else {\n                extensions.startInline = [ext.start];\n              }\n            }\n          }\n        }\n        if (ext.childTokens) {\n          // Child tokens to be visited by walkTokens\n          extensions.childTokens[ext.name] = ext.childTokens;\n        }\n      });\n      opts.extensions = extensions;\n    }\n\n    // ==-- Parse \"overwrite\" extensions --== //\n    if (pack.renderer) {\n      var renderer = marked.defaults.renderer || new Renderer();\n      var _loop3 = function _loop3(prop) {\n        var prevRenderer = renderer[prop];\n        // Replace renderer with func to run extension, but fall back if false\n        renderer[prop] = function () {\n          for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n            args[_key3] = arguments[_key3];\n          }\n          var ret = pack.renderer[prop].apply(renderer, args);\n          if (ret === false) {\n            ret = prevRenderer.apply(renderer, args);\n          }\n          return ret;\n        };\n      };\n      for (var prop in pack.renderer) {\n        _loop3(prop);\n      }\n      opts.renderer = renderer;\n    }\n    if (pack.tokenizer) {\n      var tokenizer = marked.defaults.tokenizer || new Tokenizer();\n      var _loop4 = function _loop4(prop) {\n        var prevTokenizer = tokenizer[prop];\n        // Replace tokenizer with func to run extension, but fall back if false\n        tokenizer[prop] = function () {\n          for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n            args[_key4] = arguments[_key4];\n          }\n          var ret = pack.tokenizer[prop].apply(tokenizer, args);\n          if (ret === false) {\n            ret = prevTokenizer.apply(tokenizer, args);\n          }\n          return ret;\n        };\n      };\n      for (var _prop in pack.tokenizer) {\n        _loop4(_prop);\n      }\n      opts.tokenizer = tokenizer;\n    }\n\n    // ==-- Parse WalkTokens extensions --== //\n    if (pack.walkTokens) {\n      var _walkTokens = marked.defaults.walkTokens;\n      opts.walkTokens = function (token) {\n        var values = [];\n        values.push(pack.walkTokens.call(this, token));\n        if (_walkTokens) {\n          values = values.concat(_walkTokens.call(this, token));\n        }\n        return values;\n      };\n    }\n    marked.setOptions(opts);\n  });\n};\n\n/**\n * Run callback for every token\n */\n\nmarked.walkTokens = function (tokens, callback) {\n  var values = [];\n  var _iterator = _createForOfIteratorHelper(tokens),\n    _step;\n  try {\n    var _loop5 = function _loop5() {\n      var token = _step.value;\n      values = values.concat(callback.call(marked, token));\n      switch (token.type) {\n        case 'table':\n          {\n            var _iterator2 = _createForOfIteratorHelper(token.header),\n              _step2;\n            try {\n              for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n                var cell = _step2.value;\n                values = values.concat(marked.walkTokens(cell.tokens, callback));\n              }\n            } catch (err) {\n              _iterator2.e(err);\n            } finally {\n              _iterator2.f();\n            }\n            var _iterator3 = _createForOfIteratorHelper(token.rows),\n              _step3;\n            try {\n              for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n                var row = _step3.value;\n                var _iterator4 = _createForOfIteratorHelper(row),\n                  _step4;\n                try {\n                  for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n                    var _cell = _step4.value;\n                    values = values.concat(marked.walkTokens(_cell.tokens, callback));\n                  }\n                } catch (err) {\n                  _iterator4.e(err);\n                } finally {\n                  _iterator4.f();\n                }\n              }\n            } catch (err) {\n              _iterator3.e(err);\n            } finally {\n              _iterator3.f();\n            }\n            break;\n          }\n        case 'list':\n          {\n            values = values.concat(marked.walkTokens(token.items, callback));\n            break;\n          }\n        default:\n          {\n            if (marked.defaults.extensions && marked.defaults.extensions.childTokens && marked.defaults.extensions.childTokens[token.type]) {\n              // Walk any extensions\n              marked.defaults.extensions.childTokens[token.type].forEach(function (childTokens) {\n                values = values.concat(marked.walkTokens(token[childTokens], callback));\n              });\n            } else if (token.tokens) {\n              values = values.concat(marked.walkTokens(token.tokens, callback));\n            }\n          }\n      }\n    };\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      _loop5();\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  return values;\n};\n\n/**\n * Parse Inline\n * @param {string} src\n */\nmarked.parseInline = function (src, opt) {\n  // throw error in case of non string input\n  if (typeof src === 'undefined' || src === null) {\n    throw new Error('marked.parseInline(): input parameter is undefined or null');\n  }\n  if (typeof src !== 'string') {\n    throw new Error('marked.parseInline(): input parameter is of type ' + Object.prototype.toString.call(src) + ', string expected');\n  }\n  opt = merge({}, marked.defaults, opt || {});\n  checkSanitizeDeprecation(opt);\n  try {\n    var tokens = Lexer.lexInline(src, opt);\n    if (opt.walkTokens) {\n      marked.walkTokens(tokens, opt.walkTokens);\n    }\n    return Parser.parseInline(tokens, opt);\n  } catch (e) {\n    e.message += '\\nPlease report this to https://github.com/markedjs/marked.';\n    if (opt.silent) {\n      return '<p>An error occurred:</p><pre>' + _escape(e.message + '', true) + '</pre>';\n    }\n    throw e;\n  }\n};\n\n/**\n * Expose\n */\nmarked.Parser = Parser;\nmarked.parser = Parser.parse;\nmarked.Renderer = Renderer;\nmarked.TextRenderer = TextRenderer;\nmarked.Lexer = Lexer;\nmarked.lexer = Lexer.lex;\nmarked.Tokenizer = Tokenizer;\nmarked.Slugger = Slugger;\nmarked.parse = marked;\nvar options = marked.options;\nvar setOptions = marked.setOptions;\nvar use = marked.use;\nvar walkTokens = marked.walkTokens;\nvar parseInline = marked.parseInline;\nvar parse = marked;\nvar parser = Parser.parse;\nvar lexer = Lexer.lex;\nexport { Lexer, Parser, Renderer, Slugger, TextRenderer, Tokenizer, defaults, getDefaults, lexer, marked, options, parse, parseInline, parser, setOptions, use, walkTokens };","map":{"version":3,"names":["getDefaults","async","baseUrl","breaks","extensions","gfm","headerIds","headerPrefix","highlight","langPrefix","mangle","pedantic","renderer","sanitize","sanitizer","silent","smartypants","tokenizer","walkTokens","xhtml","defaults","changeDefaults","newDefaults","escapeTest","escapeReplace","RegExp","source","escapeTestNoEncode","escapeReplaceNoEncode","escapeReplacements","getEscapeReplacement","ch","escape","html","encode","test","replace","unescapeTest","unescape","_","n","toLowerCase","charAt","String","fromCharCode","parseInt","substring","caret","edit","regex","opt","obj","name","val","getRegex","nonWordAndColonTest","originIndependentUrl","cleanUrl","base","href","prot","decodeURIComponent","e","indexOf","resolveUrl","encodeURI","baseUrls","justDomain","protocol","domain","rtrim","relativeBase","noopTest","exec","merge","i","target","key","arguments","length","Object","prototype","hasOwnProperty","call","splitCells","tableRow","count","row","match","offset","str","escaped","curr","cells","split","trim","shift","pop","splice","push","c","invert","l","suffLen","currChar","slice","findClosingBracket","b","level","checkSanitizeDeprecation","console","warn","repeatString","pattern","result","outputLink","cap","link","raw","lexer","title","text","state","inLink","token","type","tokens","inlineTokens","indentCodeCompensation","matchIndentToCode","indentToCode","map","node","matchIndentInNode","indentInNode","join","Tokenizer","options","src","rules","block","newline","code","codeBlockStyle","fences","lang","inline","_escapes","heading","trimmed","depth","hr","blockquote","top","blockTokens","list","istask","ischecked","indent","blankLine","endsWithBlankLine","line","nextLine","rawLine","itemContents","endEarly","bull","isordered","ordered","start","loose","items","itemRegex","t","repeat","trimLeft","search","nextBulletRegex","Math","min","hrRegex","fencesBeginRegex","headingBeginRegex","task","checked","trimRight","spacers","filter","hasMultipleLineBreaks","some","pre","def","tag","table","item","header","align","rows","j","k","lheading","paragraph","inRawBlock","trimmedUrl","rtrimSlash","lastParenIndex","linkLen","links","reflink","nolink","maskedSrc","prevChar","emStrong","lDelim","nextChar","punctuation","lLength","rDelim","rLength","delimTotal","midDelimTotal","endReg","rDelimAst","rDelimUnd","lastIndex","index","hasNonSpaceChars","hasSpaceCharsOnBothEnds","br","del","autolink","url","prevCapZero","_backpedal","_paragraph","_label","_title","bullet","listItemStart","_tag","_comment","normal","reflinkSearch","_punctuation","blockSkip","escapedEmSt","_scheme","_email","_attribute","_href","strong","middle","endAst","endUnd","em","_extended_email","out","charCodeAt","random","toString","Lexer","create","inlineQueue","next","leading","tabs","lastToken","cutSrc","lastParagraphClipped","extTokenizer","space","startBlock","startIndex","Infinity","tempSrc","tempStart","forEach","getStartIndex","errMsg","error","Error","keepPrevChar","keys","includes","lastIndexOf","codespan","startInline","inlineText","lex","Renderer","infostring","quote","slugger","id","slug","body","startatt","content","flags","TextRenderer","Slugger","seen","value","originalSlug","isDryRun","occurenceAccumulator","serialize","getNextSafeSlug","dryrun","Parser","textRenderer","l2","l3","cell","itemBody","checkbox","ret","renderers","parser","parseInline","tablecell","tablerow","parse","unshift","listitem","image","marked","callback","done","err","pending","setTimeout","onError","message","Promise","all","then","catch","setOptions","use","childTokens","args","pack","opts","ext","prevRenderer","apply","prop","prevTokenizer","values","concat","lexInline"],"sources":["C:/Users/Danny/Documents/GitHub/projects/MarkDownPreviewer/mark-dowan-previewer/node_modules/marked/lib/marked.esm.js"],"sourcesContent":["/**\n * marked v4.2.12 - a markdown parser\n * Copyright (c) 2011-2023, Christopher Jeffrey. (MIT Licensed)\n * https://github.com/markedjs/marked\n */\n\n/**\n * DO NOT EDIT THIS FILE\n * The code in this file is generated from files in ./src/\n */\n\nfunction getDefaults() {\n  return {\n    async: false,\n    baseUrl: null,\n    breaks: false,\n    extensions: null,\n    gfm: true,\n    headerIds: true,\n    headerPrefix: '',\n    highlight: null,\n    langPrefix: 'language-',\n    mangle: true,\n    pedantic: false,\n    renderer: null,\n    sanitize: false,\n    sanitizer: null,\n    silent: false,\n    smartypants: false,\n    tokenizer: null,\n    walkTokens: null,\n    xhtml: false\n  };\n}\n\nlet defaults = getDefaults();\n\nfunction changeDefaults(newDefaults) {\n  defaults = newDefaults;\n}\n\n/**\n * Helpers\n */\nconst escapeTest = /[&<>\"']/;\nconst escapeReplace = new RegExp(escapeTest.source, 'g');\nconst escapeTestNoEncode = /[<>\"']|&(?!(#\\d{1,7}|#[Xx][a-fA-F0-9]{1,6}|\\w+);)/;\nconst escapeReplaceNoEncode = new RegExp(escapeTestNoEncode.source, 'g');\nconst escapeReplacements = {\n  '&': '&amp;',\n  '<': '&lt;',\n  '>': '&gt;',\n  '\"': '&quot;',\n  \"'\": '&#39;'\n};\nconst getEscapeReplacement = (ch) => escapeReplacements[ch];\nfunction escape(html, encode) {\n  if (encode) {\n    if (escapeTest.test(html)) {\n      return html.replace(escapeReplace, getEscapeReplacement);\n    }\n  } else {\n    if (escapeTestNoEncode.test(html)) {\n      return html.replace(escapeReplaceNoEncode, getEscapeReplacement);\n    }\n  }\n\n  return html;\n}\n\nconst unescapeTest = /&(#(?:\\d+)|(?:#x[0-9A-Fa-f]+)|(?:\\w+));?/ig;\n\n/**\n * @param {string} html\n */\nfunction unescape(html) {\n  // explicitly match decimal, hex, and named HTML entities\n  return html.replace(unescapeTest, (_, n) => {\n    n = n.toLowerCase();\n    if (n === 'colon') return ':';\n    if (n.charAt(0) === '#') {\n      return n.charAt(1) === 'x'\n        ? String.fromCharCode(parseInt(n.substring(2), 16))\n        : String.fromCharCode(+n.substring(1));\n    }\n    return '';\n  });\n}\n\nconst caret = /(^|[^\\[])\\^/g;\n\n/**\n * @param {string | RegExp} regex\n * @param {string} opt\n */\nfunction edit(regex, opt) {\n  regex = typeof regex === 'string' ? regex : regex.source;\n  opt = opt || '';\n  const obj = {\n    replace: (name, val) => {\n      val = val.source || val;\n      val = val.replace(caret, '$1');\n      regex = regex.replace(name, val);\n      return obj;\n    },\n    getRegex: () => {\n      return new RegExp(regex, opt);\n    }\n  };\n  return obj;\n}\n\nconst nonWordAndColonTest = /[^\\w:]/g;\nconst originIndependentUrl = /^$|^[a-z][a-z0-9+.-]*:|^[?#]/i;\n\n/**\n * @param {boolean} sanitize\n * @param {string} base\n * @param {string} href\n */\nfunction cleanUrl(sanitize, base, href) {\n  if (sanitize) {\n    let prot;\n    try {\n      prot = decodeURIComponent(unescape(href))\n        .replace(nonWordAndColonTest, '')\n        .toLowerCase();\n    } catch (e) {\n      return null;\n    }\n    if (prot.indexOf('javascript:') === 0 || prot.indexOf('vbscript:') === 0 || prot.indexOf('data:') === 0) {\n      return null;\n    }\n  }\n  if (base && !originIndependentUrl.test(href)) {\n    href = resolveUrl(base, href);\n  }\n  try {\n    href = encodeURI(href).replace(/%25/g, '%');\n  } catch (e) {\n    return null;\n  }\n  return href;\n}\n\nconst baseUrls = {};\nconst justDomain = /^[^:]+:\\/*[^/]*$/;\nconst protocol = /^([^:]+:)[\\s\\S]*$/;\nconst domain = /^([^:]+:\\/*[^/]*)[\\s\\S]*$/;\n\n/**\n * @param {string} base\n * @param {string} href\n */\nfunction resolveUrl(base, href) {\n  if (!baseUrls[' ' + base]) {\n    // we can ignore everything in base after the last slash of its path component,\n    // but we might need to add _that_\n    // https://tools.ietf.org/html/rfc3986#section-3\n    if (justDomain.test(base)) {\n      baseUrls[' ' + base] = base + '/';\n    } else {\n      baseUrls[' ' + base] = rtrim(base, '/', true);\n    }\n  }\n  base = baseUrls[' ' + base];\n  const relativeBase = base.indexOf(':') === -1;\n\n  if (href.substring(0, 2) === '//') {\n    if (relativeBase) {\n      return href;\n    }\n    return base.replace(protocol, '$1') + href;\n  } else if (href.charAt(0) === '/') {\n    if (relativeBase) {\n      return href;\n    }\n    return base.replace(domain, '$1') + href;\n  } else {\n    return base + href;\n  }\n}\n\nconst noopTest = { exec: function noopTest() {} };\n\nfunction merge(obj) {\n  let i = 1,\n    target,\n    key;\n\n  for (; i < arguments.length; i++) {\n    target = arguments[i];\n    for (key in target) {\n      if (Object.prototype.hasOwnProperty.call(target, key)) {\n        obj[key] = target[key];\n      }\n    }\n  }\n\n  return obj;\n}\n\nfunction splitCells(tableRow, count) {\n  // ensure that every cell-delimiting pipe has a space\n  // before it to distinguish it from an escaped pipe\n  const row = tableRow.replace(/\\|/g, (match, offset, str) => {\n      let escaped = false,\n        curr = offset;\n      while (--curr >= 0 && str[curr] === '\\\\') escaped = !escaped;\n      if (escaped) {\n        // odd number of slashes means | is escaped\n        // so we leave it alone\n        return '|';\n      } else {\n        // add space before unescaped |\n        return ' |';\n      }\n    }),\n    cells = row.split(/ \\|/);\n  let i = 0;\n\n  // First/last cell in a row cannot be empty if it has no leading/trailing pipe\n  if (!cells[0].trim()) { cells.shift(); }\n  if (cells.length > 0 && !cells[cells.length - 1].trim()) { cells.pop(); }\n\n  if (cells.length > count) {\n    cells.splice(count);\n  } else {\n    while (cells.length < count) cells.push('');\n  }\n\n  for (; i < cells.length; i++) {\n    // leading or trailing whitespace is ignored per the gfm spec\n    cells[i] = cells[i].trim().replace(/\\\\\\|/g, '|');\n  }\n  return cells;\n}\n\n/**\n * Remove trailing 'c's. Equivalent to str.replace(/c*$/, '').\n * /c*$/ is vulnerable to REDOS.\n *\n * @param {string} str\n * @param {string} c\n * @param {boolean} invert Remove suffix of non-c chars instead. Default falsey.\n */\nfunction rtrim(str, c, invert) {\n  const l = str.length;\n  if (l === 0) {\n    return '';\n  }\n\n  // Length of suffix matching the invert condition.\n  let suffLen = 0;\n\n  // Step left until we fail to match the invert condition.\n  while (suffLen < l) {\n    const currChar = str.charAt(l - suffLen - 1);\n    if (currChar === c && !invert) {\n      suffLen++;\n    } else if (currChar !== c && invert) {\n      suffLen++;\n    } else {\n      break;\n    }\n  }\n\n  return str.slice(0, l - suffLen);\n}\n\nfunction findClosingBracket(str, b) {\n  if (str.indexOf(b[1]) === -1) {\n    return -1;\n  }\n  const l = str.length;\n  let level = 0,\n    i = 0;\n  for (; i < l; i++) {\n    if (str[i] === '\\\\') {\n      i++;\n    } else if (str[i] === b[0]) {\n      level++;\n    } else if (str[i] === b[1]) {\n      level--;\n      if (level < 0) {\n        return i;\n      }\n    }\n  }\n  return -1;\n}\n\nfunction checkSanitizeDeprecation(opt) {\n  if (opt && opt.sanitize && !opt.silent) {\n    console.warn('marked(): sanitize and sanitizer parameters are deprecated since version 0.7.0, should not be used and will be removed in the future. Read more here: https://marked.js.org/#/USING_ADVANCED.md#options');\n  }\n}\n\n// copied from https://stackoverflow.com/a/5450113/806777\n/**\n * @param {string} pattern\n * @param {number} count\n */\nfunction repeatString(pattern, count) {\n  if (count < 1) {\n    return '';\n  }\n  let result = '';\n  while (count > 1) {\n    if (count & 1) {\n      result += pattern;\n    }\n    count >>= 1;\n    pattern += pattern;\n  }\n  return result + pattern;\n}\n\nfunction outputLink(cap, link, raw, lexer) {\n  const href = link.href;\n  const title = link.title ? escape(link.title) : null;\n  const text = cap[1].replace(/\\\\([\\[\\]])/g, '$1');\n\n  if (cap[0].charAt(0) !== '!') {\n    lexer.state.inLink = true;\n    const token = {\n      type: 'link',\n      raw,\n      href,\n      title,\n      text,\n      tokens: lexer.inlineTokens(text)\n    };\n    lexer.state.inLink = false;\n    return token;\n  }\n  return {\n    type: 'image',\n    raw,\n    href,\n    title,\n    text: escape(text)\n  };\n}\n\nfunction indentCodeCompensation(raw, text) {\n  const matchIndentToCode = raw.match(/^(\\s+)(?:```)/);\n\n  if (matchIndentToCode === null) {\n    return text;\n  }\n\n  const indentToCode = matchIndentToCode[1];\n\n  return text\n    .split('\\n')\n    .map(node => {\n      const matchIndentInNode = node.match(/^\\s+/);\n      if (matchIndentInNode === null) {\n        return node;\n      }\n\n      const [indentInNode] = matchIndentInNode;\n\n      if (indentInNode.length >= indentToCode.length) {\n        return node.slice(indentToCode.length);\n      }\n\n      return node;\n    })\n    .join('\\n');\n}\n\n/**\n * Tokenizer\n */\nclass Tokenizer {\n  constructor(options) {\n    this.options = options || defaults;\n  }\n\n  space(src) {\n    const cap = this.rules.block.newline.exec(src);\n    if (cap && cap[0].length > 0) {\n      return {\n        type: 'space',\n        raw: cap[0]\n      };\n    }\n  }\n\n  code(src) {\n    const cap = this.rules.block.code.exec(src);\n    if (cap) {\n      const text = cap[0].replace(/^ {1,4}/gm, '');\n      return {\n        type: 'code',\n        raw: cap[0],\n        codeBlockStyle: 'indented',\n        text: !this.options.pedantic\n          ? rtrim(text, '\\n')\n          : text\n      };\n    }\n  }\n\n  fences(src) {\n    const cap = this.rules.block.fences.exec(src);\n    if (cap) {\n      const raw = cap[0];\n      const text = indentCodeCompensation(raw, cap[3] || '');\n\n      return {\n        type: 'code',\n        raw,\n        lang: cap[2] ? cap[2].trim().replace(this.rules.inline._escapes, '$1') : cap[2],\n        text\n      };\n    }\n  }\n\n  heading(src) {\n    const cap = this.rules.block.heading.exec(src);\n    if (cap) {\n      let text = cap[2].trim();\n\n      // remove trailing #s\n      if (/#$/.test(text)) {\n        const trimmed = rtrim(text, '#');\n        if (this.options.pedantic) {\n          text = trimmed.trim();\n        } else if (!trimmed || / $/.test(trimmed)) {\n          // CommonMark requires space before trailing #s\n          text = trimmed.trim();\n        }\n      }\n\n      return {\n        type: 'heading',\n        raw: cap[0],\n        depth: cap[1].length,\n        text,\n        tokens: this.lexer.inline(text)\n      };\n    }\n  }\n\n  hr(src) {\n    const cap = this.rules.block.hr.exec(src);\n    if (cap) {\n      return {\n        type: 'hr',\n        raw: cap[0]\n      };\n    }\n  }\n\n  blockquote(src) {\n    const cap = this.rules.block.blockquote.exec(src);\n    if (cap) {\n      const text = cap[0].replace(/^ *>[ \\t]?/gm, '');\n      const top = this.lexer.state.top;\n      this.lexer.state.top = true;\n      const tokens = this.lexer.blockTokens(text);\n      this.lexer.state.top = top;\n      return {\n        type: 'blockquote',\n        raw: cap[0],\n        tokens,\n        text\n      };\n    }\n  }\n\n  list(src) {\n    let cap = this.rules.block.list.exec(src);\n    if (cap) {\n      let raw, istask, ischecked, indent, i, blankLine, endsWithBlankLine,\n        line, nextLine, rawLine, itemContents, endEarly;\n\n      let bull = cap[1].trim();\n      const isordered = bull.length > 1;\n\n      const list = {\n        type: 'list',\n        raw: '',\n        ordered: isordered,\n        start: isordered ? +bull.slice(0, -1) : '',\n        loose: false,\n        items: []\n      };\n\n      bull = isordered ? `\\\\d{1,9}\\\\${bull.slice(-1)}` : `\\\\${bull}`;\n\n      if (this.options.pedantic) {\n        bull = isordered ? bull : '[*+-]';\n      }\n\n      // Get next list item\n      const itemRegex = new RegExp(`^( {0,3}${bull})((?:[\\t ][^\\\\n]*)?(?:\\\\n|$))`);\n\n      // Check if current bullet point can start a new List Item\n      while (src) {\n        endEarly = false;\n        if (!(cap = itemRegex.exec(src))) {\n          break;\n        }\n\n        if (this.rules.block.hr.test(src)) { // End list if bullet was actually HR (possibly move into itemRegex?)\n          break;\n        }\n\n        raw = cap[0];\n        src = src.substring(raw.length);\n\n        line = cap[2].split('\\n', 1)[0].replace(/^\\t+/, (t) => ' '.repeat(3 * t.length));\n        nextLine = src.split('\\n', 1)[0];\n\n        if (this.options.pedantic) {\n          indent = 2;\n          itemContents = line.trimLeft();\n        } else {\n          indent = cap[2].search(/[^ ]/); // Find first non-space char\n          indent = indent > 4 ? 1 : indent; // Treat indented code blocks (> 4 spaces) as having only 1 indent\n          itemContents = line.slice(indent);\n          indent += cap[1].length;\n        }\n\n        blankLine = false;\n\n        if (!line && /^ *$/.test(nextLine)) { // Items begin with at most one blank line\n          raw += nextLine + '\\n';\n          src = src.substring(nextLine.length + 1);\n          endEarly = true;\n        }\n\n        if (!endEarly) {\n          const nextBulletRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:[*+-]|\\\\d{1,9}[.)])((?:[ \\t][^\\\\n]*)?(?:\\\\n|$))`);\n          const hrRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}((?:- *){3,}|(?:_ *){3,}|(?:\\\\* *){3,})(?:\\\\n+|$)`);\n          const fencesBeginRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:\\`\\`\\`|~~~)`);\n          const headingBeginRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}#`);\n\n          // Check if following lines should be included in List Item\n          while (src) {\n            rawLine = src.split('\\n', 1)[0];\n            nextLine = rawLine;\n\n            // Re-align to follow commonmark nesting rules\n            if (this.options.pedantic) {\n              nextLine = nextLine.replace(/^ {1,4}(?=( {4})*[^ ])/g, '  ');\n            }\n\n            // End list item if found code fences\n            if (fencesBeginRegex.test(nextLine)) {\n              break;\n            }\n\n            // End list item if found start of new heading\n            if (headingBeginRegex.test(nextLine)) {\n              break;\n            }\n\n            // End list item if found start of new bullet\n            if (nextBulletRegex.test(nextLine)) {\n              break;\n            }\n\n            // Horizontal rule found\n            if (hrRegex.test(src)) {\n              break;\n            }\n\n            if (nextLine.search(/[^ ]/) >= indent || !nextLine.trim()) { // Dedent if possible\n              itemContents += '\\n' + nextLine.slice(indent);\n            } else {\n              // not enough indentation\n              if (blankLine) {\n                break;\n              }\n\n              // paragraph continuation unless last line was a different block level element\n              if (line.search(/[^ ]/) >= 4) { // indented code block\n                break;\n              }\n              if (fencesBeginRegex.test(line)) {\n                break;\n              }\n              if (headingBeginRegex.test(line)) {\n                break;\n              }\n              if (hrRegex.test(line)) {\n                break;\n              }\n\n              itemContents += '\\n' + nextLine;\n            }\n\n            if (!blankLine && !nextLine.trim()) { // Check if current line is blank\n              blankLine = true;\n            }\n\n            raw += rawLine + '\\n';\n            src = src.substring(rawLine.length + 1);\n            line = nextLine.slice(indent);\n          }\n        }\n\n        if (!list.loose) {\n          // If the previous item ended with a blank line, the list is loose\n          if (endsWithBlankLine) {\n            list.loose = true;\n          } else if (/\\n *\\n *$/.test(raw)) {\n            endsWithBlankLine = true;\n          }\n        }\n\n        // Check for task list items\n        if (this.options.gfm) {\n          istask = /^\\[[ xX]\\] /.exec(itemContents);\n          if (istask) {\n            ischecked = istask[0] !== '[ ] ';\n            itemContents = itemContents.replace(/^\\[[ xX]\\] +/, '');\n          }\n        }\n\n        list.items.push({\n          type: 'list_item',\n          raw,\n          task: !!istask,\n          checked: ischecked,\n          loose: false,\n          text: itemContents\n        });\n\n        list.raw += raw;\n      }\n\n      // Do not consume newlines at end of final item. Alternatively, make itemRegex *start* with any newlines to simplify/speed up endsWithBlankLine logic\n      list.items[list.items.length - 1].raw = raw.trimRight();\n      list.items[list.items.length - 1].text = itemContents.trimRight();\n      list.raw = list.raw.trimRight();\n\n      const l = list.items.length;\n\n      // Item child tokens handled here at end because we needed to have the final item to trim it first\n      for (i = 0; i < l; i++) {\n        this.lexer.state.top = false;\n        list.items[i].tokens = this.lexer.blockTokens(list.items[i].text, []);\n\n        if (!list.loose) {\n          // Check if list should be loose\n          const spacers = list.items[i].tokens.filter(t => t.type === 'space');\n          const hasMultipleLineBreaks = spacers.length > 0 && spacers.some(t => /\\n.*\\n/.test(t.raw));\n\n          list.loose = hasMultipleLineBreaks;\n        }\n      }\n\n      // Set all items to loose if list is loose\n      if (list.loose) {\n        for (i = 0; i < l; i++) {\n          list.items[i].loose = true;\n        }\n      }\n\n      return list;\n    }\n  }\n\n  html(src) {\n    const cap = this.rules.block.html.exec(src);\n    if (cap) {\n      const token = {\n        type: 'html',\n        raw: cap[0],\n        pre: !this.options.sanitizer\n          && (cap[1] === 'pre' || cap[1] === 'script' || cap[1] === 'style'),\n        text: cap[0]\n      };\n      if (this.options.sanitize) {\n        const text = this.options.sanitizer ? this.options.sanitizer(cap[0]) : escape(cap[0]);\n        token.type = 'paragraph';\n        token.text = text;\n        token.tokens = this.lexer.inline(text);\n      }\n      return token;\n    }\n  }\n\n  def(src) {\n    const cap = this.rules.block.def.exec(src);\n    if (cap) {\n      const tag = cap[1].toLowerCase().replace(/\\s+/g, ' ');\n      const href = cap[2] ? cap[2].replace(/^<(.*)>$/, '$1').replace(this.rules.inline._escapes, '$1') : '';\n      const title = cap[3] ? cap[3].substring(1, cap[3].length - 1).replace(this.rules.inline._escapes, '$1') : cap[3];\n      return {\n        type: 'def',\n        tag,\n        raw: cap[0],\n        href,\n        title\n      };\n    }\n  }\n\n  table(src) {\n    const cap = this.rules.block.table.exec(src);\n    if (cap) {\n      const item = {\n        type: 'table',\n        header: splitCells(cap[1]).map(c => { return { text: c }; }),\n        align: cap[2].replace(/^ *|\\| *$/g, '').split(/ *\\| */),\n        rows: cap[3] && cap[3].trim() ? cap[3].replace(/\\n[ \\t]*$/, '').split('\\n') : []\n      };\n\n      if (item.header.length === item.align.length) {\n        item.raw = cap[0];\n\n        let l = item.align.length;\n        let i, j, k, row;\n        for (i = 0; i < l; i++) {\n          if (/^ *-+: *$/.test(item.align[i])) {\n            item.align[i] = 'right';\n          } else if (/^ *:-+: *$/.test(item.align[i])) {\n            item.align[i] = 'center';\n          } else if (/^ *:-+ *$/.test(item.align[i])) {\n            item.align[i] = 'left';\n          } else {\n            item.align[i] = null;\n          }\n        }\n\n        l = item.rows.length;\n        for (i = 0; i < l; i++) {\n          item.rows[i] = splitCells(item.rows[i], item.header.length).map(c => { return { text: c }; });\n        }\n\n        // parse child tokens inside headers and cells\n\n        // header child tokens\n        l = item.header.length;\n        for (j = 0; j < l; j++) {\n          item.header[j].tokens = this.lexer.inline(item.header[j].text);\n        }\n\n        // cell child tokens\n        l = item.rows.length;\n        for (j = 0; j < l; j++) {\n          row = item.rows[j];\n          for (k = 0; k < row.length; k++) {\n            row[k].tokens = this.lexer.inline(row[k].text);\n          }\n        }\n\n        return item;\n      }\n    }\n  }\n\n  lheading(src) {\n    const cap = this.rules.block.lheading.exec(src);\n    if (cap) {\n      return {\n        type: 'heading',\n        raw: cap[0],\n        depth: cap[2].charAt(0) === '=' ? 1 : 2,\n        text: cap[1],\n        tokens: this.lexer.inline(cap[1])\n      };\n    }\n  }\n\n  paragraph(src) {\n    const cap = this.rules.block.paragraph.exec(src);\n    if (cap) {\n      const text = cap[1].charAt(cap[1].length - 1) === '\\n'\n        ? cap[1].slice(0, -1)\n        : cap[1];\n      return {\n        type: 'paragraph',\n        raw: cap[0],\n        text,\n        tokens: this.lexer.inline(text)\n      };\n    }\n  }\n\n  text(src) {\n    const cap = this.rules.block.text.exec(src);\n    if (cap) {\n      return {\n        type: 'text',\n        raw: cap[0],\n        text: cap[0],\n        tokens: this.lexer.inline(cap[0])\n      };\n    }\n  }\n\n  escape(src) {\n    const cap = this.rules.inline.escape.exec(src);\n    if (cap) {\n      return {\n        type: 'escape',\n        raw: cap[0],\n        text: escape(cap[1])\n      };\n    }\n  }\n\n  tag(src) {\n    const cap = this.rules.inline.tag.exec(src);\n    if (cap) {\n      if (!this.lexer.state.inLink && /^<a /i.test(cap[0])) {\n        this.lexer.state.inLink = true;\n      } else if (this.lexer.state.inLink && /^<\\/a>/i.test(cap[0])) {\n        this.lexer.state.inLink = false;\n      }\n      if (!this.lexer.state.inRawBlock && /^<(pre|code|kbd|script)(\\s|>)/i.test(cap[0])) {\n        this.lexer.state.inRawBlock = true;\n      } else if (this.lexer.state.inRawBlock && /^<\\/(pre|code|kbd|script)(\\s|>)/i.test(cap[0])) {\n        this.lexer.state.inRawBlock = false;\n      }\n\n      return {\n        type: this.options.sanitize\n          ? 'text'\n          : 'html',\n        raw: cap[0],\n        inLink: this.lexer.state.inLink,\n        inRawBlock: this.lexer.state.inRawBlock,\n        text: this.options.sanitize\n          ? (this.options.sanitizer\n            ? this.options.sanitizer(cap[0])\n            : escape(cap[0]))\n          : cap[0]\n      };\n    }\n  }\n\n  link(src) {\n    const cap = this.rules.inline.link.exec(src);\n    if (cap) {\n      const trimmedUrl = cap[2].trim();\n      if (!this.options.pedantic && /^</.test(trimmedUrl)) {\n        // commonmark requires matching angle brackets\n        if (!(/>$/.test(trimmedUrl))) {\n          return;\n        }\n\n        // ending angle bracket cannot be escaped\n        const rtrimSlash = rtrim(trimmedUrl.slice(0, -1), '\\\\');\n        if ((trimmedUrl.length - rtrimSlash.length) % 2 === 0) {\n          return;\n        }\n      } else {\n        // find closing parenthesis\n        const lastParenIndex = findClosingBracket(cap[2], '()');\n        if (lastParenIndex > -1) {\n          const start = cap[0].indexOf('!') === 0 ? 5 : 4;\n          const linkLen = start + cap[1].length + lastParenIndex;\n          cap[2] = cap[2].substring(0, lastParenIndex);\n          cap[0] = cap[0].substring(0, linkLen).trim();\n          cap[3] = '';\n        }\n      }\n      let href = cap[2];\n      let title = '';\n      if (this.options.pedantic) {\n        // split pedantic href and title\n        const link = /^([^'\"]*[^\\s])\\s+(['\"])(.*)\\2/.exec(href);\n\n        if (link) {\n          href = link[1];\n          title = link[3];\n        }\n      } else {\n        title = cap[3] ? cap[3].slice(1, -1) : '';\n      }\n\n      href = href.trim();\n      if (/^</.test(href)) {\n        if (this.options.pedantic && !(/>$/.test(trimmedUrl))) {\n          // pedantic allows starting angle bracket without ending angle bracket\n          href = href.slice(1);\n        } else {\n          href = href.slice(1, -1);\n        }\n      }\n      return outputLink(cap, {\n        href: href ? href.replace(this.rules.inline._escapes, '$1') : href,\n        title: title ? title.replace(this.rules.inline._escapes, '$1') : title\n      }, cap[0], this.lexer);\n    }\n  }\n\n  reflink(src, links) {\n    let cap;\n    if ((cap = this.rules.inline.reflink.exec(src))\n        || (cap = this.rules.inline.nolink.exec(src))) {\n      let link = (cap[2] || cap[1]).replace(/\\s+/g, ' ');\n      link = links[link.toLowerCase()];\n      if (!link) {\n        const text = cap[0].charAt(0);\n        return {\n          type: 'text',\n          raw: text,\n          text\n        };\n      }\n      return outputLink(cap, link, cap[0], this.lexer);\n    }\n  }\n\n  emStrong(src, maskedSrc, prevChar = '') {\n    let match = this.rules.inline.emStrong.lDelim.exec(src);\n    if (!match) return;\n\n    // _ can't be between two alphanumerics. \\p{L}\\p{N} includes non-english alphabet/numbers as well\n    if (match[3] && prevChar.match(/[\\p{L}\\p{N}]/u)) return;\n\n    const nextChar = match[1] || match[2] || '';\n\n    if (!nextChar || (nextChar && (prevChar === '' || this.rules.inline.punctuation.exec(prevChar)))) {\n      const lLength = match[0].length - 1;\n      let rDelim, rLength, delimTotal = lLength, midDelimTotal = 0;\n\n      const endReg = match[0][0] === '*' ? this.rules.inline.emStrong.rDelimAst : this.rules.inline.emStrong.rDelimUnd;\n      endReg.lastIndex = 0;\n\n      // Clip maskedSrc to same section of string as src (move to lexer?)\n      maskedSrc = maskedSrc.slice(-1 * src.length + lLength);\n\n      while ((match = endReg.exec(maskedSrc)) != null) {\n        rDelim = match[1] || match[2] || match[3] || match[4] || match[5] || match[6];\n\n        if (!rDelim) continue; // skip single * in __abc*abc__\n\n        rLength = rDelim.length;\n\n        if (match[3] || match[4]) { // found another Left Delim\n          delimTotal += rLength;\n          continue;\n        } else if (match[5] || match[6]) { // either Left or Right Delim\n          if (lLength % 3 && !((lLength + rLength) % 3)) {\n            midDelimTotal += rLength;\n            continue; // CommonMark Emphasis Rules 9-10\n          }\n        }\n\n        delimTotal -= rLength;\n\n        if (delimTotal > 0) continue; // Haven't found enough closing delimiters\n\n        // Remove extra characters. *a*** -> *a*\n        rLength = Math.min(rLength, rLength + delimTotal + midDelimTotal);\n\n        const raw = src.slice(0, lLength + match.index + (match[0].length - rDelim.length) + rLength);\n\n        // Create `em` if smallest delimiter has odd char count. *a***\n        if (Math.min(lLength, rLength) % 2) {\n          const text = raw.slice(1, -1);\n          return {\n            type: 'em',\n            raw,\n            text,\n            tokens: this.lexer.inlineTokens(text)\n          };\n        }\n\n        // Create 'strong' if smallest delimiter has even char count. **a***\n        const text = raw.slice(2, -2);\n        return {\n          type: 'strong',\n          raw,\n          text,\n          tokens: this.lexer.inlineTokens(text)\n        };\n      }\n    }\n  }\n\n  codespan(src) {\n    const cap = this.rules.inline.code.exec(src);\n    if (cap) {\n      let text = cap[2].replace(/\\n/g, ' ');\n      const hasNonSpaceChars = /[^ ]/.test(text);\n      const hasSpaceCharsOnBothEnds = /^ /.test(text) && / $/.test(text);\n      if (hasNonSpaceChars && hasSpaceCharsOnBothEnds) {\n        text = text.substring(1, text.length - 1);\n      }\n      text = escape(text, true);\n      return {\n        type: 'codespan',\n        raw: cap[0],\n        text\n      };\n    }\n  }\n\n  br(src) {\n    const cap = this.rules.inline.br.exec(src);\n    if (cap) {\n      return {\n        type: 'br',\n        raw: cap[0]\n      };\n    }\n  }\n\n  del(src) {\n    const cap = this.rules.inline.del.exec(src);\n    if (cap) {\n      return {\n        type: 'del',\n        raw: cap[0],\n        text: cap[2],\n        tokens: this.lexer.inlineTokens(cap[2])\n      };\n    }\n  }\n\n  autolink(src, mangle) {\n    const cap = this.rules.inline.autolink.exec(src);\n    if (cap) {\n      let text, href;\n      if (cap[2] === '@') {\n        text = escape(this.options.mangle ? mangle(cap[1]) : cap[1]);\n        href = 'mailto:' + text;\n      } else {\n        text = escape(cap[1]);\n        href = text;\n      }\n\n      return {\n        type: 'link',\n        raw: cap[0],\n        text,\n        href,\n        tokens: [\n          {\n            type: 'text',\n            raw: text,\n            text\n          }\n        ]\n      };\n    }\n  }\n\n  url(src, mangle) {\n    let cap;\n    if (cap = this.rules.inline.url.exec(src)) {\n      let text, href;\n      if (cap[2] === '@') {\n        text = escape(this.options.mangle ? mangle(cap[0]) : cap[0]);\n        href = 'mailto:' + text;\n      } else {\n        // do extended autolink path validation\n        let prevCapZero;\n        do {\n          prevCapZero = cap[0];\n          cap[0] = this.rules.inline._backpedal.exec(cap[0])[0];\n        } while (prevCapZero !== cap[0]);\n        text = escape(cap[0]);\n        if (cap[1] === 'www.') {\n          href = 'http://' + cap[0];\n        } else {\n          href = cap[0];\n        }\n      }\n      return {\n        type: 'link',\n        raw: cap[0],\n        text,\n        href,\n        tokens: [\n          {\n            type: 'text',\n            raw: text,\n            text\n          }\n        ]\n      };\n    }\n  }\n\n  inlineText(src, smartypants) {\n    const cap = this.rules.inline.text.exec(src);\n    if (cap) {\n      let text;\n      if (this.lexer.state.inRawBlock) {\n        text = this.options.sanitize ? (this.options.sanitizer ? this.options.sanitizer(cap[0]) : escape(cap[0])) : cap[0];\n      } else {\n        text = escape(this.options.smartypants ? smartypants(cap[0]) : cap[0]);\n      }\n      return {\n        type: 'text',\n        raw: cap[0],\n        text\n      };\n    }\n  }\n}\n\n/**\n * Block-Level Grammar\n */\nconst block = {\n  newline: /^(?: *(?:\\n|$))+/,\n  code: /^( {4}[^\\n]+(?:\\n(?: *(?:\\n|$))*)?)+/,\n  fences: /^ {0,3}(`{3,}(?=[^`\\n]*\\n)|~{3,})([^\\n]*)\\n(?:|([\\s\\S]*?)\\n)(?: {0,3}\\1[~`]* *(?=\\n|$)|$)/,\n  hr: /^ {0,3}((?:-[\\t ]*){3,}|(?:_[ \\t]*){3,}|(?:\\*[ \\t]*){3,})(?:\\n+|$)/,\n  heading: /^ {0,3}(#{1,6})(?=\\s|$)(.*)(?:\\n+|$)/,\n  blockquote: /^( {0,3}> ?(paragraph|[^\\n]*)(?:\\n|$))+/,\n  list: /^( {0,3}bull)([ \\t][^\\n]+?)?(?:\\n|$)/,\n  html: '^ {0,3}(?:' // optional indentation\n    + '<(script|pre|style|textarea)[\\\\s>][\\\\s\\\\S]*?(?:</\\\\1>[^\\\\n]*\\\\n+|$)' // (1)\n    + '|comment[^\\\\n]*(\\\\n+|$)' // (2)\n    + '|<\\\\?[\\\\s\\\\S]*?(?:\\\\?>\\\\n*|$)' // (3)\n    + '|<![A-Z][\\\\s\\\\S]*?(?:>\\\\n*|$)' // (4)\n    + '|<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?(?:\\\\]\\\\]>\\\\n*|$)' // (5)\n    + '|</?(tag)(?: +|\\\\n|/?>)[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)' // (6)\n    + '|<(?!script|pre|style|textarea)([a-z][\\\\w-]*)(?:attribute)*? */?>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)' // (7) open tag\n    + '|</(?!script|pre|style|textarea)[a-z][\\\\w-]*\\\\s*>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)' // (7) closing tag\n    + ')',\n  def: /^ {0,3}\\[(label)\\]: *(?:\\n *)?([^<\\s][^\\s]*|<.*?>)(?:(?: +(?:\\n *)?| *\\n *)(title))? *(?:\\n+|$)/,\n  table: noopTest,\n  lheading: /^((?:.|\\n(?!\\n))+?)\\n {0,3}(=+|-+) *(?:\\n+|$)/,\n  // regex template, placeholders will be replaced according to different paragraph\n  // interruption rules of commonmark and the original markdown spec:\n  _paragraph: /^([^\\n]+(?:\\n(?!hr|heading|lheading|blockquote|fences|list|html|table| +\\n)[^\\n]+)*)/,\n  text: /^[^\\n]+/\n};\n\nblock._label = /(?!\\s*\\])(?:\\\\.|[^\\[\\]\\\\])+/;\nblock._title = /(?:\"(?:\\\\\"?|[^\"\\\\])*\"|'[^'\\n]*(?:\\n[^'\\n]+)*\\n?'|\\([^()]*\\))/;\nblock.def = edit(block.def)\n  .replace('label', block._label)\n  .replace('title', block._title)\n  .getRegex();\n\nblock.bullet = /(?:[*+-]|\\d{1,9}[.)])/;\nblock.listItemStart = edit(/^( *)(bull) */)\n  .replace('bull', block.bullet)\n  .getRegex();\n\nblock.list = edit(block.list)\n  .replace(/bull/g, block.bullet)\n  .replace('hr', '\\\\n+(?=\\\\1?(?:(?:- *){3,}|(?:_ *){3,}|(?:\\\\* *){3,})(?:\\\\n+|$))')\n  .replace('def', '\\\\n+(?=' + block.def.source + ')')\n  .getRegex();\n\nblock._tag = 'address|article|aside|base|basefont|blockquote|body|caption'\n  + '|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption'\n  + '|figure|footer|form|frame|frameset|h[1-6]|head|header|hr|html|iframe'\n  + '|legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option'\n  + '|p|param|section|source|summary|table|tbody|td|tfoot|th|thead|title|tr'\n  + '|track|ul';\nblock._comment = /<!--(?!-?>)[\\s\\S]*?(?:-->|$)/;\nblock.html = edit(block.html, 'i')\n  .replace('comment', block._comment)\n  .replace('tag', block._tag)\n  .replace('attribute', / +[a-zA-Z:_][\\w.:-]*(?: *= *\"[^\"\\n]*\"| *= *'[^'\\n]*'| *= *[^\\s\"'=<>`]+)?/)\n  .getRegex();\n\nblock.paragraph = edit(block._paragraph)\n  .replace('hr', block.hr)\n  .replace('heading', ' {0,3}#{1,6} ')\n  .replace('|lheading', '') // setex headings don't interrupt commonmark paragraphs\n  .replace('|table', '')\n  .replace('blockquote', ' {0,3}>')\n  .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n  .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n  .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n  .replace('tag', block._tag) // pars can be interrupted by type (6) html blocks\n  .getRegex();\n\nblock.blockquote = edit(block.blockquote)\n  .replace('paragraph', block.paragraph)\n  .getRegex();\n\n/**\n * Normal Block Grammar\n */\n\nblock.normal = merge({}, block);\n\n/**\n * GFM Block Grammar\n */\n\nblock.gfm = merge({}, block.normal, {\n  table: '^ *([^\\\\n ].*\\\\|.*)\\\\n' // Header\n    + ' {0,3}(?:\\\\| *)?(:?-+:? *(?:\\\\| *:?-+:? *)*)(?:\\\\| *)?' // Align\n    + '(?:\\\\n((?:(?! *\\\\n|hr|heading|blockquote|code|fences|list|html).*(?:\\\\n|$))*)\\\\n*|$)' // Cells\n});\n\nblock.gfm.table = edit(block.gfm.table)\n  .replace('hr', block.hr)\n  .replace('heading', ' {0,3}#{1,6} ')\n  .replace('blockquote', ' {0,3}>')\n  .replace('code', ' {4}[^\\\\n]')\n  .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n  .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n  .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n  .replace('tag', block._tag) // tables can be interrupted by type (6) html blocks\n  .getRegex();\n\nblock.gfm.paragraph = edit(block._paragraph)\n  .replace('hr', block.hr)\n  .replace('heading', ' {0,3}#{1,6} ')\n  .replace('|lheading', '') // setex headings don't interrupt commonmark paragraphs\n  .replace('table', block.gfm.table) // interrupt paragraphs with table\n  .replace('blockquote', ' {0,3}>')\n  .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n  .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n  .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n  .replace('tag', block._tag) // pars can be interrupted by type (6) html blocks\n  .getRegex();\n/**\n * Pedantic grammar (original John Gruber's loose markdown specification)\n */\n\nblock.pedantic = merge({}, block.normal, {\n  html: edit(\n    '^ *(?:comment *(?:\\\\n|\\\\s*$)'\n    + '|<(tag)[\\\\s\\\\S]+?</\\\\1> *(?:\\\\n{2,}|\\\\s*$)' // closed tag\n    + '|<tag(?:\"[^\"]*\"|\\'[^\\']*\\'|\\\\s[^\\'\"/>\\\\s]*)*?/?> *(?:\\\\n{2,}|\\\\s*$))')\n    .replace('comment', block._comment)\n    .replace(/tag/g, '(?!(?:'\n      + 'a|em|strong|small|s|cite|q|dfn|abbr|data|time|code|var|samp|kbd|sub'\n      + '|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo|span|br|wbr|ins|del|img)'\n      + '\\\\b)\\\\w+(?!:|[^\\\\w\\\\s@]*@)\\\\b')\n    .getRegex(),\n  def: /^ *\\[([^\\]]+)\\]: *<?([^\\s>]+)>?(?: +([\"(][^\\n]+[\")]))? *(?:\\n+|$)/,\n  heading: /^(#{1,6})(.*)(?:\\n+|$)/,\n  fences: noopTest, // fences not supported\n  lheading: /^(.+?)\\n {0,3}(=+|-+) *(?:\\n+|$)/,\n  paragraph: edit(block.normal._paragraph)\n    .replace('hr', block.hr)\n    .replace('heading', ' *#{1,6} *[^\\n]')\n    .replace('lheading', block.lheading)\n    .replace('blockquote', ' {0,3}>')\n    .replace('|fences', '')\n    .replace('|list', '')\n    .replace('|html', '')\n    .getRegex()\n});\n\n/**\n * Inline-Level Grammar\n */\nconst inline = {\n  escape: /^\\\\([!\"#$%&'()*+,\\-./:;<=>?@\\[\\]\\\\^_`{|}~])/,\n  autolink: /^<(scheme:[^\\s\\x00-\\x1f<>]*|email)>/,\n  url: noopTest,\n  tag: '^comment'\n    + '|^</[a-zA-Z][\\\\w:-]*\\\\s*>' // self-closing tag\n    + '|^<[a-zA-Z][\\\\w-]*(?:attribute)*?\\\\s*/?>' // open tag\n    + '|^<\\\\?[\\\\s\\\\S]*?\\\\?>' // processing instruction, e.g. <?php ?>\n    + '|^<![a-zA-Z]+\\\\s[\\\\s\\\\S]*?>' // declaration, e.g. <!DOCTYPE html>\n    + '|^<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?\\\\]\\\\]>', // CDATA section\n  link: /^!?\\[(label)\\]\\(\\s*(href)(?:\\s+(title))?\\s*\\)/,\n  reflink: /^!?\\[(label)\\]\\[(ref)\\]/,\n  nolink: /^!?\\[(ref)\\](?:\\[\\])?/,\n  reflinkSearch: 'reflink|nolink(?!\\\\()',\n  emStrong: {\n    lDelim: /^(?:\\*+(?:([punct_])|[^\\s*]))|^_+(?:([punct*])|([^\\s_]))/,\n    //        (1) and (2) can only be a Right Delimiter. (3) and (4) can only be Left.  (5) and (6) can be either Left or Right.\n    //          () Skip orphan inside strong                                      () Consume to delim     (1) #***                (2) a***#, a***                             (3) #***a, ***a                 (4) ***#              (5) #***#                 (6) a***a\n    rDelimAst: /^(?:[^_*\\\\]|\\\\.)*?\\_\\_(?:[^_*\\\\]|\\\\.)*?\\*(?:[^_*\\\\]|\\\\.)*?(?=\\_\\_)|(?:[^*\\\\]|\\\\.)+(?=[^*])|[punct_](\\*+)(?=[\\s]|$)|(?:[^punct*_\\s\\\\]|\\\\.)(\\*+)(?=[punct_\\s]|$)|[punct_\\s](\\*+)(?=[^punct*_\\s])|[\\s](\\*+)(?=[punct_])|[punct_](\\*+)(?=[punct_])|(?:[^punct*_\\s\\\\]|\\\\.)(\\*+)(?=[^punct*_\\s])/,\n    rDelimUnd: /^(?:[^_*\\\\]|\\\\.)*?\\*\\*(?:[^_*\\\\]|\\\\.)*?\\_(?:[^_*\\\\]|\\\\.)*?(?=\\*\\*)|(?:[^_\\\\]|\\\\.)+(?=[^_])|[punct*](\\_+)(?=[\\s]|$)|(?:[^punct*_\\s\\\\]|\\\\.)(\\_+)(?=[punct*\\s]|$)|[punct*\\s](\\_+)(?=[^punct*_\\s])|[\\s](\\_+)(?=[punct*])|[punct*](\\_+)(?=[punct*])/ // ^- Not allowed for _\n  },\n  code: /^(`+)([^`]|[^`][\\s\\S]*?[^`])\\1(?!`)/,\n  br: /^( {2,}|\\\\)\\n(?!\\s*$)/,\n  del: noopTest,\n  text: /^(`+|[^`])(?:(?= {2,}\\n)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*_]|\\b_|$)|[^ ](?= {2,}\\n)))/,\n  punctuation: /^([\\spunctuation])/\n};\n\n// list of punctuation marks from CommonMark spec\n// without * and _ to handle the different emphasis markers * and _\ninline._punctuation = '!\"#$%&\\'()+\\\\-.,/:;<=>?@\\\\[\\\\]`^{|}~';\ninline.punctuation = edit(inline.punctuation).replace(/punctuation/g, inline._punctuation).getRegex();\n\n// sequences em should skip over [title](link), `code`, <html>\ninline.blockSkip = /\\[[^\\]]*?\\]\\([^\\)]*?\\)|`[^`]*?`|<[^>]*?>/g;\n// lookbehind is not available on Safari as of version 16\n// inline.escapedEmSt = /(?<=(?:^|[^\\\\)(?:\\\\[^])*)\\\\[*_]/g;\ninline.escapedEmSt = /(?:^|[^\\\\])(?:\\\\\\\\)*\\\\[*_]/g;\n\ninline._comment = edit(block._comment).replace('(?:-->|$)', '-->').getRegex();\n\ninline.emStrong.lDelim = edit(inline.emStrong.lDelim)\n  .replace(/punct/g, inline._punctuation)\n  .getRegex();\n\ninline.emStrong.rDelimAst = edit(inline.emStrong.rDelimAst, 'g')\n  .replace(/punct/g, inline._punctuation)\n  .getRegex();\n\ninline.emStrong.rDelimUnd = edit(inline.emStrong.rDelimUnd, 'g')\n  .replace(/punct/g, inline._punctuation)\n  .getRegex();\n\ninline._escapes = /\\\\([!\"#$%&'()*+,\\-./:;<=>?@\\[\\]\\\\^_`{|}~])/g;\n\ninline._scheme = /[a-zA-Z][a-zA-Z0-9+.-]{1,31}/;\ninline._email = /[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+(@)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(?![-_])/;\ninline.autolink = edit(inline.autolink)\n  .replace('scheme', inline._scheme)\n  .replace('email', inline._email)\n  .getRegex();\n\ninline._attribute = /\\s+[a-zA-Z:_][\\w.:-]*(?:\\s*=\\s*\"[^\"]*\"|\\s*=\\s*'[^']*'|\\s*=\\s*[^\\s\"'=<>`]+)?/;\n\ninline.tag = edit(inline.tag)\n  .replace('comment', inline._comment)\n  .replace('attribute', inline._attribute)\n  .getRegex();\n\ninline._label = /(?:\\[(?:\\\\.|[^\\[\\]\\\\])*\\]|\\\\.|`[^`]*`|[^\\[\\]\\\\`])*?/;\ninline._href = /<(?:\\\\.|[^\\n<>\\\\])+>|[^\\s\\x00-\\x1f]*/;\ninline._title = /\"(?:\\\\\"?|[^\"\\\\])*\"|'(?:\\\\'?|[^'\\\\])*'|\\((?:\\\\\\)?|[^)\\\\])*\\)/;\n\ninline.link = edit(inline.link)\n  .replace('label', inline._label)\n  .replace('href', inline._href)\n  .replace('title', inline._title)\n  .getRegex();\n\ninline.reflink = edit(inline.reflink)\n  .replace('label', inline._label)\n  .replace('ref', block._label)\n  .getRegex();\n\ninline.nolink = edit(inline.nolink)\n  .replace('ref', block._label)\n  .getRegex();\n\ninline.reflinkSearch = edit(inline.reflinkSearch, 'g')\n  .replace('reflink', inline.reflink)\n  .replace('nolink', inline.nolink)\n  .getRegex();\n\n/**\n * Normal Inline Grammar\n */\n\ninline.normal = merge({}, inline);\n\n/**\n * Pedantic Inline Grammar\n */\n\ninline.pedantic = merge({}, inline.normal, {\n  strong: {\n    start: /^__|\\*\\*/,\n    middle: /^__(?=\\S)([\\s\\S]*?\\S)__(?!_)|^\\*\\*(?=\\S)([\\s\\S]*?\\S)\\*\\*(?!\\*)/,\n    endAst: /\\*\\*(?!\\*)/g,\n    endUnd: /__(?!_)/g\n  },\n  em: {\n    start: /^_|\\*/,\n    middle: /^()\\*(?=\\S)([\\s\\S]*?\\S)\\*(?!\\*)|^_(?=\\S)([\\s\\S]*?\\S)_(?!_)/,\n    endAst: /\\*(?!\\*)/g,\n    endUnd: /_(?!_)/g\n  },\n  link: edit(/^!?\\[(label)\\]\\((.*?)\\)/)\n    .replace('label', inline._label)\n    .getRegex(),\n  reflink: edit(/^!?\\[(label)\\]\\s*\\[([^\\]]*)\\]/)\n    .replace('label', inline._label)\n    .getRegex()\n});\n\n/**\n * GFM Inline Grammar\n */\n\ninline.gfm = merge({}, inline.normal, {\n  escape: edit(inline.escape).replace('])', '~|])').getRegex(),\n  _extended_email: /[A-Za-z0-9._+-]+(@)[a-zA-Z0-9-_]+(?:\\.[a-zA-Z0-9-_]*[a-zA-Z0-9])+(?![-_])/,\n  url: /^((?:ftp|https?):\\/\\/|www\\.)(?:[a-zA-Z0-9\\-]+\\.?)+[^\\s<]*|^email/,\n  _backpedal: /(?:[^?!.,:;*_'\"~()&]+|\\([^)]*\\)|&(?![a-zA-Z0-9]+;$)|[?!.,:;*_'\"~)]+(?!$))+/,\n  del: /^(~~?)(?=[^\\s~])([\\s\\S]*?[^\\s~])\\1(?=[^~]|$)/,\n  text: /^([`~]+|[^`~])(?:(?= {2,}\\n)|(?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*~_]|\\b_|https?:\\/\\/|ftp:\\/\\/|www\\.|$)|[^ ](?= {2,}\\n)|[^a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-](?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)))/\n});\n\ninline.gfm.url = edit(inline.gfm.url, 'i')\n  .replace('email', inline.gfm._extended_email)\n  .getRegex();\n/**\n * GFM + Line Breaks Inline Grammar\n */\n\ninline.breaks = merge({}, inline.gfm, {\n  br: edit(inline.br).replace('{2,}', '*').getRegex(),\n  text: edit(inline.gfm.text)\n    .replace('\\\\b_', '\\\\b_| {2,}\\\\n')\n    .replace(/\\{2,\\}/g, '*')\n    .getRegex()\n});\n\n/**\n * smartypants text replacement\n * @param {string} text\n */\nfunction smartypants(text) {\n  return text\n    // em-dashes\n    .replace(/---/g, '\\u2014')\n    // en-dashes\n    .replace(/--/g, '\\u2013')\n    // opening singles\n    .replace(/(^|[-\\u2014/(\\[{\"\\s])'/g, '$1\\u2018')\n    // closing singles & apostrophes\n    .replace(/'/g, '\\u2019')\n    // opening doubles\n    .replace(/(^|[-\\u2014/(\\[{\\u2018\\s])\"/g, '$1\\u201c')\n    // closing doubles\n    .replace(/\"/g, '\\u201d')\n    // ellipses\n    .replace(/\\.{3}/g, '\\u2026');\n}\n\n/**\n * mangle email addresses\n * @param {string} text\n */\nfunction mangle(text) {\n  let out = '',\n    i,\n    ch;\n\n  const l = text.length;\n  for (i = 0; i < l; i++) {\n    ch = text.charCodeAt(i);\n    if (Math.random() > 0.5) {\n      ch = 'x' + ch.toString(16);\n    }\n    out += '&#' + ch + ';';\n  }\n\n  return out;\n}\n\n/**\n * Block Lexer\n */\nclass Lexer {\n  constructor(options) {\n    this.tokens = [];\n    this.tokens.links = Object.create(null);\n    this.options = options || defaults;\n    this.options.tokenizer = this.options.tokenizer || new Tokenizer();\n    this.tokenizer = this.options.tokenizer;\n    this.tokenizer.options = this.options;\n    this.tokenizer.lexer = this;\n    this.inlineQueue = [];\n    this.state = {\n      inLink: false,\n      inRawBlock: false,\n      top: true\n    };\n\n    const rules = {\n      block: block.normal,\n      inline: inline.normal\n    };\n\n    if (this.options.pedantic) {\n      rules.block = block.pedantic;\n      rules.inline = inline.pedantic;\n    } else if (this.options.gfm) {\n      rules.block = block.gfm;\n      if (this.options.breaks) {\n        rules.inline = inline.breaks;\n      } else {\n        rules.inline = inline.gfm;\n      }\n    }\n    this.tokenizer.rules = rules;\n  }\n\n  /**\n   * Expose Rules\n   */\n  static get rules() {\n    return {\n      block,\n      inline\n    };\n  }\n\n  /**\n   * Static Lex Method\n   */\n  static lex(src, options) {\n    const lexer = new Lexer(options);\n    return lexer.lex(src);\n  }\n\n  /**\n   * Static Lex Inline Method\n   */\n  static lexInline(src, options) {\n    const lexer = new Lexer(options);\n    return lexer.inlineTokens(src);\n  }\n\n  /**\n   * Preprocessing\n   */\n  lex(src) {\n    src = src\n      .replace(/\\r\\n|\\r/g, '\\n');\n\n    this.blockTokens(src, this.tokens);\n\n    let next;\n    while (next = this.inlineQueue.shift()) {\n      this.inlineTokens(next.src, next.tokens);\n    }\n\n    return this.tokens;\n  }\n\n  /**\n   * Lexing\n   */\n  blockTokens(src, tokens = []) {\n    if (this.options.pedantic) {\n      src = src.replace(/\\t/g, '    ').replace(/^ +$/gm, '');\n    } else {\n      src = src.replace(/^( *)(\\t+)/gm, (_, leading, tabs) => {\n        return leading + '    '.repeat(tabs.length);\n      });\n    }\n\n    let token, lastToken, cutSrc, lastParagraphClipped;\n\n    while (src) {\n      if (this.options.extensions\n        && this.options.extensions.block\n        && this.options.extensions.block.some((extTokenizer) => {\n          if (token = extTokenizer.call({ lexer: this }, src, tokens)) {\n            src = src.substring(token.raw.length);\n            tokens.push(token);\n            return true;\n          }\n          return false;\n        })) {\n        continue;\n      }\n\n      // newline\n      if (token = this.tokenizer.space(src)) {\n        src = src.substring(token.raw.length);\n        if (token.raw.length === 1 && tokens.length > 0) {\n          // if there's a single \\n as a spacer, it's terminating the last line,\n          // so move it there so that we don't get unecessary paragraph tags\n          tokens[tokens.length - 1].raw += '\\n';\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      // code\n      if (token = this.tokenizer.code(src)) {\n        src = src.substring(token.raw.length);\n        lastToken = tokens[tokens.length - 1];\n        // An indented code block cannot interrupt a paragraph.\n        if (lastToken && (lastToken.type === 'paragraph' || lastToken.type === 'text')) {\n          lastToken.raw += '\\n' + token.raw;\n          lastToken.text += '\\n' + token.text;\n          this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      // fences\n      if (token = this.tokenizer.fences(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // heading\n      if (token = this.tokenizer.heading(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // hr\n      if (token = this.tokenizer.hr(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // blockquote\n      if (token = this.tokenizer.blockquote(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // list\n      if (token = this.tokenizer.list(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // html\n      if (token = this.tokenizer.html(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // def\n      if (token = this.tokenizer.def(src)) {\n        src = src.substring(token.raw.length);\n        lastToken = tokens[tokens.length - 1];\n        if (lastToken && (lastToken.type === 'paragraph' || lastToken.type === 'text')) {\n          lastToken.raw += '\\n' + token.raw;\n          lastToken.text += '\\n' + token.raw;\n          this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n        } else if (!this.tokens.links[token.tag]) {\n          this.tokens.links[token.tag] = {\n            href: token.href,\n            title: token.title\n          };\n        }\n        continue;\n      }\n\n      // table (gfm)\n      if (token = this.tokenizer.table(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // lheading\n      if (token = this.tokenizer.lheading(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // top-level paragraph\n      // prevent paragraph consuming extensions by clipping 'src' to extension start\n      cutSrc = src;\n      if (this.options.extensions && this.options.extensions.startBlock) {\n        let startIndex = Infinity;\n        const tempSrc = src.slice(1);\n        let tempStart;\n        this.options.extensions.startBlock.forEach(function(getStartIndex) {\n          tempStart = getStartIndex.call({ lexer: this }, tempSrc);\n          if (typeof tempStart === 'number' && tempStart >= 0) { startIndex = Math.min(startIndex, tempStart); }\n        });\n        if (startIndex < Infinity && startIndex >= 0) {\n          cutSrc = src.substring(0, startIndex + 1);\n        }\n      }\n      if (this.state.top && (token = this.tokenizer.paragraph(cutSrc))) {\n        lastToken = tokens[tokens.length - 1];\n        if (lastParagraphClipped && lastToken.type === 'paragraph') {\n          lastToken.raw += '\\n' + token.raw;\n          lastToken.text += '\\n' + token.text;\n          this.inlineQueue.pop();\n          this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n        } else {\n          tokens.push(token);\n        }\n        lastParagraphClipped = (cutSrc.length !== src.length);\n        src = src.substring(token.raw.length);\n        continue;\n      }\n\n      // text\n      if (token = this.tokenizer.text(src)) {\n        src = src.substring(token.raw.length);\n        lastToken = tokens[tokens.length - 1];\n        if (lastToken && lastToken.type === 'text') {\n          lastToken.raw += '\\n' + token.raw;\n          lastToken.text += '\\n' + token.text;\n          this.inlineQueue.pop();\n          this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      if (src) {\n        const errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);\n        if (this.options.silent) {\n          console.error(errMsg);\n          break;\n        } else {\n          throw new Error(errMsg);\n        }\n      }\n    }\n\n    this.state.top = true;\n    return tokens;\n  }\n\n  inline(src, tokens = []) {\n    this.inlineQueue.push({ src, tokens });\n    return tokens;\n  }\n\n  /**\n   * Lexing/Compiling\n   */\n  inlineTokens(src, tokens = []) {\n    let token, lastToken, cutSrc;\n\n    // String with links masked to avoid interference with em and strong\n    let maskedSrc = src;\n    let match;\n    let keepPrevChar, prevChar;\n\n    // Mask out reflinks\n    if (this.tokens.links) {\n      const links = Object.keys(this.tokens.links);\n      if (links.length > 0) {\n        while ((match = this.tokenizer.rules.inline.reflinkSearch.exec(maskedSrc)) != null) {\n          if (links.includes(match[0].slice(match[0].lastIndexOf('[') + 1, -1))) {\n            maskedSrc = maskedSrc.slice(0, match.index) + '[' + repeatString('a', match[0].length - 2) + ']' + maskedSrc.slice(this.tokenizer.rules.inline.reflinkSearch.lastIndex);\n          }\n        }\n      }\n    }\n    // Mask out other blocks\n    while ((match = this.tokenizer.rules.inline.blockSkip.exec(maskedSrc)) != null) {\n      maskedSrc = maskedSrc.slice(0, match.index) + '[' + repeatString('a', match[0].length - 2) + ']' + maskedSrc.slice(this.tokenizer.rules.inline.blockSkip.lastIndex);\n    }\n\n    // Mask out escaped em & strong delimiters\n    while ((match = this.tokenizer.rules.inline.escapedEmSt.exec(maskedSrc)) != null) {\n      maskedSrc = maskedSrc.slice(0, match.index + match[0].length - 2) + '++' + maskedSrc.slice(this.tokenizer.rules.inline.escapedEmSt.lastIndex);\n      this.tokenizer.rules.inline.escapedEmSt.lastIndex--;\n    }\n\n    while (src) {\n      if (!keepPrevChar) {\n        prevChar = '';\n      }\n      keepPrevChar = false;\n\n      // extensions\n      if (this.options.extensions\n        && this.options.extensions.inline\n        && this.options.extensions.inline.some((extTokenizer) => {\n          if (token = extTokenizer.call({ lexer: this }, src, tokens)) {\n            src = src.substring(token.raw.length);\n            tokens.push(token);\n            return true;\n          }\n          return false;\n        })) {\n        continue;\n      }\n\n      // escape\n      if (token = this.tokenizer.escape(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // tag\n      if (token = this.tokenizer.tag(src)) {\n        src = src.substring(token.raw.length);\n        lastToken = tokens[tokens.length - 1];\n        if (lastToken && token.type === 'text' && lastToken.type === 'text') {\n          lastToken.raw += token.raw;\n          lastToken.text += token.text;\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      // link\n      if (token = this.tokenizer.link(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // reflink, nolink\n      if (token = this.tokenizer.reflink(src, this.tokens.links)) {\n        src = src.substring(token.raw.length);\n        lastToken = tokens[tokens.length - 1];\n        if (lastToken && token.type === 'text' && lastToken.type === 'text') {\n          lastToken.raw += token.raw;\n          lastToken.text += token.text;\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      // em & strong\n      if (token = this.tokenizer.emStrong(src, maskedSrc, prevChar)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // code\n      if (token = this.tokenizer.codespan(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // br\n      if (token = this.tokenizer.br(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // del (gfm)\n      if (token = this.tokenizer.del(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // autolink\n      if (token = this.tokenizer.autolink(src, mangle)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // url (gfm)\n      if (!this.state.inLink && (token = this.tokenizer.url(src, mangle))) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // text\n      // prevent inlineText consuming extensions by clipping 'src' to extension start\n      cutSrc = src;\n      if (this.options.extensions && this.options.extensions.startInline) {\n        let startIndex = Infinity;\n        const tempSrc = src.slice(1);\n        let tempStart;\n        this.options.extensions.startInline.forEach(function(getStartIndex) {\n          tempStart = getStartIndex.call({ lexer: this }, tempSrc);\n          if (typeof tempStart === 'number' && tempStart >= 0) { startIndex = Math.min(startIndex, tempStart); }\n        });\n        if (startIndex < Infinity && startIndex >= 0) {\n          cutSrc = src.substring(0, startIndex + 1);\n        }\n      }\n      if (token = this.tokenizer.inlineText(cutSrc, smartypants)) {\n        src = src.substring(token.raw.length);\n        if (token.raw.slice(-1) !== '_') { // Track prevChar before string of ____ started\n          prevChar = token.raw.slice(-1);\n        }\n        keepPrevChar = true;\n        lastToken = tokens[tokens.length - 1];\n        if (lastToken && lastToken.type === 'text') {\n          lastToken.raw += token.raw;\n          lastToken.text += token.text;\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      if (src) {\n        const errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);\n        if (this.options.silent) {\n          console.error(errMsg);\n          break;\n        } else {\n          throw new Error(errMsg);\n        }\n      }\n    }\n\n    return tokens;\n  }\n}\n\n/**\n * Renderer\n */\nclass Renderer {\n  constructor(options) {\n    this.options = options || defaults;\n  }\n\n  code(code, infostring, escaped) {\n    const lang = (infostring || '').match(/\\S*/)[0];\n    if (this.options.highlight) {\n      const out = this.options.highlight(code, lang);\n      if (out != null && out !== code) {\n        escaped = true;\n        code = out;\n      }\n    }\n\n    code = code.replace(/\\n$/, '') + '\\n';\n\n    if (!lang) {\n      return '<pre><code>'\n        + (escaped ? code : escape(code, true))\n        + '</code></pre>\\n';\n    }\n\n    return '<pre><code class=\"'\n      + this.options.langPrefix\n      + escape(lang)\n      + '\">'\n      + (escaped ? code : escape(code, true))\n      + '</code></pre>\\n';\n  }\n\n  /**\n   * @param {string} quote\n   */\n  blockquote(quote) {\n    return `<blockquote>\\n${quote}</blockquote>\\n`;\n  }\n\n  html(html) {\n    return html;\n  }\n\n  /**\n   * @param {string} text\n   * @param {string} level\n   * @param {string} raw\n   * @param {any} slugger\n   */\n  heading(text, level, raw, slugger) {\n    if (this.options.headerIds) {\n      const id = this.options.headerPrefix + slugger.slug(raw);\n      return `<h${level} id=\"${id}\">${text}</h${level}>\\n`;\n    }\n\n    // ignore IDs\n    return `<h${level}>${text}</h${level}>\\n`;\n  }\n\n  hr() {\n    return this.options.xhtml ? '<hr/>\\n' : '<hr>\\n';\n  }\n\n  list(body, ordered, start) {\n    const type = ordered ? 'ol' : 'ul',\n      startatt = (ordered && start !== 1) ? (' start=\"' + start + '\"') : '';\n    return '<' + type + startatt + '>\\n' + body + '</' + type + '>\\n';\n  }\n\n  /**\n   * @param {string} text\n   */\n  listitem(text) {\n    return `<li>${text}</li>\\n`;\n  }\n\n  checkbox(checked) {\n    return '<input '\n      + (checked ? 'checked=\"\" ' : '')\n      + 'disabled=\"\" type=\"checkbox\"'\n      + (this.options.xhtml ? ' /' : '')\n      + '> ';\n  }\n\n  /**\n   * @param {string} text\n   */\n  paragraph(text) {\n    return `<p>${text}</p>\\n`;\n  }\n\n  /**\n   * @param {string} header\n   * @param {string} body\n   */\n  table(header, body) {\n    if (body) body = `<tbody>${body}</tbody>`;\n\n    return '<table>\\n'\n      + '<thead>\\n'\n      + header\n      + '</thead>\\n'\n      + body\n      + '</table>\\n';\n  }\n\n  /**\n   * @param {string} content\n   */\n  tablerow(content) {\n    return `<tr>\\n${content}</tr>\\n`;\n  }\n\n  tablecell(content, flags) {\n    const type = flags.header ? 'th' : 'td';\n    const tag = flags.align\n      ? `<${type} align=\"${flags.align}\">`\n      : `<${type}>`;\n    return tag + content + `</${type}>\\n`;\n  }\n\n  /**\n   * span level renderer\n   * @param {string} text\n   */\n  strong(text) {\n    return `<strong>${text}</strong>`;\n  }\n\n  /**\n   * @param {string} text\n   */\n  em(text) {\n    return `<em>${text}</em>`;\n  }\n\n  /**\n   * @param {string} text\n   */\n  codespan(text) {\n    return `<code>${text}</code>`;\n  }\n\n  br() {\n    return this.options.xhtml ? '<br/>' : '<br>';\n  }\n\n  /**\n   * @param {string} text\n   */\n  del(text) {\n    return `<del>${text}</del>`;\n  }\n\n  /**\n   * @param {string} href\n   * @param {string} title\n   * @param {string} text\n   */\n  link(href, title, text) {\n    href = cleanUrl(this.options.sanitize, this.options.baseUrl, href);\n    if (href === null) {\n      return text;\n    }\n    let out = '<a href=\"' + href + '\"';\n    if (title) {\n      out += ' title=\"' + title + '\"';\n    }\n    out += '>' + text + '</a>';\n    return out;\n  }\n\n  /**\n   * @param {string} href\n   * @param {string} title\n   * @param {string} text\n   */\n  image(href, title, text) {\n    href = cleanUrl(this.options.sanitize, this.options.baseUrl, href);\n    if (href === null) {\n      return text;\n    }\n\n    let out = `<img src=\"${href}\" alt=\"${text}\"`;\n    if (title) {\n      out += ` title=\"${title}\"`;\n    }\n    out += this.options.xhtml ? '/>' : '>';\n    return out;\n  }\n\n  text(text) {\n    return text;\n  }\n}\n\n/**\n * TextRenderer\n * returns only the textual part of the token\n */\nclass TextRenderer {\n  // no need for block level renderers\n  strong(text) {\n    return text;\n  }\n\n  em(text) {\n    return text;\n  }\n\n  codespan(text) {\n    return text;\n  }\n\n  del(text) {\n    return text;\n  }\n\n  html(text) {\n    return text;\n  }\n\n  text(text) {\n    return text;\n  }\n\n  link(href, title, text) {\n    return '' + text;\n  }\n\n  image(href, title, text) {\n    return '' + text;\n  }\n\n  br() {\n    return '';\n  }\n}\n\n/**\n * Slugger generates header id\n */\nclass Slugger {\n  constructor() {\n    this.seen = {};\n  }\n\n  /**\n   * @param {string} value\n   */\n  serialize(value) {\n    return value\n      .toLowerCase()\n      .trim()\n      // remove html tags\n      .replace(/<[!\\/a-z].*?>/ig, '')\n      // remove unwanted chars\n      .replace(/[\\u2000-\\u206F\\u2E00-\\u2E7F\\\\'!\"#$%&()*+,./:;<=>?@[\\]^`{|}~]/g, '')\n      .replace(/\\s/g, '-');\n  }\n\n  /**\n   * Finds the next safe (unique) slug to use\n   * @param {string} originalSlug\n   * @param {boolean} isDryRun\n   */\n  getNextSafeSlug(originalSlug, isDryRun) {\n    let slug = originalSlug;\n    let occurenceAccumulator = 0;\n    if (this.seen.hasOwnProperty(slug)) {\n      occurenceAccumulator = this.seen[originalSlug];\n      do {\n        occurenceAccumulator++;\n        slug = originalSlug + '-' + occurenceAccumulator;\n      } while (this.seen.hasOwnProperty(slug));\n    }\n    if (!isDryRun) {\n      this.seen[originalSlug] = occurenceAccumulator;\n      this.seen[slug] = 0;\n    }\n    return slug;\n  }\n\n  /**\n   * Convert string to unique id\n   * @param {object} [options]\n   * @param {boolean} [options.dryrun] Generates the next unique slug without\n   * updating the internal accumulator.\n   */\n  slug(value, options = {}) {\n    const slug = this.serialize(value);\n    return this.getNextSafeSlug(slug, options.dryrun);\n  }\n}\n\n/**\n * Parsing & Compiling\n */\nclass Parser {\n  constructor(options) {\n    this.options = options || defaults;\n    this.options.renderer = this.options.renderer || new Renderer();\n    this.renderer = this.options.renderer;\n    this.renderer.options = this.options;\n    this.textRenderer = new TextRenderer();\n    this.slugger = new Slugger();\n  }\n\n  /**\n   * Static Parse Method\n   */\n  static parse(tokens, options) {\n    const parser = new Parser(options);\n    return parser.parse(tokens);\n  }\n\n  /**\n   * Static Parse Inline Method\n   */\n  static parseInline(tokens, options) {\n    const parser = new Parser(options);\n    return parser.parseInline(tokens);\n  }\n\n  /**\n   * Parse Loop\n   */\n  parse(tokens, top = true) {\n    let out = '',\n      i,\n      j,\n      k,\n      l2,\n      l3,\n      row,\n      cell,\n      header,\n      body,\n      token,\n      ordered,\n      start,\n      loose,\n      itemBody,\n      item,\n      checked,\n      task,\n      checkbox,\n      ret;\n\n    const l = tokens.length;\n    for (i = 0; i < l; i++) {\n      token = tokens[i];\n\n      // Run any renderer extensions\n      if (this.options.extensions && this.options.extensions.renderers && this.options.extensions.renderers[token.type]) {\n        ret = this.options.extensions.renderers[token.type].call({ parser: this }, token);\n        if (ret !== false || !['space', 'hr', 'heading', 'code', 'table', 'blockquote', 'list', 'html', 'paragraph', 'text'].includes(token.type)) {\n          out += ret || '';\n          continue;\n        }\n      }\n\n      switch (token.type) {\n        case 'space': {\n          continue;\n        }\n        case 'hr': {\n          out += this.renderer.hr();\n          continue;\n        }\n        case 'heading': {\n          out += this.renderer.heading(\n            this.parseInline(token.tokens),\n            token.depth,\n            unescape(this.parseInline(token.tokens, this.textRenderer)),\n            this.slugger);\n          continue;\n        }\n        case 'code': {\n          out += this.renderer.code(token.text,\n            token.lang,\n            token.escaped);\n          continue;\n        }\n        case 'table': {\n          header = '';\n\n          // header\n          cell = '';\n          l2 = token.header.length;\n          for (j = 0; j < l2; j++) {\n            cell += this.renderer.tablecell(\n              this.parseInline(token.header[j].tokens),\n              { header: true, align: token.align[j] }\n            );\n          }\n          header += this.renderer.tablerow(cell);\n\n          body = '';\n          l2 = token.rows.length;\n          for (j = 0; j < l2; j++) {\n            row = token.rows[j];\n\n            cell = '';\n            l3 = row.length;\n            for (k = 0; k < l3; k++) {\n              cell += this.renderer.tablecell(\n                this.parseInline(row[k].tokens),\n                { header: false, align: token.align[k] }\n              );\n            }\n\n            body += this.renderer.tablerow(cell);\n          }\n          out += this.renderer.table(header, body);\n          continue;\n        }\n        case 'blockquote': {\n          body = this.parse(token.tokens);\n          out += this.renderer.blockquote(body);\n          continue;\n        }\n        case 'list': {\n          ordered = token.ordered;\n          start = token.start;\n          loose = token.loose;\n          l2 = token.items.length;\n\n          body = '';\n          for (j = 0; j < l2; j++) {\n            item = token.items[j];\n            checked = item.checked;\n            task = item.task;\n\n            itemBody = '';\n            if (item.task) {\n              checkbox = this.renderer.checkbox(checked);\n              if (loose) {\n                if (item.tokens.length > 0 && item.tokens[0].type === 'paragraph') {\n                  item.tokens[0].text = checkbox + ' ' + item.tokens[0].text;\n                  if (item.tokens[0].tokens && item.tokens[0].tokens.length > 0 && item.tokens[0].tokens[0].type === 'text') {\n                    item.tokens[0].tokens[0].text = checkbox + ' ' + item.tokens[0].tokens[0].text;\n                  }\n                } else {\n                  item.tokens.unshift({\n                    type: 'text',\n                    text: checkbox\n                  });\n                }\n              } else {\n                itemBody += checkbox;\n              }\n            }\n\n            itemBody += this.parse(item.tokens, loose);\n            body += this.renderer.listitem(itemBody, task, checked);\n          }\n\n          out += this.renderer.list(body, ordered, start);\n          continue;\n        }\n        case 'html': {\n          // TODO parse inline content if parameter markdown=1\n          out += this.renderer.html(token.text);\n          continue;\n        }\n        case 'paragraph': {\n          out += this.renderer.paragraph(this.parseInline(token.tokens));\n          continue;\n        }\n        case 'text': {\n          body = token.tokens ? this.parseInline(token.tokens) : token.text;\n          while (i + 1 < l && tokens[i + 1].type === 'text') {\n            token = tokens[++i];\n            body += '\\n' + (token.tokens ? this.parseInline(token.tokens) : token.text);\n          }\n          out += top ? this.renderer.paragraph(body) : body;\n          continue;\n        }\n\n        default: {\n          const errMsg = 'Token with \"' + token.type + '\" type was not found.';\n          if (this.options.silent) {\n            console.error(errMsg);\n            return;\n          } else {\n            throw new Error(errMsg);\n          }\n        }\n      }\n    }\n\n    return out;\n  }\n\n  /**\n   * Parse Inline Tokens\n   */\n  parseInline(tokens, renderer) {\n    renderer = renderer || this.renderer;\n    let out = '',\n      i,\n      token,\n      ret;\n\n    const l = tokens.length;\n    for (i = 0; i < l; i++) {\n      token = tokens[i];\n\n      // Run any renderer extensions\n      if (this.options.extensions && this.options.extensions.renderers && this.options.extensions.renderers[token.type]) {\n        ret = this.options.extensions.renderers[token.type].call({ parser: this }, token);\n        if (ret !== false || !['escape', 'html', 'link', 'image', 'strong', 'em', 'codespan', 'br', 'del', 'text'].includes(token.type)) {\n          out += ret || '';\n          continue;\n        }\n      }\n\n      switch (token.type) {\n        case 'escape': {\n          out += renderer.text(token.text);\n          break;\n        }\n        case 'html': {\n          out += renderer.html(token.text);\n          break;\n        }\n        case 'link': {\n          out += renderer.link(token.href, token.title, this.parseInline(token.tokens, renderer));\n          break;\n        }\n        case 'image': {\n          out += renderer.image(token.href, token.title, token.text);\n          break;\n        }\n        case 'strong': {\n          out += renderer.strong(this.parseInline(token.tokens, renderer));\n          break;\n        }\n        case 'em': {\n          out += renderer.em(this.parseInline(token.tokens, renderer));\n          break;\n        }\n        case 'codespan': {\n          out += renderer.codespan(token.text);\n          break;\n        }\n        case 'br': {\n          out += renderer.br();\n          break;\n        }\n        case 'del': {\n          out += renderer.del(this.parseInline(token.tokens, renderer));\n          break;\n        }\n        case 'text': {\n          out += renderer.text(token.text);\n          break;\n        }\n        default: {\n          const errMsg = 'Token with \"' + token.type + '\" type was not found.';\n          if (this.options.silent) {\n            console.error(errMsg);\n            return;\n          } else {\n            throw new Error(errMsg);\n          }\n        }\n      }\n    }\n    return out;\n  }\n}\n\n/**\n * Marked\n */\nfunction marked(src, opt, callback) {\n  // throw error in case of non string input\n  if (typeof src === 'undefined' || src === null) {\n    throw new Error('marked(): input parameter is undefined or null');\n  }\n  if (typeof src !== 'string') {\n    throw new Error('marked(): input parameter is of type '\n      + Object.prototype.toString.call(src) + ', string expected');\n  }\n\n  if (typeof opt === 'function') {\n    callback = opt;\n    opt = null;\n  }\n\n  opt = merge({}, marked.defaults, opt || {});\n  checkSanitizeDeprecation(opt);\n\n  if (callback) {\n    const highlight = opt.highlight;\n    let tokens;\n\n    try {\n      tokens = Lexer.lex(src, opt);\n    } catch (e) {\n      return callback(e);\n    }\n\n    const done = function(err) {\n      let out;\n\n      if (!err) {\n        try {\n          if (opt.walkTokens) {\n            marked.walkTokens(tokens, opt.walkTokens);\n          }\n          out = Parser.parse(tokens, opt);\n        } catch (e) {\n          err = e;\n        }\n      }\n\n      opt.highlight = highlight;\n\n      return err\n        ? callback(err)\n        : callback(null, out);\n    };\n\n    if (!highlight || highlight.length < 3) {\n      return done();\n    }\n\n    delete opt.highlight;\n\n    if (!tokens.length) return done();\n\n    let pending = 0;\n    marked.walkTokens(tokens, function(token) {\n      if (token.type === 'code') {\n        pending++;\n        setTimeout(() => {\n          highlight(token.text, token.lang, function(err, code) {\n            if (err) {\n              return done(err);\n            }\n            if (code != null && code !== token.text) {\n              token.text = code;\n              token.escaped = true;\n            }\n\n            pending--;\n            if (pending === 0) {\n              done();\n            }\n          });\n        }, 0);\n      }\n    });\n\n    if (pending === 0) {\n      done();\n    }\n\n    return;\n  }\n\n  function onError(e) {\n    e.message += '\\nPlease report this to https://github.com/markedjs/marked.';\n    if (opt.silent) {\n      return '<p>An error occurred:</p><pre>'\n        + escape(e.message + '', true)\n        + '</pre>';\n    }\n    throw e;\n  }\n\n  try {\n    const tokens = Lexer.lex(src, opt);\n    if (opt.walkTokens) {\n      if (opt.async) {\n        return Promise.all(marked.walkTokens(tokens, opt.walkTokens))\n          .then(() => {\n            return Parser.parse(tokens, opt);\n          })\n          .catch(onError);\n      }\n      marked.walkTokens(tokens, opt.walkTokens);\n    }\n    return Parser.parse(tokens, opt);\n  } catch (e) {\n    onError(e);\n  }\n}\n\n/**\n * Options\n */\n\nmarked.options =\nmarked.setOptions = function(opt) {\n  merge(marked.defaults, opt);\n  changeDefaults(marked.defaults);\n  return marked;\n};\n\nmarked.getDefaults = getDefaults;\n\nmarked.defaults = defaults;\n\n/**\n * Use Extension\n */\n\nmarked.use = function(...args) {\n  const extensions = marked.defaults.extensions || { renderers: {}, childTokens: {} };\n\n  args.forEach((pack) => {\n    // copy options to new object\n    const opts = merge({}, pack);\n\n    // set async to true if it was set to true before\n    opts.async = marked.defaults.async || opts.async;\n\n    // ==-- Parse \"addon\" extensions --== //\n    if (pack.extensions) {\n      pack.extensions.forEach((ext) => {\n        if (!ext.name) {\n          throw new Error('extension name required');\n        }\n        if (ext.renderer) { // Renderer extensions\n          const prevRenderer = extensions.renderers[ext.name];\n          if (prevRenderer) {\n            // Replace extension with func to run new extension but fall back if false\n            extensions.renderers[ext.name] = function(...args) {\n              let ret = ext.renderer.apply(this, args);\n              if (ret === false) {\n                ret = prevRenderer.apply(this, args);\n              }\n              return ret;\n            };\n          } else {\n            extensions.renderers[ext.name] = ext.renderer;\n          }\n        }\n        if (ext.tokenizer) { // Tokenizer Extensions\n          if (!ext.level || (ext.level !== 'block' && ext.level !== 'inline')) {\n            throw new Error(\"extension level must be 'block' or 'inline'\");\n          }\n          if (extensions[ext.level]) {\n            extensions[ext.level].unshift(ext.tokenizer);\n          } else {\n            extensions[ext.level] = [ext.tokenizer];\n          }\n          if (ext.start) { // Function to check for start of token\n            if (ext.level === 'block') {\n              if (extensions.startBlock) {\n                extensions.startBlock.push(ext.start);\n              } else {\n                extensions.startBlock = [ext.start];\n              }\n            } else if (ext.level === 'inline') {\n              if (extensions.startInline) {\n                extensions.startInline.push(ext.start);\n              } else {\n                extensions.startInline = [ext.start];\n              }\n            }\n          }\n        }\n        if (ext.childTokens) { // Child tokens to be visited by walkTokens\n          extensions.childTokens[ext.name] = ext.childTokens;\n        }\n      });\n      opts.extensions = extensions;\n    }\n\n    // ==-- Parse \"overwrite\" extensions --== //\n    if (pack.renderer) {\n      const renderer = marked.defaults.renderer || new Renderer();\n      for (const prop in pack.renderer) {\n        const prevRenderer = renderer[prop];\n        // Replace renderer with func to run extension, but fall back if false\n        renderer[prop] = (...args) => {\n          let ret = pack.renderer[prop].apply(renderer, args);\n          if (ret === false) {\n            ret = prevRenderer.apply(renderer, args);\n          }\n          return ret;\n        };\n      }\n      opts.renderer = renderer;\n    }\n    if (pack.tokenizer) {\n      const tokenizer = marked.defaults.tokenizer || new Tokenizer();\n      for (const prop in pack.tokenizer) {\n        const prevTokenizer = tokenizer[prop];\n        // Replace tokenizer with func to run extension, but fall back if false\n        tokenizer[prop] = (...args) => {\n          let ret = pack.tokenizer[prop].apply(tokenizer, args);\n          if (ret === false) {\n            ret = prevTokenizer.apply(tokenizer, args);\n          }\n          return ret;\n        };\n      }\n      opts.tokenizer = tokenizer;\n    }\n\n    // ==-- Parse WalkTokens extensions --== //\n    if (pack.walkTokens) {\n      const walkTokens = marked.defaults.walkTokens;\n      opts.walkTokens = function(token) {\n        let values = [];\n        values.push(pack.walkTokens.call(this, token));\n        if (walkTokens) {\n          values = values.concat(walkTokens.call(this, token));\n        }\n        return values;\n      };\n    }\n\n    marked.setOptions(opts);\n  });\n};\n\n/**\n * Run callback for every token\n */\n\nmarked.walkTokens = function(tokens, callback) {\n  let values = [];\n  for (const token of tokens) {\n    values = values.concat(callback.call(marked, token));\n    switch (token.type) {\n      case 'table': {\n        for (const cell of token.header) {\n          values = values.concat(marked.walkTokens(cell.tokens, callback));\n        }\n        for (const row of token.rows) {\n          for (const cell of row) {\n            values = values.concat(marked.walkTokens(cell.tokens, callback));\n          }\n        }\n        break;\n      }\n      case 'list': {\n        values = values.concat(marked.walkTokens(token.items, callback));\n        break;\n      }\n      default: {\n        if (marked.defaults.extensions && marked.defaults.extensions.childTokens && marked.defaults.extensions.childTokens[token.type]) { // Walk any extensions\n          marked.defaults.extensions.childTokens[token.type].forEach(function(childTokens) {\n            values = values.concat(marked.walkTokens(token[childTokens], callback));\n          });\n        } else if (token.tokens) {\n          values = values.concat(marked.walkTokens(token.tokens, callback));\n        }\n      }\n    }\n  }\n  return values;\n};\n\n/**\n * Parse Inline\n * @param {string} src\n */\nmarked.parseInline = function(src, opt) {\n  // throw error in case of non string input\n  if (typeof src === 'undefined' || src === null) {\n    throw new Error('marked.parseInline(): input parameter is undefined or null');\n  }\n  if (typeof src !== 'string') {\n    throw new Error('marked.parseInline(): input parameter is of type '\n      + Object.prototype.toString.call(src) + ', string expected');\n  }\n\n  opt = merge({}, marked.defaults, opt || {});\n  checkSanitizeDeprecation(opt);\n\n  try {\n    const tokens = Lexer.lexInline(src, opt);\n    if (opt.walkTokens) {\n      marked.walkTokens(tokens, opt.walkTokens);\n    }\n    return Parser.parseInline(tokens, opt);\n  } catch (e) {\n    e.message += '\\nPlease report this to https://github.com/markedjs/marked.';\n    if (opt.silent) {\n      return '<p>An error occurred:</p><pre>'\n        + escape(e.message + '', true)\n        + '</pre>';\n    }\n    throw e;\n  }\n};\n\n/**\n * Expose\n */\nmarked.Parser = Parser;\nmarked.parser = Parser.parse;\nmarked.Renderer = Renderer;\nmarked.TextRenderer = TextRenderer;\nmarked.Lexer = Lexer;\nmarked.lexer = Lexer.lex;\nmarked.Tokenizer = Tokenizer;\nmarked.Slugger = Slugger;\nmarked.parse = marked;\n\nconst options = marked.options;\nconst setOptions = marked.setOptions;\nconst use = marked.use;\nconst walkTokens = marked.walkTokens;\nconst parseInline = marked.parseInline;\nconst parse = marked;\nconst parser = Parser.parse;\nconst lexer = Lexer.lex;\n\nexport { Lexer, Parser, Renderer, Slugger, TextRenderer, Tokenizer, defaults, getDefaults, lexer, marked, options, parse, parseInline, parser, setOptions, use, walkTokens };\n"],"mappings":";;;;AAAA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,SAASA,WAAW,GAAG;EACrB,OAAO;IACLC,KAAK,EAAE,KAAK;IACZC,OAAO,EAAE,IAAI;IACbC,MAAM,EAAE,KAAK;IACbC,UAAU,EAAE,IAAI;IAChBC,GAAG,EAAE,IAAI;IACTC,SAAS,EAAE,IAAI;IACfC,YAAY,EAAE,EAAE;IAChBC,SAAS,EAAE,IAAI;IACfC,UAAU,EAAE,WAAW;IACvBC,MAAM,EAAE,IAAI;IACZC,QAAQ,EAAE,KAAK;IACfC,QAAQ,EAAE,IAAI;IACdC,QAAQ,EAAE,KAAK;IACfC,SAAS,EAAE,IAAI;IACfC,MAAM,EAAE,KAAK;IACbC,WAAW,EAAE,KAAK;IAClBC,SAAS,EAAE,IAAI;IACfC,UAAU,EAAE,IAAI;IAChBC,KAAK,EAAE;EACT,CAAC;AACH;AAEA,IAAIC,QAAQ,GAAGpB,WAAW,EAAE;AAE5B,SAASqB,cAAc,CAACC,WAAW,EAAE;EACnCF,QAAQ,GAAGE,WAAW;AACxB;;AAEA;AACA;AACA;AACA,IAAMC,UAAU,GAAG,SAAS;AAC5B,IAAMC,aAAa,GAAG,IAAIC,MAAM,CAACF,UAAU,CAACG,MAAM,EAAE,GAAG,CAAC;AACxD,IAAMC,kBAAkB,GAAG,mDAAmD;AAC9E,IAAMC,qBAAqB,GAAG,IAAIH,MAAM,CAACE,kBAAkB,CAACD,MAAM,EAAE,GAAG,CAAC;AACxE,IAAMG,kBAAkB,GAAG;EACzB,GAAG,EAAE,OAAO;EACZ,GAAG,EAAE,MAAM;EACX,GAAG,EAAE,MAAM;EACX,GAAG,EAAE,QAAQ;EACb,GAAG,EAAE;AACP,CAAC;AACD,IAAMC,oBAAoB,GAAG,SAAvBA,oBAAoB,CAAIC,EAAE;EAAA,OAAKF,kBAAkB,CAACE,EAAE,CAAC;AAAA;AAC3D,SAASC,OAAM,CAACC,IAAI,EAAEC,MAAM,EAAE;EAC5B,IAAIA,MAAM,EAAE;IACV,IAAIX,UAAU,CAACY,IAAI,CAACF,IAAI,CAAC,EAAE;MACzB,OAAOA,IAAI,CAACG,OAAO,CAACZ,aAAa,EAAEM,oBAAoB,CAAC;IAC1D;EACF,CAAC,MAAM;IACL,IAAIH,kBAAkB,CAACQ,IAAI,CAACF,IAAI,CAAC,EAAE;MACjC,OAAOA,IAAI,CAACG,OAAO,CAACR,qBAAqB,EAAEE,oBAAoB,CAAC;IAClE;EACF;EAEA,OAAOG,IAAI;AACb;AAEA,IAAMI,YAAY,GAAG,4CAA4C;;AAEjE;AACA;AACA;AACA,SAASC,QAAQ,CAACL,IAAI,EAAE;EACtB;EACA,OAAOA,IAAI,CAACG,OAAO,CAACC,YAAY,EAAE,UAACE,CAAC,EAAEC,CAAC,EAAK;IAC1CA,CAAC,GAAGA,CAAC,CAACC,WAAW,EAAE;IACnB,IAAID,CAAC,KAAK,OAAO,EAAE,OAAO,GAAG;IAC7B,IAAIA,CAAC,CAACE,MAAM,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;MACvB,OAAOF,CAAC,CAACE,MAAM,CAAC,CAAC,CAAC,KAAK,GAAG,GACtBC,MAAM,CAACC,YAAY,CAACC,QAAQ,CAACL,CAAC,CAACM,SAAS,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,GACjDH,MAAM,CAACC,YAAY,CAAC,CAACJ,CAAC,CAACM,SAAS,CAAC,CAAC,CAAC,CAAC;IAC1C;IACA,OAAO,EAAE;EACX,CAAC,CAAC;AACJ;AAEA,IAAMC,KAAK,GAAG,cAAc;;AAE5B;AACA;AACA;AACA;AACA,SAASC,IAAI,CAACC,KAAK,EAAEC,GAAG,EAAE;EACxBD,KAAK,GAAG,OAAOA,KAAK,KAAK,QAAQ,GAAGA,KAAK,GAAGA,KAAK,CAACvB,MAAM;EACxDwB,GAAG,GAAGA,GAAG,IAAI,EAAE;EACf,IAAMC,GAAG,GAAG;IACVf,OAAO,EAAE,iBAACgB,IAAI,EAAEC,GAAG,EAAK;MACtBA,GAAG,GAAGA,GAAG,CAAC3B,MAAM,IAAI2B,GAAG;MACvBA,GAAG,GAAGA,GAAG,CAACjB,OAAO,CAACW,KAAK,EAAE,IAAI,CAAC;MAC9BE,KAAK,GAAGA,KAAK,CAACb,OAAO,CAACgB,IAAI,EAAEC,GAAG,CAAC;MAChC,OAAOF,GAAG;IACZ,CAAC;IACDG,QAAQ,EAAE,oBAAM;MACd,OAAO,IAAI7B,MAAM,CAACwB,KAAK,EAAEC,GAAG,CAAC;IAC/B;EACF,CAAC;EACD,OAAOC,GAAG;AACZ;AAEA,IAAMI,mBAAmB,GAAG,SAAS;AACrC,IAAMC,oBAAoB,GAAG,+BAA+B;;AAE5D;AACA;AACA;AACA;AACA;AACA,SAASC,QAAQ,CAAC5C,QAAQ,EAAE6C,IAAI,EAAEC,IAAI,EAAE;EACtC,IAAI9C,QAAQ,EAAE;IACZ,IAAI+C,IAAI;IACR,IAAI;MACFA,IAAI,GAAGC,kBAAkB,CAACvB,QAAQ,CAACqB,IAAI,CAAC,CAAC,CACtCvB,OAAO,CAACmB,mBAAmB,EAAE,EAAE,CAAC,CAChCd,WAAW,EAAE;IAClB,CAAC,CAAC,OAAOqB,CAAC,EAAE;MACV,OAAO,IAAI;IACb;IACA,IAAIF,IAAI,CAACG,OAAO,CAAC,aAAa,CAAC,KAAK,CAAC,IAAIH,IAAI,CAACG,OAAO,CAAC,WAAW,CAAC,KAAK,CAAC,IAAIH,IAAI,CAACG,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;MACvG,OAAO,IAAI;IACb;EACF;EACA,IAAIL,IAAI,IAAI,CAACF,oBAAoB,CAACrB,IAAI,CAACwB,IAAI,CAAC,EAAE;IAC5CA,IAAI,GAAGK,UAAU,CAACN,IAAI,EAAEC,IAAI,CAAC;EAC/B;EACA,IAAI;IACFA,IAAI,GAAGM,SAAS,CAACN,IAAI,CAAC,CAACvB,OAAO,CAAC,MAAM,EAAE,GAAG,CAAC;EAC7C,CAAC,CAAC,OAAO0B,CAAC,EAAE;IACV,OAAO,IAAI;EACb;EACA,OAAOH,IAAI;AACb;AAEA,IAAMO,QAAQ,GAAG,CAAC,CAAC;AACnB,IAAMC,UAAU,GAAG,kBAAkB;AACrC,IAAMC,QAAQ,GAAG,mBAAmB;AACpC,IAAMC,MAAM,GAAG,2BAA2B;;AAE1C;AACA;AACA;AACA;AACA,SAASL,UAAU,CAACN,IAAI,EAAEC,IAAI,EAAE;EAC9B,IAAI,CAACO,QAAQ,CAAC,GAAG,GAAGR,IAAI,CAAC,EAAE;IACzB;IACA;IACA;IACA,IAAIS,UAAU,CAAChC,IAAI,CAACuB,IAAI,CAAC,EAAE;MACzBQ,QAAQ,CAAC,GAAG,GAAGR,IAAI,CAAC,GAAGA,IAAI,GAAG,GAAG;IACnC,CAAC,MAAM;MACLQ,QAAQ,CAAC,GAAG,GAAGR,IAAI,CAAC,GAAGY,KAAK,CAACZ,IAAI,EAAE,GAAG,EAAE,IAAI,CAAC;IAC/C;EACF;EACAA,IAAI,GAAGQ,QAAQ,CAAC,GAAG,GAAGR,IAAI,CAAC;EAC3B,IAAMa,YAAY,GAAGb,IAAI,CAACK,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;EAE7C,IAAIJ,IAAI,CAACb,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK,IAAI,EAAE;IACjC,IAAIyB,YAAY,EAAE;MAChB,OAAOZ,IAAI;IACb;IACA,OAAOD,IAAI,CAACtB,OAAO,CAACgC,QAAQ,EAAE,IAAI,CAAC,GAAGT,IAAI;EAC5C,CAAC,MAAM,IAAIA,IAAI,CAACjB,MAAM,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;IACjC,IAAI6B,YAAY,EAAE;MAChB,OAAOZ,IAAI;IACb;IACA,OAAOD,IAAI,CAACtB,OAAO,CAACiC,MAAM,EAAE,IAAI,CAAC,GAAGV,IAAI;EAC1C,CAAC,MAAM;IACL,OAAOD,IAAI,GAAGC,IAAI;EACpB;AACF;AAEA,IAAMa,QAAQ,GAAG;EAAEC,IAAI,EAAE,SAASD,QAAQ,GAAG,CAAC;AAAE,CAAC;AAEjD,SAASE,KAAK,CAACvB,GAAG,EAAE;EAClB,IAAIwB,CAAC,GAAG,CAAC;IACPC,MAAM;IACNC,GAAG;EAEL,OAAOF,CAAC,GAAGG,SAAS,CAACC,MAAM,EAAEJ,CAAC,EAAE,EAAE;IAChCC,MAAM,GAAGE,SAAS,CAACH,CAAC,CAAC;IACrB,KAAKE,GAAG,IAAID,MAAM,EAAE;MAClB,IAAII,MAAM,CAACC,SAAS,CAACC,cAAc,CAACC,IAAI,CAACP,MAAM,EAAEC,GAAG,CAAC,EAAE;QACrD1B,GAAG,CAAC0B,GAAG,CAAC,GAAGD,MAAM,CAACC,GAAG,CAAC;MACxB;IACF;EACF;EAEA,OAAO1B,GAAG;AACZ;AAEA,SAASiC,UAAU,CAACC,QAAQ,EAAEC,KAAK,EAAE;EACnC;EACA;EACA,IAAMC,GAAG,GAAGF,QAAQ,CAACjD,OAAO,CAAC,KAAK,EAAE,UAACoD,KAAK,EAAEC,MAAM,EAAEC,GAAG,EAAK;MACxD,IAAIC,OAAO,GAAG,KAAK;QACjBC,IAAI,GAAGH,MAAM;MACf,OAAO,EAAEG,IAAI,IAAI,CAAC,IAAIF,GAAG,CAACE,IAAI,CAAC,KAAK,IAAI,EAAED,OAAO,GAAG,CAACA,OAAO;MAC5D,IAAIA,OAAO,EAAE;QACX;QACA;QACA,OAAO,GAAG;MACZ,CAAC,MAAM;QACL;QACA,OAAO,IAAI;MACb;IACF,CAAC,CAAC;IACFE,KAAK,GAAGN,GAAG,CAACO,KAAK,CAAC,KAAK,CAAC;EAC1B,IAAInB,CAAC,GAAG,CAAC;;EAET;EACA,IAAI,CAACkB,KAAK,CAAC,CAAC,CAAC,CAACE,IAAI,EAAE,EAAE;IAAEF,KAAK,CAACG,KAAK,EAAE;EAAE;EACvC,IAAIH,KAAK,CAACd,MAAM,GAAG,CAAC,IAAI,CAACc,KAAK,CAACA,KAAK,CAACd,MAAM,GAAG,CAAC,CAAC,CAACgB,IAAI,EAAE,EAAE;IAAEF,KAAK,CAACI,GAAG,EAAE;EAAE;EAExE,IAAIJ,KAAK,CAACd,MAAM,GAAGO,KAAK,EAAE;IACxBO,KAAK,CAACK,MAAM,CAACZ,KAAK,CAAC;EACrB,CAAC,MAAM;IACL,OAAOO,KAAK,CAACd,MAAM,GAAGO,KAAK,EAAEO,KAAK,CAACM,IAAI,CAAC,EAAE,CAAC;EAC7C;EAEA,OAAOxB,CAAC,GAAGkB,KAAK,CAACd,MAAM,EAAEJ,CAAC,EAAE,EAAE;IAC5B;IACAkB,KAAK,CAAClB,CAAC,CAAC,GAAGkB,KAAK,CAAClB,CAAC,CAAC,CAACoB,IAAI,EAAE,CAAC3D,OAAO,CAAC,OAAO,EAAE,GAAG,CAAC;EAClD;EACA,OAAOyD,KAAK;AACd;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASvB,KAAK,CAACoB,GAAG,EAAEU,CAAC,EAAEC,MAAM,EAAE;EAC7B,IAAMC,CAAC,GAAGZ,GAAG,CAACX,MAAM;EACpB,IAAIuB,CAAC,KAAK,CAAC,EAAE;IACX,OAAO,EAAE;EACX;;EAEA;EACA,IAAIC,OAAO,GAAG,CAAC;;EAEf;EACA,OAAOA,OAAO,GAAGD,CAAC,EAAE;IAClB,IAAME,QAAQ,GAAGd,GAAG,CAAChD,MAAM,CAAC4D,CAAC,GAAGC,OAAO,GAAG,CAAC,CAAC;IAC5C,IAAIC,QAAQ,KAAKJ,CAAC,IAAI,CAACC,MAAM,EAAE;MAC7BE,OAAO,EAAE;IACX,CAAC,MAAM,IAAIC,QAAQ,KAAKJ,CAAC,IAAIC,MAAM,EAAE;MACnCE,OAAO,EAAE;IACX,CAAC,MAAM;MACL;IACF;EACF;EAEA,OAAOb,GAAG,CAACe,KAAK,CAAC,CAAC,EAAEH,CAAC,GAAGC,OAAO,CAAC;AAClC;AAEA,SAASG,kBAAkB,CAAChB,GAAG,EAAEiB,CAAC,EAAE;EAClC,IAAIjB,GAAG,CAAC3B,OAAO,CAAC4C,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE;IAC5B,OAAO,CAAC,CAAC;EACX;EACA,IAAML,CAAC,GAAGZ,GAAG,CAACX,MAAM;EACpB,IAAI6B,KAAK,GAAG,CAAC;IACXjC,CAAC,GAAG,CAAC;EACP,OAAOA,CAAC,GAAG2B,CAAC,EAAE3B,CAAC,EAAE,EAAE;IACjB,IAAIe,GAAG,CAACf,CAAC,CAAC,KAAK,IAAI,EAAE;MACnBA,CAAC,EAAE;IACL,CAAC,MAAM,IAAIe,GAAG,CAACf,CAAC,CAAC,KAAKgC,CAAC,CAAC,CAAC,CAAC,EAAE;MAC1BC,KAAK,EAAE;IACT,CAAC,MAAM,IAAIlB,GAAG,CAACf,CAAC,CAAC,KAAKgC,CAAC,CAAC,CAAC,CAAC,EAAE;MAC1BC,KAAK,EAAE;MACP,IAAIA,KAAK,GAAG,CAAC,EAAE;QACb,OAAOjC,CAAC;MACV;IACF;EACF;EACA,OAAO,CAAC,CAAC;AACX;AAEA,SAASkC,wBAAwB,CAAC3D,GAAG,EAAE;EACrC,IAAIA,GAAG,IAAIA,GAAG,CAACrC,QAAQ,IAAI,CAACqC,GAAG,CAACnC,MAAM,EAAE;IACtC+F,OAAO,CAACC,IAAI,CAAC,yMAAyM,CAAC;EACzN;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA,SAASC,YAAY,CAACC,OAAO,EAAE3B,KAAK,EAAE;EACpC,IAAIA,KAAK,GAAG,CAAC,EAAE;IACb,OAAO,EAAE;EACX;EACA,IAAI4B,MAAM,GAAG,EAAE;EACf,OAAO5B,KAAK,GAAG,CAAC,EAAE;IAChB,IAAIA,KAAK,GAAG,CAAC,EAAE;MACb4B,MAAM,IAAID,OAAO;IACnB;IACA3B,KAAK,KAAK,CAAC;IACX2B,OAAO,IAAIA,OAAO;EACpB;EACA,OAAOC,MAAM,GAAGD,OAAO;AACzB;AAEA,SAASE,UAAU,CAACC,GAAG,EAAEC,IAAI,EAAEC,GAAG,EAAEC,KAAK,EAAE;EACzC,IAAM5D,IAAI,GAAG0D,IAAI,CAAC1D,IAAI;EACtB,IAAM6D,KAAK,GAAGH,IAAI,CAACG,KAAK,GAAGxF,OAAM,CAACqF,IAAI,CAACG,KAAK,CAAC,GAAG,IAAI;EACpD,IAAMC,IAAI,GAAGL,GAAG,CAAC,CAAC,CAAC,CAAChF,OAAO,CAAC,aAAa,EAAE,IAAI,CAAC;EAEhD,IAAIgF,GAAG,CAAC,CAAC,CAAC,CAAC1E,MAAM,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;IAC5B6E,KAAK,CAACG,KAAK,CAACC,MAAM,GAAG,IAAI;IACzB,IAAMC,KAAK,GAAG;MACZC,IAAI,EAAE,MAAM;MACZP,GAAG,EAAHA,GAAG;MACH3D,IAAI,EAAJA,IAAI;MACJ6D,KAAK,EAALA,KAAK;MACLC,IAAI,EAAJA,IAAI;MACJK,MAAM,EAAEP,KAAK,CAACQ,YAAY,CAACN,IAAI;IACjC,CAAC;IACDF,KAAK,CAACG,KAAK,CAACC,MAAM,GAAG,KAAK;IAC1B,OAAOC,KAAK;EACd;EACA,OAAO;IACLC,IAAI,EAAE,OAAO;IACbP,GAAG,EAAHA,GAAG;IACH3D,IAAI,EAAJA,IAAI;IACJ6D,KAAK,EAALA,KAAK;IACLC,IAAI,EAAEzF,OAAM,CAACyF,IAAI;EACnB,CAAC;AACH;AAEA,SAASO,sBAAsB,CAACV,GAAG,EAAEG,IAAI,EAAE;EACzC,IAAMQ,iBAAiB,GAAGX,GAAG,CAAC9B,KAAK,CAAC,eAAe,CAAC;EAEpD,IAAIyC,iBAAiB,KAAK,IAAI,EAAE;IAC9B,OAAOR,IAAI;EACb;EAEA,IAAMS,YAAY,GAAGD,iBAAiB,CAAC,CAAC,CAAC;EAEzC,OAAOR,IAAI,CACR3B,KAAK,CAAC,IAAI,CAAC,CACXqC,GAAG,CAAC,UAAAC,IAAI,EAAI;IACX,IAAMC,iBAAiB,GAAGD,IAAI,CAAC5C,KAAK,CAAC,MAAM,CAAC;IAC5C,IAAI6C,iBAAiB,KAAK,IAAI,EAAE;MAC9B,OAAOD,IAAI;IACb;IAEA,wCAAuBC,iBAAiB;MAAjCC,YAAY;IAEnB,IAAIA,YAAY,CAACvD,MAAM,IAAImD,YAAY,CAACnD,MAAM,EAAE;MAC9C,OAAOqD,IAAI,CAAC3B,KAAK,CAACyB,YAAY,CAACnD,MAAM,CAAC;IACxC;IAEA,OAAOqD,IAAI;EACb,CAAC,CAAC,CACDG,IAAI,CAAC,IAAI,CAAC;AACf;;AAEA;AACA;AACA;AAFA,IAGMC,SAAS;EACb,mBAAYC,OAAO,EAAE;IAAA;IACnB,IAAI,CAACA,OAAO,GAAGA,OAAO,IAAIrH,QAAQ;EACpC;EAAC;IAAA;IAAA,OAED,eAAMsH,GAAG,EAAE;MACT,IAAMtB,GAAG,GAAG,IAAI,CAACuB,KAAK,CAACC,KAAK,CAACC,OAAO,CAACpE,IAAI,CAACiE,GAAG,CAAC;MAC9C,IAAItB,GAAG,IAAIA,GAAG,CAAC,CAAC,CAAC,CAACrC,MAAM,GAAG,CAAC,EAAE;QAC5B,OAAO;UACL8C,IAAI,EAAE,OAAO;UACbP,GAAG,EAAEF,GAAG,CAAC,CAAC;QACZ,CAAC;MACH;IACF;EAAC;IAAA;IAAA,OAED,cAAKsB,GAAG,EAAE;MACR,IAAMtB,GAAG,GAAG,IAAI,CAACuB,KAAK,CAACC,KAAK,CAACE,IAAI,CAACrE,IAAI,CAACiE,GAAG,CAAC;MAC3C,IAAItB,GAAG,EAAE;QACP,IAAMK,IAAI,GAAGL,GAAG,CAAC,CAAC,CAAC,CAAChF,OAAO,CAAC,WAAW,EAAE,EAAE,CAAC;QAC5C,OAAO;UACLyF,IAAI,EAAE,MAAM;UACZP,GAAG,EAAEF,GAAG,CAAC,CAAC,CAAC;UACX2B,cAAc,EAAE,UAAU;UAC1BtB,IAAI,EAAE,CAAC,IAAI,CAACgB,OAAO,CAAC9H,QAAQ,GACxB2D,KAAK,CAACmD,IAAI,EAAE,IAAI,CAAC,GACjBA;QACN,CAAC;MACH;IACF;EAAC;IAAA;IAAA,OAED,gBAAOiB,GAAG,EAAE;MACV,IAAMtB,GAAG,GAAG,IAAI,CAACuB,KAAK,CAACC,KAAK,CAACI,MAAM,CAACvE,IAAI,CAACiE,GAAG,CAAC;MAC7C,IAAItB,GAAG,EAAE;QACP,IAAME,GAAG,GAAGF,GAAG,CAAC,CAAC,CAAC;QAClB,IAAMK,IAAI,GAAGO,sBAAsB,CAACV,GAAG,EAAEF,GAAG,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC;QAEtD,OAAO;UACLS,IAAI,EAAE,MAAM;UACZP,GAAG,EAAHA,GAAG;UACH2B,IAAI,EAAE7B,GAAG,CAAC,CAAC,CAAC,GAAGA,GAAG,CAAC,CAAC,CAAC,CAACrB,IAAI,EAAE,CAAC3D,OAAO,CAAC,IAAI,CAACuG,KAAK,CAACO,MAAM,CAACC,QAAQ,EAAE,IAAI,CAAC,GAAG/B,GAAG,CAAC,CAAC,CAAC;UAC/EK,IAAI,EAAJA;QACF,CAAC;MACH;IACF;EAAC;IAAA;IAAA,OAED,iBAAQiB,GAAG,EAAE;MACX,IAAMtB,GAAG,GAAG,IAAI,CAACuB,KAAK,CAACC,KAAK,CAACQ,OAAO,CAAC3E,IAAI,CAACiE,GAAG,CAAC;MAC9C,IAAItB,GAAG,EAAE;QACP,IAAIK,IAAI,GAAGL,GAAG,CAAC,CAAC,CAAC,CAACrB,IAAI,EAAE;;QAExB;QACA,IAAI,IAAI,CAAC5D,IAAI,CAACsF,IAAI,CAAC,EAAE;UACnB,IAAM4B,OAAO,GAAG/E,KAAK,CAACmD,IAAI,EAAE,GAAG,CAAC;UAChC,IAAI,IAAI,CAACgB,OAAO,CAAC9H,QAAQ,EAAE;YACzB8G,IAAI,GAAG4B,OAAO,CAACtD,IAAI,EAAE;UACvB,CAAC,MAAM,IAAI,CAACsD,OAAO,IAAI,IAAI,CAAClH,IAAI,CAACkH,OAAO,CAAC,EAAE;YACzC;YACA5B,IAAI,GAAG4B,OAAO,CAACtD,IAAI,EAAE;UACvB;QACF;QAEA,OAAO;UACL8B,IAAI,EAAE,SAAS;UACfP,GAAG,EAAEF,GAAG,CAAC,CAAC,CAAC;UACXkC,KAAK,EAAElC,GAAG,CAAC,CAAC,CAAC,CAACrC,MAAM;UACpB0C,IAAI,EAAJA,IAAI;UACJK,MAAM,EAAE,IAAI,CAACP,KAAK,CAAC2B,MAAM,CAACzB,IAAI;QAChC,CAAC;MACH;IACF;EAAC;IAAA;IAAA,OAED,YAAGiB,GAAG,EAAE;MACN,IAAMtB,GAAG,GAAG,IAAI,CAACuB,KAAK,CAACC,KAAK,CAACW,EAAE,CAAC9E,IAAI,CAACiE,GAAG,CAAC;MACzC,IAAItB,GAAG,EAAE;QACP,OAAO;UACLS,IAAI,EAAE,IAAI;UACVP,GAAG,EAAEF,GAAG,CAAC,CAAC;QACZ,CAAC;MACH;IACF;EAAC;IAAA;IAAA,OAED,oBAAWsB,GAAG,EAAE;MACd,IAAMtB,GAAG,GAAG,IAAI,CAACuB,KAAK,CAACC,KAAK,CAACY,UAAU,CAAC/E,IAAI,CAACiE,GAAG,CAAC;MACjD,IAAItB,GAAG,EAAE;QACP,IAAMK,IAAI,GAAGL,GAAG,CAAC,CAAC,CAAC,CAAChF,OAAO,CAAC,cAAc,EAAE,EAAE,CAAC;QAC/C,IAAMqH,GAAG,GAAG,IAAI,CAAClC,KAAK,CAACG,KAAK,CAAC+B,GAAG;QAChC,IAAI,CAAClC,KAAK,CAACG,KAAK,CAAC+B,GAAG,GAAG,IAAI;QAC3B,IAAM3B,MAAM,GAAG,IAAI,CAACP,KAAK,CAACmC,WAAW,CAACjC,IAAI,CAAC;QAC3C,IAAI,CAACF,KAAK,CAACG,KAAK,CAAC+B,GAAG,GAAGA,GAAG;QAC1B,OAAO;UACL5B,IAAI,EAAE,YAAY;UAClBP,GAAG,EAAEF,GAAG,CAAC,CAAC,CAAC;UACXU,MAAM,EAANA,MAAM;UACNL,IAAI,EAAJA;QACF,CAAC;MACH;IACF;EAAC;IAAA;IAAA,OAED,cAAKiB,GAAG,EAAE;MACR,IAAItB,GAAG,GAAG,IAAI,CAACuB,KAAK,CAACC,KAAK,CAACe,IAAI,CAAClF,IAAI,CAACiE,GAAG,CAAC;MACzC,IAAItB,GAAG,EAAE;QACP,IAAIE,GAAG,EAAEsC,MAAM,EAAEC,SAAS,EAAEC,MAAM,EAAEnF,CAAC,EAAEoF,SAAS,EAAEC,iBAAiB,EACjEC,IAAI,EAAEC,QAAQ,EAAEC,OAAO,EAAEC,YAAY,EAAEC,QAAQ;QAEjD,IAAIC,IAAI,GAAGlD,GAAG,CAAC,CAAC,CAAC,CAACrB,IAAI,EAAE;QACxB,IAAMwE,SAAS,GAAGD,IAAI,CAACvF,MAAM,GAAG,CAAC;QAEjC,IAAM4E,IAAI,GAAG;UACX9B,IAAI,EAAE,MAAM;UACZP,GAAG,EAAE,EAAE;UACPkD,OAAO,EAAED,SAAS;UAClBE,KAAK,EAAEF,SAAS,GAAG,CAACD,IAAI,CAAC7D,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE;UAC1CiE,KAAK,EAAE,KAAK;UACZC,KAAK,EAAE;QACT,CAAC;QAEDL,IAAI,GAAGC,SAAS,uBAAgBD,IAAI,CAAC7D,KAAK,CAAC,CAAC,CAAC,CAAC,gBAAU6D,IAAI,CAAE;QAE9D,IAAI,IAAI,CAAC7B,OAAO,CAAC9H,QAAQ,EAAE;UACzB2J,IAAI,GAAGC,SAAS,GAAGD,IAAI,GAAG,OAAO;QACnC;;QAEA;QACA,IAAMM,SAAS,GAAG,IAAInJ,MAAM,mBAAY6I,IAAI,mCAAgC;;QAE5E;QACA,OAAO5B,GAAG,EAAE;UACV2B,QAAQ,GAAG,KAAK;UAChB,IAAI,EAAEjD,GAAG,GAAGwD,SAAS,CAACnG,IAAI,CAACiE,GAAG,CAAC,CAAC,EAAE;YAChC;UACF;UAEA,IAAI,IAAI,CAACC,KAAK,CAACC,KAAK,CAACW,EAAE,CAACpH,IAAI,CAACuG,GAAG,CAAC,EAAE;YAAE;YACnC;UACF;UAEApB,GAAG,GAAGF,GAAG,CAAC,CAAC,CAAC;UACZsB,GAAG,GAAGA,GAAG,CAAC5F,SAAS,CAACwE,GAAG,CAACvC,MAAM,CAAC;UAE/BkF,IAAI,GAAG7C,GAAG,CAAC,CAAC,CAAC,CAACtB,KAAK,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC1D,OAAO,CAAC,MAAM,EAAE,UAACyI,CAAC;YAAA,OAAK,GAAG,CAACC,MAAM,CAAC,CAAC,GAAGD,CAAC,CAAC9F,MAAM,CAAC;UAAA,EAAC;UAChFmF,QAAQ,GAAGxB,GAAG,CAAC5C,KAAK,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;UAEhC,IAAI,IAAI,CAAC2C,OAAO,CAAC9H,QAAQ,EAAE;YACzBmJ,MAAM,GAAG,CAAC;YACVM,YAAY,GAAGH,IAAI,CAACc,QAAQ,EAAE;UAChC,CAAC,MAAM;YACLjB,MAAM,GAAG1C,GAAG,CAAC,CAAC,CAAC,CAAC4D,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC;YAChClB,MAAM,GAAGA,MAAM,GAAG,CAAC,GAAG,CAAC,GAAGA,MAAM,CAAC,CAAC;YAClCM,YAAY,GAAGH,IAAI,CAACxD,KAAK,CAACqD,MAAM,CAAC;YACjCA,MAAM,IAAI1C,GAAG,CAAC,CAAC,CAAC,CAACrC,MAAM;UACzB;UAEAgF,SAAS,GAAG,KAAK;UAEjB,IAAI,CAACE,IAAI,IAAI,MAAM,CAAC9H,IAAI,CAAC+H,QAAQ,CAAC,EAAE;YAAE;YACpC5C,GAAG,IAAI4C,QAAQ,GAAG,IAAI;YACtBxB,GAAG,GAAGA,GAAG,CAAC5F,SAAS,CAACoH,QAAQ,CAACnF,MAAM,GAAG,CAAC,CAAC;YACxCsF,QAAQ,GAAG,IAAI;UACjB;UAEA,IAAI,CAACA,QAAQ,EAAE;YACb,IAAMY,eAAe,GAAG,IAAIxJ,MAAM,gBAASyJ,IAAI,CAACC,GAAG,CAAC,CAAC,EAAErB,MAAM,GAAG,CAAC,CAAC,yDAAsD;YACxH,IAAMsB,OAAO,GAAG,IAAI3J,MAAM,gBAASyJ,IAAI,CAACC,GAAG,CAAC,CAAC,EAAErB,MAAM,GAAG,CAAC,CAAC,wDAAqD;YAC/G,IAAMuB,gBAAgB,GAAG,IAAI5J,MAAM,gBAASyJ,IAAI,CAACC,GAAG,CAAC,CAAC,EAAErB,MAAM,GAAG,CAAC,CAAC,kBAAkB;YACrF,IAAMwB,iBAAiB,GAAG,IAAI7J,MAAM,gBAASyJ,IAAI,CAACC,GAAG,CAAC,CAAC,EAAErB,MAAM,GAAG,CAAC,CAAC,QAAK;;YAEzE;YACA,OAAOpB,GAAG,EAAE;cACVyB,OAAO,GAAGzB,GAAG,CAAC5C,KAAK,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;cAC/BoE,QAAQ,GAAGC,OAAO;;cAElB;cACA,IAAI,IAAI,CAAC1B,OAAO,CAAC9H,QAAQ,EAAE;gBACzBuJ,QAAQ,GAAGA,QAAQ,CAAC9H,OAAO,CAAC,yBAAyB,EAAE,IAAI,CAAC;cAC9D;;cAEA;cACA,IAAIiJ,gBAAgB,CAAClJ,IAAI,CAAC+H,QAAQ,CAAC,EAAE;gBACnC;cACF;;cAEA;cACA,IAAIoB,iBAAiB,CAACnJ,IAAI,CAAC+H,QAAQ,CAAC,EAAE;gBACpC;cACF;;cAEA;cACA,IAAIe,eAAe,CAAC9I,IAAI,CAAC+H,QAAQ,CAAC,EAAE;gBAClC;cACF;;cAEA;cACA,IAAIkB,OAAO,CAACjJ,IAAI,CAACuG,GAAG,CAAC,EAAE;gBACrB;cACF;cAEA,IAAIwB,QAAQ,CAACc,MAAM,CAAC,MAAM,CAAC,IAAIlB,MAAM,IAAI,CAACI,QAAQ,CAACnE,IAAI,EAAE,EAAE;gBAAE;gBAC3DqE,YAAY,IAAI,IAAI,GAAGF,QAAQ,CAACzD,KAAK,CAACqD,MAAM,CAAC;cAC/C,CAAC,MAAM;gBACL;gBACA,IAAIC,SAAS,EAAE;kBACb;gBACF;;gBAEA;gBACA,IAAIE,IAAI,CAACe,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE;kBAAE;kBAC9B;gBACF;gBACA,IAAIK,gBAAgB,CAAClJ,IAAI,CAAC8H,IAAI,CAAC,EAAE;kBAC/B;gBACF;gBACA,IAAIqB,iBAAiB,CAACnJ,IAAI,CAAC8H,IAAI,CAAC,EAAE;kBAChC;gBACF;gBACA,IAAImB,OAAO,CAACjJ,IAAI,CAAC8H,IAAI,CAAC,EAAE;kBACtB;gBACF;gBAEAG,YAAY,IAAI,IAAI,GAAGF,QAAQ;cACjC;cAEA,IAAI,CAACH,SAAS,IAAI,CAACG,QAAQ,CAACnE,IAAI,EAAE,EAAE;gBAAE;gBACpCgE,SAAS,GAAG,IAAI;cAClB;cAEAzC,GAAG,IAAI6C,OAAO,GAAG,IAAI;cACrBzB,GAAG,GAAGA,GAAG,CAAC5F,SAAS,CAACqH,OAAO,CAACpF,MAAM,GAAG,CAAC,CAAC;cACvCkF,IAAI,GAAGC,QAAQ,CAACzD,KAAK,CAACqD,MAAM,CAAC;YAC/B;UACF;UAEA,IAAI,CAACH,IAAI,CAACe,KAAK,EAAE;YACf;YACA,IAAIV,iBAAiB,EAAE;cACrBL,IAAI,CAACe,KAAK,GAAG,IAAI;YACnB,CAAC,MAAM,IAAI,WAAW,CAACvI,IAAI,CAACmF,GAAG,CAAC,EAAE;cAChC0C,iBAAiB,GAAG,IAAI;YAC1B;UACF;;UAEA;UACA,IAAI,IAAI,CAACvB,OAAO,CAACpI,GAAG,EAAE;YACpBuJ,MAAM,GAAG,aAAa,CAACnF,IAAI,CAAC2F,YAAY,CAAC;YACzC,IAAIR,MAAM,EAAE;cACVC,SAAS,GAAGD,MAAM,CAAC,CAAC,CAAC,KAAK,MAAM;cAChCQ,YAAY,GAAGA,YAAY,CAAChI,OAAO,CAAC,cAAc,EAAE,EAAE,CAAC;YACzD;UACF;UAEAuH,IAAI,CAACgB,KAAK,CAACxE,IAAI,CAAC;YACd0B,IAAI,EAAE,WAAW;YACjBP,GAAG,EAAHA,GAAG;YACHiE,IAAI,EAAE,CAAC,CAAC3B,MAAM;YACd4B,OAAO,EAAE3B,SAAS;YAClBa,KAAK,EAAE,KAAK;YACZjD,IAAI,EAAE2C;UACR,CAAC,CAAC;UAEFT,IAAI,CAACrC,GAAG,IAAIA,GAAG;QACjB;;QAEA;QACAqC,IAAI,CAACgB,KAAK,CAAChB,IAAI,CAACgB,KAAK,CAAC5F,MAAM,GAAG,CAAC,CAAC,CAACuC,GAAG,GAAGA,GAAG,CAACmE,SAAS,EAAE;QACvD9B,IAAI,CAACgB,KAAK,CAAChB,IAAI,CAACgB,KAAK,CAAC5F,MAAM,GAAG,CAAC,CAAC,CAAC0C,IAAI,GAAG2C,YAAY,CAACqB,SAAS,EAAE;QACjE9B,IAAI,CAACrC,GAAG,GAAGqC,IAAI,CAACrC,GAAG,CAACmE,SAAS,EAAE;QAE/B,IAAMnF,CAAC,GAAGqD,IAAI,CAACgB,KAAK,CAAC5F,MAAM;;QAE3B;QACA,KAAKJ,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG2B,CAAC,EAAE3B,CAAC,EAAE,EAAE;UACtB,IAAI,CAAC4C,KAAK,CAACG,KAAK,CAAC+B,GAAG,GAAG,KAAK;UAC5BE,IAAI,CAACgB,KAAK,CAAChG,CAAC,CAAC,CAACmD,MAAM,GAAG,IAAI,CAACP,KAAK,CAACmC,WAAW,CAACC,IAAI,CAACgB,KAAK,CAAChG,CAAC,CAAC,CAAC8C,IAAI,EAAE,EAAE,CAAC;UAErE,IAAI,CAACkC,IAAI,CAACe,KAAK,EAAE;YACf;YACA,IAAMgB,OAAO,GAAG/B,IAAI,CAACgB,KAAK,CAAChG,CAAC,CAAC,CAACmD,MAAM,CAAC6D,MAAM,CAAC,UAAAd,CAAC;cAAA,OAAIA,CAAC,CAAChD,IAAI,KAAK,OAAO;YAAA,EAAC;YACpE,IAAM+D,qBAAqB,GAAGF,OAAO,CAAC3G,MAAM,GAAG,CAAC,IAAI2G,OAAO,CAACG,IAAI,CAAC,UAAAhB,CAAC;cAAA,OAAI,QAAQ,CAAC1I,IAAI,CAAC0I,CAAC,CAACvD,GAAG,CAAC;YAAA,EAAC;YAE3FqC,IAAI,CAACe,KAAK,GAAGkB,qBAAqB;UACpC;QACF;;QAEA;QACA,IAAIjC,IAAI,CAACe,KAAK,EAAE;UACd,KAAK/F,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG2B,CAAC,EAAE3B,CAAC,EAAE,EAAE;YACtBgF,IAAI,CAACgB,KAAK,CAAChG,CAAC,CAAC,CAAC+F,KAAK,GAAG,IAAI;UAC5B;QACF;QAEA,OAAOf,IAAI;MACb;IACF;EAAC;IAAA;IAAA,OAED,cAAKjB,GAAG,EAAE;MACR,IAAMtB,GAAG,GAAG,IAAI,CAACuB,KAAK,CAACC,KAAK,CAAC3G,IAAI,CAACwC,IAAI,CAACiE,GAAG,CAAC;MAC3C,IAAItB,GAAG,EAAE;QACP,IAAMQ,KAAK,GAAG;UACZC,IAAI,EAAE,MAAM;UACZP,GAAG,EAAEF,GAAG,CAAC,CAAC,CAAC;UACX0E,GAAG,EAAE,CAAC,IAAI,CAACrD,OAAO,CAAC3H,SAAS,KACtBsG,GAAG,CAAC,CAAC,CAAC,KAAK,KAAK,IAAIA,GAAG,CAAC,CAAC,CAAC,KAAK,QAAQ,IAAIA,GAAG,CAAC,CAAC,CAAC,KAAK,OAAO,CAAC;UACpEK,IAAI,EAAEL,GAAG,CAAC,CAAC;QACb,CAAC;QACD,IAAI,IAAI,CAACqB,OAAO,CAAC5H,QAAQ,EAAE;UACzB,IAAM4G,IAAI,GAAG,IAAI,CAACgB,OAAO,CAAC3H,SAAS,GAAG,IAAI,CAAC2H,OAAO,CAAC3H,SAAS,CAACsG,GAAG,CAAC,CAAC,CAAC,CAAC,GAAGpF,OAAM,CAACoF,GAAG,CAAC,CAAC,CAAC,CAAC;UACrFQ,KAAK,CAACC,IAAI,GAAG,WAAW;UACxBD,KAAK,CAACH,IAAI,GAAGA,IAAI;UACjBG,KAAK,CAACE,MAAM,GAAG,IAAI,CAACP,KAAK,CAAC2B,MAAM,CAACzB,IAAI,CAAC;QACxC;QACA,OAAOG,KAAK;MACd;IACF;EAAC;IAAA;IAAA,OAED,aAAIc,GAAG,EAAE;MACP,IAAMtB,GAAG,GAAG,IAAI,CAACuB,KAAK,CAACC,KAAK,CAACmD,GAAG,CAACtH,IAAI,CAACiE,GAAG,CAAC;MAC1C,IAAItB,GAAG,EAAE;QACP,IAAM4E,GAAG,GAAG5E,GAAG,CAAC,CAAC,CAAC,CAAC3E,WAAW,EAAE,CAACL,OAAO,CAAC,MAAM,EAAE,GAAG,CAAC;QACrD,IAAMuB,IAAI,GAAGyD,GAAG,CAAC,CAAC,CAAC,GAAGA,GAAG,CAAC,CAAC,CAAC,CAAChF,OAAO,CAAC,UAAU,EAAE,IAAI,CAAC,CAACA,OAAO,CAAC,IAAI,CAACuG,KAAK,CAACO,MAAM,CAACC,QAAQ,EAAE,IAAI,CAAC,GAAG,EAAE;QACrG,IAAM3B,KAAK,GAAGJ,GAAG,CAAC,CAAC,CAAC,GAAGA,GAAG,CAAC,CAAC,CAAC,CAACtE,SAAS,CAAC,CAAC,EAAEsE,GAAG,CAAC,CAAC,CAAC,CAACrC,MAAM,GAAG,CAAC,CAAC,CAAC3C,OAAO,CAAC,IAAI,CAACuG,KAAK,CAACO,MAAM,CAACC,QAAQ,EAAE,IAAI,CAAC,GAAG/B,GAAG,CAAC,CAAC,CAAC;QAChH,OAAO;UACLS,IAAI,EAAE,KAAK;UACXmE,GAAG,EAAHA,GAAG;UACH1E,GAAG,EAAEF,GAAG,CAAC,CAAC,CAAC;UACXzD,IAAI,EAAJA,IAAI;UACJ6D,KAAK,EAALA;QACF,CAAC;MACH;IACF;EAAC;IAAA;IAAA,OAED,eAAMkB,GAAG,EAAE;MACT,IAAMtB,GAAG,GAAG,IAAI,CAACuB,KAAK,CAACC,KAAK,CAACqD,KAAK,CAACxH,IAAI,CAACiE,GAAG,CAAC;MAC5C,IAAItB,GAAG,EAAE;QACP,IAAM8E,IAAI,GAAG;UACXrE,IAAI,EAAE,OAAO;UACbsE,MAAM,EAAE/G,UAAU,CAACgC,GAAG,CAAC,CAAC,CAAC,CAAC,CAACe,GAAG,CAAC,UAAA/B,CAAC,EAAI;YAAE,OAAO;cAAEqB,IAAI,EAAErB;YAAE,CAAC;UAAE,CAAC,CAAC;UAC5DgG,KAAK,EAAEhF,GAAG,CAAC,CAAC,CAAC,CAAChF,OAAO,CAAC,YAAY,EAAE,EAAE,CAAC,CAAC0D,KAAK,CAAC,QAAQ,CAAC;UACvDuG,IAAI,EAAEjF,GAAG,CAAC,CAAC,CAAC,IAAIA,GAAG,CAAC,CAAC,CAAC,CAACrB,IAAI,EAAE,GAAGqB,GAAG,CAAC,CAAC,CAAC,CAAChF,OAAO,CAAC,WAAW,EAAE,EAAE,CAAC,CAAC0D,KAAK,CAAC,IAAI,CAAC,GAAG;QAChF,CAAC;QAED,IAAIoG,IAAI,CAACC,MAAM,CAACpH,MAAM,KAAKmH,IAAI,CAACE,KAAK,CAACrH,MAAM,EAAE;UAC5CmH,IAAI,CAAC5E,GAAG,GAAGF,GAAG,CAAC,CAAC,CAAC;UAEjB,IAAId,CAAC,GAAG4F,IAAI,CAACE,KAAK,CAACrH,MAAM;UACzB,IAAIJ,CAAC,EAAE2H,CAAC,EAAEC,CAAC,EAAEhH,GAAG;UAChB,KAAKZ,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG2B,CAAC,EAAE3B,CAAC,EAAE,EAAE;YACtB,IAAI,WAAW,CAACxC,IAAI,CAAC+J,IAAI,CAACE,KAAK,CAACzH,CAAC,CAAC,CAAC,EAAE;cACnCuH,IAAI,CAACE,KAAK,CAACzH,CAAC,CAAC,GAAG,OAAO;YACzB,CAAC,MAAM,IAAI,YAAY,CAACxC,IAAI,CAAC+J,IAAI,CAACE,KAAK,CAACzH,CAAC,CAAC,CAAC,EAAE;cAC3CuH,IAAI,CAACE,KAAK,CAACzH,CAAC,CAAC,GAAG,QAAQ;YAC1B,CAAC,MAAM,IAAI,WAAW,CAACxC,IAAI,CAAC+J,IAAI,CAACE,KAAK,CAACzH,CAAC,CAAC,CAAC,EAAE;cAC1CuH,IAAI,CAACE,KAAK,CAACzH,CAAC,CAAC,GAAG,MAAM;YACxB,CAAC,MAAM;cACLuH,IAAI,CAACE,KAAK,CAACzH,CAAC,CAAC,GAAG,IAAI;YACtB;UACF;UAEA2B,CAAC,GAAG4F,IAAI,CAACG,IAAI,CAACtH,MAAM;UACpB,KAAKJ,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG2B,CAAC,EAAE3B,CAAC,EAAE,EAAE;YACtBuH,IAAI,CAACG,IAAI,CAAC1H,CAAC,CAAC,GAAGS,UAAU,CAAC8G,IAAI,CAACG,IAAI,CAAC1H,CAAC,CAAC,EAAEuH,IAAI,CAACC,MAAM,CAACpH,MAAM,CAAC,CAACoD,GAAG,CAAC,UAAA/B,CAAC,EAAI;cAAE,OAAO;gBAAEqB,IAAI,EAAErB;cAAE,CAAC;YAAE,CAAC,CAAC;UAC/F;;UAEA;;UAEA;UACAE,CAAC,GAAG4F,IAAI,CAACC,MAAM,CAACpH,MAAM;UACtB,KAAKuH,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGhG,CAAC,EAAEgG,CAAC,EAAE,EAAE;YACtBJ,IAAI,CAACC,MAAM,CAACG,CAAC,CAAC,CAACxE,MAAM,GAAG,IAAI,CAACP,KAAK,CAAC2B,MAAM,CAACgD,IAAI,CAACC,MAAM,CAACG,CAAC,CAAC,CAAC7E,IAAI,CAAC;UAChE;;UAEA;UACAnB,CAAC,GAAG4F,IAAI,CAACG,IAAI,CAACtH,MAAM;UACpB,KAAKuH,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGhG,CAAC,EAAEgG,CAAC,EAAE,EAAE;YACtB/G,GAAG,GAAG2G,IAAI,CAACG,IAAI,CAACC,CAAC,CAAC;YAClB,KAAKC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGhH,GAAG,CAACR,MAAM,EAAEwH,CAAC,EAAE,EAAE;cAC/BhH,GAAG,CAACgH,CAAC,CAAC,CAACzE,MAAM,GAAG,IAAI,CAACP,KAAK,CAAC2B,MAAM,CAAC3D,GAAG,CAACgH,CAAC,CAAC,CAAC9E,IAAI,CAAC;YAChD;UACF;UAEA,OAAOyE,IAAI;QACb;MACF;IACF;EAAC;IAAA;IAAA,OAED,kBAASxD,GAAG,EAAE;MACZ,IAAMtB,GAAG,GAAG,IAAI,CAACuB,KAAK,CAACC,KAAK,CAAC4D,QAAQ,CAAC/H,IAAI,CAACiE,GAAG,CAAC;MAC/C,IAAItB,GAAG,EAAE;QACP,OAAO;UACLS,IAAI,EAAE,SAAS;UACfP,GAAG,EAAEF,GAAG,CAAC,CAAC,CAAC;UACXkC,KAAK,EAAElC,GAAG,CAAC,CAAC,CAAC,CAAC1E,MAAM,CAAC,CAAC,CAAC,KAAK,GAAG,GAAG,CAAC,GAAG,CAAC;UACvC+E,IAAI,EAAEL,GAAG,CAAC,CAAC,CAAC;UACZU,MAAM,EAAE,IAAI,CAACP,KAAK,CAAC2B,MAAM,CAAC9B,GAAG,CAAC,CAAC,CAAC;QAClC,CAAC;MACH;IACF;EAAC;IAAA;IAAA,OAED,mBAAUsB,GAAG,EAAE;MACb,IAAMtB,GAAG,GAAG,IAAI,CAACuB,KAAK,CAACC,KAAK,CAAC6D,SAAS,CAAChI,IAAI,CAACiE,GAAG,CAAC;MAChD,IAAItB,GAAG,EAAE;QACP,IAAMK,IAAI,GAAGL,GAAG,CAAC,CAAC,CAAC,CAAC1E,MAAM,CAAC0E,GAAG,CAAC,CAAC,CAAC,CAACrC,MAAM,GAAG,CAAC,CAAC,KAAK,IAAI,GAClDqC,GAAG,CAAC,CAAC,CAAC,CAACX,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GACnBW,GAAG,CAAC,CAAC,CAAC;QACV,OAAO;UACLS,IAAI,EAAE,WAAW;UACjBP,GAAG,EAAEF,GAAG,CAAC,CAAC,CAAC;UACXK,IAAI,EAAJA,IAAI;UACJK,MAAM,EAAE,IAAI,CAACP,KAAK,CAAC2B,MAAM,CAACzB,IAAI;QAChC,CAAC;MACH;IACF;EAAC;IAAA;IAAA,OAED,cAAKiB,GAAG,EAAE;MACR,IAAMtB,GAAG,GAAG,IAAI,CAACuB,KAAK,CAACC,KAAK,CAACnB,IAAI,CAAChD,IAAI,CAACiE,GAAG,CAAC;MAC3C,IAAItB,GAAG,EAAE;QACP,OAAO;UACLS,IAAI,EAAE,MAAM;UACZP,GAAG,EAAEF,GAAG,CAAC,CAAC,CAAC;UACXK,IAAI,EAAEL,GAAG,CAAC,CAAC,CAAC;UACZU,MAAM,EAAE,IAAI,CAACP,KAAK,CAAC2B,MAAM,CAAC9B,GAAG,CAAC,CAAC,CAAC;QAClC,CAAC;MACH;IACF;EAAC;IAAA;IAAA,OAED,gBAAOsB,GAAG,EAAE;MACV,IAAMtB,GAAG,GAAG,IAAI,CAACuB,KAAK,CAACO,MAAM,CAAClH,MAAM,CAACyC,IAAI,CAACiE,GAAG,CAAC;MAC9C,IAAItB,GAAG,EAAE;QACP,OAAO;UACLS,IAAI,EAAE,QAAQ;UACdP,GAAG,EAAEF,GAAG,CAAC,CAAC,CAAC;UACXK,IAAI,EAAEzF,OAAM,CAACoF,GAAG,CAAC,CAAC,CAAC;QACrB,CAAC;MACH;IACF;EAAC;IAAA;IAAA,OAED,aAAIsB,GAAG,EAAE;MACP,IAAMtB,GAAG,GAAG,IAAI,CAACuB,KAAK,CAACO,MAAM,CAAC8C,GAAG,CAACvH,IAAI,CAACiE,GAAG,CAAC;MAC3C,IAAItB,GAAG,EAAE;QACP,IAAI,CAAC,IAAI,CAACG,KAAK,CAACG,KAAK,CAACC,MAAM,IAAI,OAAO,CAACxF,IAAI,CAACiF,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE;UACpD,IAAI,CAACG,KAAK,CAACG,KAAK,CAACC,MAAM,GAAG,IAAI;QAChC,CAAC,MAAM,IAAI,IAAI,CAACJ,KAAK,CAACG,KAAK,CAACC,MAAM,IAAI,SAAS,CAACxF,IAAI,CAACiF,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE;UAC5D,IAAI,CAACG,KAAK,CAACG,KAAK,CAACC,MAAM,GAAG,KAAK;QACjC;QACA,IAAI,CAAC,IAAI,CAACJ,KAAK,CAACG,KAAK,CAACgF,UAAU,IAAI,gCAAgC,CAACvK,IAAI,CAACiF,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE;UACjF,IAAI,CAACG,KAAK,CAACG,KAAK,CAACgF,UAAU,GAAG,IAAI;QACpC,CAAC,MAAM,IAAI,IAAI,CAACnF,KAAK,CAACG,KAAK,CAACgF,UAAU,IAAI,kCAAkC,CAACvK,IAAI,CAACiF,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE;UACzF,IAAI,CAACG,KAAK,CAACG,KAAK,CAACgF,UAAU,GAAG,KAAK;QACrC;QAEA,OAAO;UACL7E,IAAI,EAAE,IAAI,CAACY,OAAO,CAAC5H,QAAQ,GACvB,MAAM,GACN,MAAM;UACVyG,GAAG,EAAEF,GAAG,CAAC,CAAC,CAAC;UACXO,MAAM,EAAE,IAAI,CAACJ,KAAK,CAACG,KAAK,CAACC,MAAM;UAC/B+E,UAAU,EAAE,IAAI,CAACnF,KAAK,CAACG,KAAK,CAACgF,UAAU;UACvCjF,IAAI,EAAE,IAAI,CAACgB,OAAO,CAAC5H,QAAQ,GACtB,IAAI,CAAC4H,OAAO,CAAC3H,SAAS,GACrB,IAAI,CAAC2H,OAAO,CAAC3H,SAAS,CAACsG,GAAG,CAAC,CAAC,CAAC,CAAC,GAC9BpF,OAAM,CAACoF,GAAG,CAAC,CAAC,CAAC,CAAC,GAChBA,GAAG,CAAC,CAAC;QACX,CAAC;MACH;IACF;EAAC;IAAA;IAAA,OAED,cAAKsB,GAAG,EAAE;MACR,IAAMtB,GAAG,GAAG,IAAI,CAACuB,KAAK,CAACO,MAAM,CAAC7B,IAAI,CAAC5C,IAAI,CAACiE,GAAG,CAAC;MAC5C,IAAItB,GAAG,EAAE;QACP,IAAMuF,UAAU,GAAGvF,GAAG,CAAC,CAAC,CAAC,CAACrB,IAAI,EAAE;QAChC,IAAI,CAAC,IAAI,CAAC0C,OAAO,CAAC9H,QAAQ,IAAI,IAAI,CAACwB,IAAI,CAACwK,UAAU,CAAC,EAAE;UACnD;UACA,IAAI,CAAE,IAAI,CAACxK,IAAI,CAACwK,UAAU,CAAE,EAAE;YAC5B;UACF;;UAEA;UACA,IAAMC,UAAU,GAAGtI,KAAK,CAACqI,UAAU,CAAClG,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC;UACvD,IAAI,CAACkG,UAAU,CAAC5H,MAAM,GAAG6H,UAAU,CAAC7H,MAAM,IAAI,CAAC,KAAK,CAAC,EAAE;YACrD;UACF;QACF,CAAC,MAAM;UACL;UACA,IAAM8H,cAAc,GAAGnG,kBAAkB,CAACU,GAAG,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC;UACvD,IAAIyF,cAAc,GAAG,CAAC,CAAC,EAAE;YACvB,IAAMpC,KAAK,GAAGrD,GAAG,CAAC,CAAC,CAAC,CAACrD,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC;YAC/C,IAAM+I,OAAO,GAAGrC,KAAK,GAAGrD,GAAG,CAAC,CAAC,CAAC,CAACrC,MAAM,GAAG8H,cAAc;YACtDzF,GAAG,CAAC,CAAC,CAAC,GAAGA,GAAG,CAAC,CAAC,CAAC,CAACtE,SAAS,CAAC,CAAC,EAAE+J,cAAc,CAAC;YAC5CzF,GAAG,CAAC,CAAC,CAAC,GAAGA,GAAG,CAAC,CAAC,CAAC,CAACtE,SAAS,CAAC,CAAC,EAAEgK,OAAO,CAAC,CAAC/G,IAAI,EAAE;YAC5CqB,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE;UACb;QACF;QACA,IAAIzD,IAAI,GAAGyD,GAAG,CAAC,CAAC,CAAC;QACjB,IAAII,KAAK,GAAG,EAAE;QACd,IAAI,IAAI,CAACiB,OAAO,CAAC9H,QAAQ,EAAE;UACzB;UACA,IAAM0G,IAAI,GAAG,+BAA+B,CAAC5C,IAAI,CAACd,IAAI,CAAC;UAEvD,IAAI0D,IAAI,EAAE;YACR1D,IAAI,GAAG0D,IAAI,CAAC,CAAC,CAAC;YACdG,KAAK,GAAGH,IAAI,CAAC,CAAC,CAAC;UACjB;QACF,CAAC,MAAM;UACLG,KAAK,GAAGJ,GAAG,CAAC,CAAC,CAAC,GAAGA,GAAG,CAAC,CAAC,CAAC,CAACX,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE;QAC3C;QAEA9C,IAAI,GAAGA,IAAI,CAACoC,IAAI,EAAE;QAClB,IAAI,IAAI,CAAC5D,IAAI,CAACwB,IAAI,CAAC,EAAE;UACnB,IAAI,IAAI,CAAC8E,OAAO,CAAC9H,QAAQ,IAAI,CAAE,IAAI,CAACwB,IAAI,CAACwK,UAAU,CAAE,EAAE;YACrD;YACAhJ,IAAI,GAAGA,IAAI,CAAC8C,KAAK,CAAC,CAAC,CAAC;UACtB,CAAC,MAAM;YACL9C,IAAI,GAAGA,IAAI,CAAC8C,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;UAC1B;QACF;QACA,OAAOU,UAAU,CAACC,GAAG,EAAE;UACrBzD,IAAI,EAAEA,IAAI,GAAGA,IAAI,CAACvB,OAAO,CAAC,IAAI,CAACuG,KAAK,CAACO,MAAM,CAACC,QAAQ,EAAE,IAAI,CAAC,GAAGxF,IAAI;UAClE6D,KAAK,EAAEA,KAAK,GAAGA,KAAK,CAACpF,OAAO,CAAC,IAAI,CAACuG,KAAK,CAACO,MAAM,CAACC,QAAQ,EAAE,IAAI,CAAC,GAAG3B;QACnE,CAAC,EAAEJ,GAAG,CAAC,CAAC,CAAC,EAAE,IAAI,CAACG,KAAK,CAAC;MACxB;IACF;EAAC;IAAA;IAAA,OAED,iBAAQmB,GAAG,EAAEqE,KAAK,EAAE;MAClB,IAAI3F,GAAG;MACP,IAAI,CAACA,GAAG,GAAG,IAAI,CAACuB,KAAK,CAACO,MAAM,CAAC8D,OAAO,CAACvI,IAAI,CAACiE,GAAG,CAAC,MACtCtB,GAAG,GAAG,IAAI,CAACuB,KAAK,CAACO,MAAM,CAAC+D,MAAM,CAACxI,IAAI,CAACiE,GAAG,CAAC,CAAC,EAAE;QACjD,IAAIrB,IAAI,GAAG,CAACD,GAAG,CAAC,CAAC,CAAC,IAAIA,GAAG,CAAC,CAAC,CAAC,EAAEhF,OAAO,CAAC,MAAM,EAAE,GAAG,CAAC;QAClDiF,IAAI,GAAG0F,KAAK,CAAC1F,IAAI,CAAC5E,WAAW,EAAE,CAAC;QAChC,IAAI,CAAC4E,IAAI,EAAE;UACT,IAAMI,IAAI,GAAGL,GAAG,CAAC,CAAC,CAAC,CAAC1E,MAAM,CAAC,CAAC,CAAC;UAC7B,OAAO;YACLmF,IAAI,EAAE,MAAM;YACZP,GAAG,EAAEG,IAAI;YACTA,IAAI,EAAJA;UACF,CAAC;QACH;QACA,OAAON,UAAU,CAACC,GAAG,EAAEC,IAAI,EAAED,GAAG,CAAC,CAAC,CAAC,EAAE,IAAI,CAACG,KAAK,CAAC;MAClD;IACF;EAAC;IAAA;IAAA,OAED,kBAASmB,GAAG,EAAEwE,SAAS,EAAiB;MAAA,IAAfC,QAAQ,uEAAG,EAAE;MACpC,IAAI3H,KAAK,GAAG,IAAI,CAACmD,KAAK,CAACO,MAAM,CAACkE,QAAQ,CAACC,MAAM,CAAC5I,IAAI,CAACiE,GAAG,CAAC;MACvD,IAAI,CAAClD,KAAK,EAAE;;MAEZ;MACA,IAAIA,KAAK,CAAC,CAAC,CAAC,IAAI2H,QAAQ,CAAC3H,KAAK,CAAC,ogSAAe,CAAC,EAAE;MAEjD,IAAM8H,QAAQ,GAAG9H,KAAK,CAAC,CAAC,CAAC,IAAIA,KAAK,CAAC,CAAC,CAAC,IAAI,EAAE;MAE3C,IAAI,CAAC8H,QAAQ,IAAKA,QAAQ,KAAKH,QAAQ,KAAK,EAAE,IAAI,IAAI,CAACxE,KAAK,CAACO,MAAM,CAACqE,WAAW,CAAC9I,IAAI,CAAC0I,QAAQ,CAAC,CAAE,EAAE;QAChG,IAAMK,OAAO,GAAGhI,KAAK,CAAC,CAAC,CAAC,CAACT,MAAM,GAAG,CAAC;QACnC,IAAI0I,MAAM;UAAEC,OAAO;UAAEC,UAAU,GAAGH,OAAO;UAAEI,aAAa,GAAG,CAAC;QAE5D,IAAMC,MAAM,GAAGrI,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,GAAG,GAAG,IAAI,CAACmD,KAAK,CAACO,MAAM,CAACkE,QAAQ,CAACU,SAAS,GAAG,IAAI,CAACnF,KAAK,CAACO,MAAM,CAACkE,QAAQ,CAACW,SAAS;QAChHF,MAAM,CAACG,SAAS,GAAG,CAAC;;QAEpB;QACAd,SAAS,GAAGA,SAAS,CAACzG,KAAK,CAAC,CAAC,CAAC,GAAGiC,GAAG,CAAC3D,MAAM,GAAGyI,OAAO,CAAC;QAEtD,OAAO,CAAChI,KAAK,GAAGqI,MAAM,CAACpJ,IAAI,CAACyI,SAAS,CAAC,KAAK,IAAI,EAAE;UAC/CO,MAAM,GAAGjI,KAAK,CAAC,CAAC,CAAC,IAAIA,KAAK,CAAC,CAAC,CAAC,IAAIA,KAAK,CAAC,CAAC,CAAC,IAAIA,KAAK,CAAC,CAAC,CAAC,IAAIA,KAAK,CAAC,CAAC,CAAC,IAAIA,KAAK,CAAC,CAAC,CAAC;UAE7E,IAAI,CAACiI,MAAM,EAAE,SAAS,CAAC;;UAEvBC,OAAO,GAAGD,MAAM,CAAC1I,MAAM;UAEvB,IAAIS,KAAK,CAAC,CAAC,CAAC,IAAIA,KAAK,CAAC,CAAC,CAAC,EAAE;YAAE;YAC1BmI,UAAU,IAAID,OAAO;YACrB;UACF,CAAC,MAAM,IAAIlI,KAAK,CAAC,CAAC,CAAC,IAAIA,KAAK,CAAC,CAAC,CAAC,EAAE;YAAE;YACjC,IAAIgI,OAAO,GAAG,CAAC,IAAI,EAAE,CAACA,OAAO,GAAGE,OAAO,IAAI,CAAC,CAAC,EAAE;cAC7CE,aAAa,IAAIF,OAAO;cACxB,SAAS,CAAC;YACZ;UACF;;UAEAC,UAAU,IAAID,OAAO;UAErB,IAAIC,UAAU,GAAG,CAAC,EAAE,SAAS,CAAC;;UAE9B;UACAD,OAAO,GAAGxC,IAAI,CAACC,GAAG,CAACuC,OAAO,EAAEA,OAAO,GAAGC,UAAU,GAAGC,aAAa,CAAC;UAEjE,IAAMtG,GAAG,GAAGoB,GAAG,CAACjC,KAAK,CAAC,CAAC,EAAE+G,OAAO,GAAGhI,KAAK,CAACyI,KAAK,IAAIzI,KAAK,CAAC,CAAC,CAAC,CAACT,MAAM,GAAG0I,MAAM,CAAC1I,MAAM,CAAC,GAAG2I,OAAO,CAAC;;UAE7F;UACA,IAAIxC,IAAI,CAACC,GAAG,CAACqC,OAAO,EAAEE,OAAO,CAAC,GAAG,CAAC,EAAE;YAClC,IAAMjG,KAAI,GAAGH,GAAG,CAACb,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;YAC7B,OAAO;cACLoB,IAAI,EAAE,IAAI;cACVP,GAAG,EAAHA,GAAG;cACHG,IAAI,EAAJA,KAAI;cACJK,MAAM,EAAE,IAAI,CAACP,KAAK,CAACQ,YAAY,CAACN,KAAI;YACtC,CAAC;UACH;;UAEA;UACA,IAAMA,IAAI,GAAGH,GAAG,CAACb,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;UAC7B,OAAO;YACLoB,IAAI,EAAE,QAAQ;YACdP,GAAG,EAAHA,GAAG;YACHG,IAAI,EAAJA,IAAI;YACJK,MAAM,EAAE,IAAI,CAACP,KAAK,CAACQ,YAAY,CAACN,IAAI;UACtC,CAAC;QACH;MACF;IACF;EAAC;IAAA;IAAA,OAED,kBAASiB,GAAG,EAAE;MACZ,IAAMtB,GAAG,GAAG,IAAI,CAACuB,KAAK,CAACO,MAAM,CAACJ,IAAI,CAACrE,IAAI,CAACiE,GAAG,CAAC;MAC5C,IAAItB,GAAG,EAAE;QACP,IAAIK,IAAI,GAAGL,GAAG,CAAC,CAAC,CAAC,CAAChF,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC;QACrC,IAAM8L,gBAAgB,GAAG,MAAM,CAAC/L,IAAI,CAACsF,IAAI,CAAC;QAC1C,IAAM0G,uBAAuB,GAAG,IAAI,CAAChM,IAAI,CAACsF,IAAI,CAAC,IAAI,IAAI,CAACtF,IAAI,CAACsF,IAAI,CAAC;QAClE,IAAIyG,gBAAgB,IAAIC,uBAAuB,EAAE;UAC/C1G,IAAI,GAAGA,IAAI,CAAC3E,SAAS,CAAC,CAAC,EAAE2E,IAAI,CAAC1C,MAAM,GAAG,CAAC,CAAC;QAC3C;QACA0C,IAAI,GAAGzF,OAAM,CAACyF,IAAI,EAAE,IAAI,CAAC;QACzB,OAAO;UACLI,IAAI,EAAE,UAAU;UAChBP,GAAG,EAAEF,GAAG,CAAC,CAAC,CAAC;UACXK,IAAI,EAAJA;QACF,CAAC;MACH;IACF;EAAC;IAAA;IAAA,OAED,YAAGiB,GAAG,EAAE;MACN,IAAMtB,GAAG,GAAG,IAAI,CAACuB,KAAK,CAACO,MAAM,CAACkF,EAAE,CAAC3J,IAAI,CAACiE,GAAG,CAAC;MAC1C,IAAItB,GAAG,EAAE;QACP,OAAO;UACLS,IAAI,EAAE,IAAI;UACVP,GAAG,EAAEF,GAAG,CAAC,CAAC;QACZ,CAAC;MACH;IACF;EAAC;IAAA;IAAA,OAED,aAAIsB,GAAG,EAAE;MACP,IAAMtB,GAAG,GAAG,IAAI,CAACuB,KAAK,CAACO,MAAM,CAACmF,GAAG,CAAC5J,IAAI,CAACiE,GAAG,CAAC;MAC3C,IAAItB,GAAG,EAAE;QACP,OAAO;UACLS,IAAI,EAAE,KAAK;UACXP,GAAG,EAAEF,GAAG,CAAC,CAAC,CAAC;UACXK,IAAI,EAAEL,GAAG,CAAC,CAAC,CAAC;UACZU,MAAM,EAAE,IAAI,CAACP,KAAK,CAACQ,YAAY,CAACX,GAAG,CAAC,CAAC,CAAC;QACxC,CAAC;MACH;IACF;EAAC;IAAA;IAAA,OAED,kBAASsB,GAAG,EAAEhI,MAAM,EAAE;MACpB,IAAM0G,GAAG,GAAG,IAAI,CAACuB,KAAK,CAACO,MAAM,CAACoF,QAAQ,CAAC7J,IAAI,CAACiE,GAAG,CAAC;MAChD,IAAItB,GAAG,EAAE;QACP,IAAIK,IAAI,EAAE9D,IAAI;QACd,IAAIyD,GAAG,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;UAClBK,IAAI,GAAGzF,OAAM,CAAC,IAAI,CAACyG,OAAO,CAAC/H,MAAM,GAAGA,MAAM,CAAC0G,GAAG,CAAC,CAAC,CAAC,CAAC,GAAGA,GAAG,CAAC,CAAC,CAAC,CAAC;UAC5DzD,IAAI,GAAG,SAAS,GAAG8D,IAAI;QACzB,CAAC,MAAM;UACLA,IAAI,GAAGzF,OAAM,CAACoF,GAAG,CAAC,CAAC,CAAC,CAAC;UACrBzD,IAAI,GAAG8D,IAAI;QACb;QAEA,OAAO;UACLI,IAAI,EAAE,MAAM;UACZP,GAAG,EAAEF,GAAG,CAAC,CAAC,CAAC;UACXK,IAAI,EAAJA,IAAI;UACJ9D,IAAI,EAAJA,IAAI;UACJmE,MAAM,EAAE,CACN;YACED,IAAI,EAAE,MAAM;YACZP,GAAG,EAAEG,IAAI;YACTA,IAAI,EAAJA;UACF,CAAC;QAEL,CAAC;MACH;IACF;EAAC;IAAA;IAAA,OAED,aAAIiB,GAAG,EAAEhI,MAAM,EAAE;MACf,IAAI0G,GAAG;MACP,IAAIA,GAAG,GAAG,IAAI,CAACuB,KAAK,CAACO,MAAM,CAACqF,GAAG,CAAC9J,IAAI,CAACiE,GAAG,CAAC,EAAE;QACzC,IAAIjB,IAAI,EAAE9D,IAAI;QACd,IAAIyD,GAAG,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;UAClBK,IAAI,GAAGzF,OAAM,CAAC,IAAI,CAACyG,OAAO,CAAC/H,MAAM,GAAGA,MAAM,CAAC0G,GAAG,CAAC,CAAC,CAAC,CAAC,GAAGA,GAAG,CAAC,CAAC,CAAC,CAAC;UAC5DzD,IAAI,GAAG,SAAS,GAAG8D,IAAI;QACzB,CAAC,MAAM;UACL;UACA,IAAI+G,WAAW;UACf,GAAG;YACDA,WAAW,GAAGpH,GAAG,CAAC,CAAC,CAAC;YACpBA,GAAG,CAAC,CAAC,CAAC,GAAG,IAAI,CAACuB,KAAK,CAACO,MAAM,CAACuF,UAAU,CAAChK,IAAI,CAAC2C,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;UACvD,CAAC,QAAQoH,WAAW,KAAKpH,GAAG,CAAC,CAAC,CAAC;UAC/BK,IAAI,GAAGzF,OAAM,CAACoF,GAAG,CAAC,CAAC,CAAC,CAAC;UACrB,IAAIA,GAAG,CAAC,CAAC,CAAC,KAAK,MAAM,EAAE;YACrBzD,IAAI,GAAG,SAAS,GAAGyD,GAAG,CAAC,CAAC,CAAC;UAC3B,CAAC,MAAM;YACLzD,IAAI,GAAGyD,GAAG,CAAC,CAAC,CAAC;UACf;QACF;QACA,OAAO;UACLS,IAAI,EAAE,MAAM;UACZP,GAAG,EAAEF,GAAG,CAAC,CAAC,CAAC;UACXK,IAAI,EAAJA,IAAI;UACJ9D,IAAI,EAAJA,IAAI;UACJmE,MAAM,EAAE,CACN;YACED,IAAI,EAAE,MAAM;YACZP,GAAG,EAAEG,IAAI;YACTA,IAAI,EAAJA;UACF,CAAC;QAEL,CAAC;MACH;IACF;EAAC;IAAA;IAAA,OAED,oBAAWiB,GAAG,EAAE1H,WAAW,EAAE;MAC3B,IAAMoG,GAAG,GAAG,IAAI,CAACuB,KAAK,CAACO,MAAM,CAACzB,IAAI,CAAChD,IAAI,CAACiE,GAAG,CAAC;MAC5C,IAAItB,GAAG,EAAE;QACP,IAAIK,IAAI;QACR,IAAI,IAAI,CAACF,KAAK,CAACG,KAAK,CAACgF,UAAU,EAAE;UAC/BjF,IAAI,GAAG,IAAI,CAACgB,OAAO,CAAC5H,QAAQ,GAAI,IAAI,CAAC4H,OAAO,CAAC3H,SAAS,GAAG,IAAI,CAAC2H,OAAO,CAAC3H,SAAS,CAACsG,GAAG,CAAC,CAAC,CAAC,CAAC,GAAGpF,OAAM,CAACoF,GAAG,CAAC,CAAC,CAAC,CAAC,GAAIA,GAAG,CAAC,CAAC,CAAC;QACpH,CAAC,MAAM;UACLK,IAAI,GAAGzF,OAAM,CAAC,IAAI,CAACyG,OAAO,CAACzH,WAAW,GAAGA,WAAW,CAACoG,GAAG,CAAC,CAAC,CAAC,CAAC,GAAGA,GAAG,CAAC,CAAC,CAAC,CAAC;QACxE;QACA,OAAO;UACLS,IAAI,EAAE,MAAM;UACZP,GAAG,EAAEF,GAAG,CAAC,CAAC,CAAC;UACXK,IAAI,EAAJA;QACF,CAAC;MACH;IACF;EAAC;EAAA;AAAA;AAGH;AACA;AACA;AACA,IAAMmB,KAAK,GAAG;EACZC,OAAO,EAAE,kBAAkB;EAC3BC,IAAI,EAAE,sCAAsC;EAC5CE,MAAM,EAAE,2FAA2F;EACnGO,EAAE,EAAE,oEAAoE;EACxEH,OAAO,EAAE,sCAAsC;EAC/CI,UAAU,EAAE,yCAAyC;EACrDG,IAAI,EAAE,sCAAsC;EAC5C1H,IAAI,EAAE,YAAY,CAAC;EAAA,EACf,qEAAqE,CAAC;EAAA,EACtE,yBAAyB,CAAC;EAAA,EAC1B,+BAA+B,CAAC;EAAA,EAChC,+BAA+B,CAAC;EAAA,EAChC,2CAA2C,CAAC;EAAA,EAC5C,sDAAsD,CAAC;EAAA,EACvD,oHAAoH,CAAC;EAAA,EACrH,oGAAoG,CAAC;EAAA,EACrG,GAAG;EACP8J,GAAG,EAAE,iGAAiG;EACtGE,KAAK,EAAEzH,QAAQ;EACfgI,QAAQ,EAAE,+CAA+C;EACzD;EACA;EACAkC,UAAU,EAAE,sFAAsF;EAClGjH,IAAI,EAAE;AACR,CAAC;AAEDmB,KAAK,CAAC+F,MAAM,GAAG,6BAA6B;AAC5C/F,KAAK,CAACgG,MAAM,GAAG,8DAA8D;AAC7EhG,KAAK,CAACmD,GAAG,GAAG/I,IAAI,CAAC4F,KAAK,CAACmD,GAAG,CAAC,CACxB3J,OAAO,CAAC,OAAO,EAAEwG,KAAK,CAAC+F,MAAM,CAAC,CAC9BvM,OAAO,CAAC,OAAO,EAAEwG,KAAK,CAACgG,MAAM,CAAC,CAC9BtL,QAAQ,EAAE;AAEbsF,KAAK,CAACiG,MAAM,GAAG,uBAAuB;AACtCjG,KAAK,CAACkG,aAAa,GAAG9L,IAAI,CAAC,eAAe,CAAC,CACxCZ,OAAO,CAAC,MAAM,EAAEwG,KAAK,CAACiG,MAAM,CAAC,CAC7BvL,QAAQ,EAAE;AAEbsF,KAAK,CAACe,IAAI,GAAG3G,IAAI,CAAC4F,KAAK,CAACe,IAAI,CAAC,CAC1BvH,OAAO,CAAC,OAAO,EAAEwG,KAAK,CAACiG,MAAM,CAAC,CAC9BzM,OAAO,CAAC,IAAI,EAAE,iEAAiE,CAAC,CAChFA,OAAO,CAAC,KAAK,EAAE,SAAS,GAAGwG,KAAK,CAACmD,GAAG,CAACrK,MAAM,GAAG,GAAG,CAAC,CAClD4B,QAAQ,EAAE;AAEbsF,KAAK,CAACmG,IAAI,GAAG,6DAA6D,GACtE,0EAA0E,GAC1E,sEAAsE,GACtE,yEAAyE,GACzE,wEAAwE,GACxE,WAAW;AACfnG,KAAK,CAACoG,QAAQ,GAAG,8BAA8B;AAC/CpG,KAAK,CAAC3G,IAAI,GAAGe,IAAI,CAAC4F,KAAK,CAAC3G,IAAI,EAAE,GAAG,CAAC,CAC/BG,OAAO,CAAC,SAAS,EAAEwG,KAAK,CAACoG,QAAQ,CAAC,CAClC5M,OAAO,CAAC,KAAK,EAAEwG,KAAK,CAACmG,IAAI,CAAC,CAC1B3M,OAAO,CAAC,WAAW,EAAE,0EAA0E,CAAC,CAChGkB,QAAQ,EAAE;AAEbsF,KAAK,CAAC6D,SAAS,GAAGzJ,IAAI,CAAC4F,KAAK,CAAC8F,UAAU,CAAC,CACrCtM,OAAO,CAAC,IAAI,EAAEwG,KAAK,CAACW,EAAE,CAAC,CACvBnH,OAAO,CAAC,SAAS,EAAE,eAAe,CAAC,CACnCA,OAAO,CAAC,WAAW,EAAE,EAAE,CAAC,CAAC;AAAA,CACzBA,OAAO,CAAC,QAAQ,EAAE,EAAE,CAAC,CACrBA,OAAO,CAAC,YAAY,EAAE,SAAS,CAAC,CAChCA,OAAO,CAAC,QAAQ,EAAE,gDAAgD,CAAC,CACnEA,OAAO,CAAC,MAAM,EAAE,wBAAwB,CAAC,CAAC;AAAA,CAC1CA,OAAO,CAAC,MAAM,EAAE,6DAA6D,CAAC,CAC9EA,OAAO,CAAC,KAAK,EAAEwG,KAAK,CAACmG,IAAI,CAAC,CAAC;AAAA,CAC3BzL,QAAQ,EAAE;AAEbsF,KAAK,CAACY,UAAU,GAAGxG,IAAI,CAAC4F,KAAK,CAACY,UAAU,CAAC,CACtCpH,OAAO,CAAC,WAAW,EAAEwG,KAAK,CAAC6D,SAAS,CAAC,CACrCnJ,QAAQ,EAAE;;AAEb;AACA;AACA;;AAEAsF,KAAK,CAACqG,MAAM,GAAGvK,KAAK,CAAC,CAAC,CAAC,EAAEkE,KAAK,CAAC;;AAE/B;AACA;AACA;;AAEAA,KAAK,CAACvI,GAAG,GAAGqE,KAAK,CAAC,CAAC,CAAC,EAAEkE,KAAK,CAACqG,MAAM,EAAE;EAClChD,KAAK,EAAE,wBAAwB,CAAC;EAAA,EAC5B,wDAAwD,CAAC;EAAA,EACzD,sFAAsF,CAAC;AAC7F,CAAC,CAAC;;AAEFrD,KAAK,CAACvI,GAAG,CAAC4L,KAAK,GAAGjJ,IAAI,CAAC4F,KAAK,CAACvI,GAAG,CAAC4L,KAAK,CAAC,CACpC7J,OAAO,CAAC,IAAI,EAAEwG,KAAK,CAACW,EAAE,CAAC,CACvBnH,OAAO,CAAC,SAAS,EAAE,eAAe,CAAC,CACnCA,OAAO,CAAC,YAAY,EAAE,SAAS,CAAC,CAChCA,OAAO,CAAC,MAAM,EAAE,YAAY,CAAC,CAC7BA,OAAO,CAAC,QAAQ,EAAE,gDAAgD,CAAC,CACnEA,OAAO,CAAC,MAAM,EAAE,wBAAwB,CAAC,CAAC;AAAA,CAC1CA,OAAO,CAAC,MAAM,EAAE,6DAA6D,CAAC,CAC9EA,OAAO,CAAC,KAAK,EAAEwG,KAAK,CAACmG,IAAI,CAAC,CAAC;AAAA,CAC3BzL,QAAQ,EAAE;AAEbsF,KAAK,CAACvI,GAAG,CAACoM,SAAS,GAAGzJ,IAAI,CAAC4F,KAAK,CAAC8F,UAAU,CAAC,CACzCtM,OAAO,CAAC,IAAI,EAAEwG,KAAK,CAACW,EAAE,CAAC,CACvBnH,OAAO,CAAC,SAAS,EAAE,eAAe,CAAC,CACnCA,OAAO,CAAC,WAAW,EAAE,EAAE,CAAC,CAAC;AAAA,CACzBA,OAAO,CAAC,OAAO,EAAEwG,KAAK,CAACvI,GAAG,CAAC4L,KAAK,CAAC,CAAC;AAAA,CAClC7J,OAAO,CAAC,YAAY,EAAE,SAAS,CAAC,CAChCA,OAAO,CAAC,QAAQ,EAAE,gDAAgD,CAAC,CACnEA,OAAO,CAAC,MAAM,EAAE,wBAAwB,CAAC,CAAC;AAAA,CAC1CA,OAAO,CAAC,MAAM,EAAE,6DAA6D,CAAC,CAC9EA,OAAO,CAAC,KAAK,EAAEwG,KAAK,CAACmG,IAAI,CAAC,CAAC;AAAA,CAC3BzL,QAAQ,EAAE;AACb;AACA;AACA;;AAEAsF,KAAK,CAACjI,QAAQ,GAAG+D,KAAK,CAAC,CAAC,CAAC,EAAEkE,KAAK,CAACqG,MAAM,EAAE;EACvChN,IAAI,EAAEe,IAAI,CACR,8BAA8B,GAC5B,4CAA4C,CAAC;EAAA,EAC7C,sEAAsE,CAAC,CACxEZ,OAAO,CAAC,SAAS,EAAEwG,KAAK,CAACoG,QAAQ,CAAC,CAClC5M,OAAO,CAAC,MAAM,EAAE,QAAQ,GACrB,qEAAqE,GACrE,6DAA6D,GAC7D,+BAA+B,CAAC,CACnCkB,QAAQ,EAAE;EACbyI,GAAG,EAAE,mEAAmE;EACxE3C,OAAO,EAAE,wBAAwB;EACjCJ,MAAM,EAAExE,QAAQ;EAAE;EAClBgI,QAAQ,EAAE,kCAAkC;EAC5CC,SAAS,EAAEzJ,IAAI,CAAC4F,KAAK,CAACqG,MAAM,CAACP,UAAU,CAAC,CACrCtM,OAAO,CAAC,IAAI,EAAEwG,KAAK,CAACW,EAAE,CAAC,CACvBnH,OAAO,CAAC,SAAS,EAAE,iBAAiB,CAAC,CACrCA,OAAO,CAAC,UAAU,EAAEwG,KAAK,CAAC4D,QAAQ,CAAC,CACnCpK,OAAO,CAAC,YAAY,EAAE,SAAS,CAAC,CAChCA,OAAO,CAAC,SAAS,EAAE,EAAE,CAAC,CACtBA,OAAO,CAAC,OAAO,EAAE,EAAE,CAAC,CACpBA,OAAO,CAAC,OAAO,EAAE,EAAE,CAAC,CACpBkB,QAAQ;AACb,CAAC,CAAC;;AAEF;AACA;AACA;AACA,IAAM4F,MAAM,GAAG;EACblH,MAAM,EAAE,6CAA6C;EACrDsM,QAAQ,EAAE,qCAAqC;EAC/CC,GAAG,EAAE/J,QAAQ;EACbwH,GAAG,EAAE,UAAU,GACX,2BAA2B,CAAC;EAAA,EAC5B,0CAA0C,CAAC;EAAA,EAC3C,sBAAsB,CAAC;EAAA,EACvB,6BAA6B,CAAC;EAAA,EAC9B,kCAAkC;EAAE;EACxC3E,IAAI,EAAE,+CAA+C;EACrD2F,OAAO,EAAE,yBAAyB;EAClCC,MAAM,EAAE,uBAAuB;EAC/BiC,aAAa,EAAE,uBAAuB;EACtC9B,QAAQ,EAAE;IACRC,MAAM,EAAE,0DAA0D;IAClE;IACA;IACAS,SAAS,EAAE,4RAA4R;IACvSC,SAAS,EAAE,gPAAgP,CAAC;EAC9P,CAAC;;EACDjF,IAAI,EAAE,qCAAqC;EAC3CsF,EAAE,EAAE,uBAAuB;EAC3BC,GAAG,EAAE7J,QAAQ;EACbiD,IAAI,EAAE,6EAA6E;EACnF8F,WAAW,EAAE;AACf,CAAC;;AAED;AACA;AACArE,MAAM,CAACiG,YAAY,GAAG,sCAAsC;AAC5DjG,MAAM,CAACqE,WAAW,GAAGvK,IAAI,CAACkG,MAAM,CAACqE,WAAW,CAAC,CAACnL,OAAO,CAAC,cAAc,EAAE8G,MAAM,CAACiG,YAAY,CAAC,CAAC7L,QAAQ,EAAE;;AAErG;AACA4F,MAAM,CAACkG,SAAS,GAAG,2CAA2C;AAC9D;AACA;AACAlG,MAAM,CAACmG,WAAW,GAAG,6BAA6B;AAElDnG,MAAM,CAAC8F,QAAQ,GAAGhM,IAAI,CAAC4F,KAAK,CAACoG,QAAQ,CAAC,CAAC5M,OAAO,CAAC,WAAW,EAAE,KAAK,CAAC,CAACkB,QAAQ,EAAE;AAE7E4F,MAAM,CAACkE,QAAQ,CAACC,MAAM,GAAGrK,IAAI,CAACkG,MAAM,CAACkE,QAAQ,CAACC,MAAM,CAAC,CAClDjL,OAAO,CAAC,QAAQ,EAAE8G,MAAM,CAACiG,YAAY,CAAC,CACtC7L,QAAQ,EAAE;AAEb4F,MAAM,CAACkE,QAAQ,CAACU,SAAS,GAAG9K,IAAI,CAACkG,MAAM,CAACkE,QAAQ,CAACU,SAAS,EAAE,GAAG,CAAC,CAC7D1L,OAAO,CAAC,QAAQ,EAAE8G,MAAM,CAACiG,YAAY,CAAC,CACtC7L,QAAQ,EAAE;AAEb4F,MAAM,CAACkE,QAAQ,CAACW,SAAS,GAAG/K,IAAI,CAACkG,MAAM,CAACkE,QAAQ,CAACW,SAAS,EAAE,GAAG,CAAC,CAC7D3L,OAAO,CAAC,QAAQ,EAAE8G,MAAM,CAACiG,YAAY,CAAC,CACtC7L,QAAQ,EAAE;AAEb4F,MAAM,CAACC,QAAQ,GAAG,6CAA6C;AAE/DD,MAAM,CAACoG,OAAO,GAAG,8BAA8B;AAC/CpG,MAAM,CAACqG,MAAM,GAAG,8IAA8I;AAC9JrG,MAAM,CAACoF,QAAQ,GAAGtL,IAAI,CAACkG,MAAM,CAACoF,QAAQ,CAAC,CACpClM,OAAO,CAAC,QAAQ,EAAE8G,MAAM,CAACoG,OAAO,CAAC,CACjClN,OAAO,CAAC,OAAO,EAAE8G,MAAM,CAACqG,MAAM,CAAC,CAC/BjM,QAAQ,EAAE;AAEb4F,MAAM,CAACsG,UAAU,GAAG,6EAA6E;AAEjGtG,MAAM,CAAC8C,GAAG,GAAGhJ,IAAI,CAACkG,MAAM,CAAC8C,GAAG,CAAC,CAC1B5J,OAAO,CAAC,SAAS,EAAE8G,MAAM,CAAC8F,QAAQ,CAAC,CACnC5M,OAAO,CAAC,WAAW,EAAE8G,MAAM,CAACsG,UAAU,CAAC,CACvClM,QAAQ,EAAE;AAEb4F,MAAM,CAACyF,MAAM,GAAG,qDAAqD;AACrEzF,MAAM,CAACuG,KAAK,GAAG,sCAAsC;AACrDvG,MAAM,CAAC0F,MAAM,GAAG,6DAA6D;AAE7E1F,MAAM,CAAC7B,IAAI,GAAGrE,IAAI,CAACkG,MAAM,CAAC7B,IAAI,CAAC,CAC5BjF,OAAO,CAAC,OAAO,EAAE8G,MAAM,CAACyF,MAAM,CAAC,CAC/BvM,OAAO,CAAC,MAAM,EAAE8G,MAAM,CAACuG,KAAK,CAAC,CAC7BrN,OAAO,CAAC,OAAO,EAAE8G,MAAM,CAAC0F,MAAM,CAAC,CAC/BtL,QAAQ,EAAE;AAEb4F,MAAM,CAAC8D,OAAO,GAAGhK,IAAI,CAACkG,MAAM,CAAC8D,OAAO,CAAC,CAClC5K,OAAO,CAAC,OAAO,EAAE8G,MAAM,CAACyF,MAAM,CAAC,CAC/BvM,OAAO,CAAC,KAAK,EAAEwG,KAAK,CAAC+F,MAAM,CAAC,CAC5BrL,QAAQ,EAAE;AAEb4F,MAAM,CAAC+D,MAAM,GAAGjK,IAAI,CAACkG,MAAM,CAAC+D,MAAM,CAAC,CAChC7K,OAAO,CAAC,KAAK,EAAEwG,KAAK,CAAC+F,MAAM,CAAC,CAC5BrL,QAAQ,EAAE;AAEb4F,MAAM,CAACgG,aAAa,GAAGlM,IAAI,CAACkG,MAAM,CAACgG,aAAa,EAAE,GAAG,CAAC,CACnD9M,OAAO,CAAC,SAAS,EAAE8G,MAAM,CAAC8D,OAAO,CAAC,CAClC5K,OAAO,CAAC,QAAQ,EAAE8G,MAAM,CAAC+D,MAAM,CAAC,CAChC3J,QAAQ,EAAE;;AAEb;AACA;AACA;;AAEA4F,MAAM,CAAC+F,MAAM,GAAGvK,KAAK,CAAC,CAAC,CAAC,EAAEwE,MAAM,CAAC;;AAEjC;AACA;AACA;;AAEAA,MAAM,CAACvI,QAAQ,GAAG+D,KAAK,CAAC,CAAC,CAAC,EAAEwE,MAAM,CAAC+F,MAAM,EAAE;EACzCS,MAAM,EAAE;IACNjF,KAAK,EAAE,UAAU;IACjBkF,MAAM,EAAE,gEAAgE;IACxEC,MAAM,EAAE,aAAa;IACrBC,MAAM,EAAE;EACV,CAAC;EACDC,EAAE,EAAE;IACFrF,KAAK,EAAE,OAAO;IACdkF,MAAM,EAAE,4DAA4D;IACpEC,MAAM,EAAE,WAAW;IACnBC,MAAM,EAAE;EACV,CAAC;EACDxI,IAAI,EAAErE,IAAI,CAAC,yBAAyB,CAAC,CAClCZ,OAAO,CAAC,OAAO,EAAE8G,MAAM,CAACyF,MAAM,CAAC,CAC/BrL,QAAQ,EAAE;EACb0J,OAAO,EAAEhK,IAAI,CAAC,+BAA+B,CAAC,CAC3CZ,OAAO,CAAC,OAAO,EAAE8G,MAAM,CAACyF,MAAM,CAAC,CAC/BrL,QAAQ;AACb,CAAC,CAAC;;AAEF;AACA;AACA;;AAEA4F,MAAM,CAAC7I,GAAG,GAAGqE,KAAK,CAAC,CAAC,CAAC,EAAEwE,MAAM,CAAC+F,MAAM,EAAE;EACpCjN,MAAM,EAAEgB,IAAI,CAACkG,MAAM,CAAClH,MAAM,CAAC,CAACI,OAAO,CAAC,IAAI,EAAE,MAAM,CAAC,CAACkB,QAAQ,EAAE;EAC5DyM,eAAe,EAAE,2EAA2E;EAC5FxB,GAAG,EAAE,kEAAkE;EACvEE,UAAU,EAAE,4EAA4E;EACxFJ,GAAG,EAAE,8CAA8C;EACnD5G,IAAI,EAAE;AACR,CAAC,CAAC;AAEFyB,MAAM,CAAC7I,GAAG,CAACkO,GAAG,GAAGvL,IAAI,CAACkG,MAAM,CAAC7I,GAAG,CAACkO,GAAG,EAAE,GAAG,CAAC,CACvCnM,OAAO,CAAC,OAAO,EAAE8G,MAAM,CAAC7I,GAAG,CAAC0P,eAAe,CAAC,CAC5CzM,QAAQ,EAAE;AACb;AACA;AACA;;AAEA4F,MAAM,CAAC/I,MAAM,GAAGuE,KAAK,CAAC,CAAC,CAAC,EAAEwE,MAAM,CAAC7I,GAAG,EAAE;EACpC+N,EAAE,EAAEpL,IAAI,CAACkG,MAAM,CAACkF,EAAE,CAAC,CAAChM,OAAO,CAAC,MAAM,EAAE,GAAG,CAAC,CAACkB,QAAQ,EAAE;EACnDmE,IAAI,EAAEzE,IAAI,CAACkG,MAAM,CAAC7I,GAAG,CAACoH,IAAI,CAAC,CACxBrF,OAAO,CAAC,MAAM,EAAE,eAAe,CAAC,CAChCA,OAAO,CAAC,SAAS,EAAE,GAAG,CAAC,CACvBkB,QAAQ;AACb,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA,SAAStC,WAAW,CAACyG,IAAI,EAAE;EACzB,OAAOA;EACL;EAAA,CACCrF,OAAO,CAAC,MAAM,EAAE,QAAQ;EACzB;EAAA,CACCA,OAAO,CAAC,KAAK,EAAE,QAAQ;EACxB;EAAA,CACCA,OAAO,CAAC,yBAAyB,EAAE,UAAU;EAC9C;EAAA,CACCA,OAAO,CAAC,IAAI,EAAE,QAAQ;EACvB;EAAA,CACCA,OAAO,CAAC,8BAA8B,EAAE,UAAU;EACnD;EAAA,CACCA,OAAO,CAAC,IAAI,EAAE,QAAQ;EACvB;EAAA,CACCA,OAAO,CAAC,QAAQ,EAAE,QAAQ,CAAC;AAChC;;AAEA;AACA;AACA;AACA;AACA,SAAS1B,MAAM,CAAC+G,IAAI,EAAE;EACpB,IAAIuI,GAAG,GAAG,EAAE;IACVrL,CAAC;IACD5C,EAAE;EAEJ,IAAMuE,CAAC,GAAGmB,IAAI,CAAC1C,MAAM;EACrB,KAAKJ,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG2B,CAAC,EAAE3B,CAAC,EAAE,EAAE;IACtB5C,EAAE,GAAG0F,IAAI,CAACwI,UAAU,CAACtL,CAAC,CAAC;IACvB,IAAIuG,IAAI,CAACgF,MAAM,EAAE,GAAG,GAAG,EAAE;MACvBnO,EAAE,GAAG,GAAG,GAAGA,EAAE,CAACoO,QAAQ,CAAC,EAAE,CAAC;IAC5B;IACAH,GAAG,IAAI,IAAI,GAAGjO,EAAE,GAAG,GAAG;EACxB;EAEA,OAAOiO,GAAG;AACZ;;AAEA;AACA;AACA;AAFA,IAGMI,KAAK;EACT,eAAY3H,OAAO,EAAE;IAAA;IACnB,IAAI,CAACX,MAAM,GAAG,EAAE;IAChB,IAAI,CAACA,MAAM,CAACiF,KAAK,GAAG/H,MAAM,CAACqL,MAAM,CAAC,IAAI,CAAC;IACvC,IAAI,CAAC5H,OAAO,GAAGA,OAAO,IAAIrH,QAAQ;IAClC,IAAI,CAACqH,OAAO,CAACxH,SAAS,GAAG,IAAI,CAACwH,OAAO,CAACxH,SAAS,IAAI,IAAIuH,SAAS,EAAE;IAClE,IAAI,CAACvH,SAAS,GAAG,IAAI,CAACwH,OAAO,CAACxH,SAAS;IACvC,IAAI,CAACA,SAAS,CAACwH,OAAO,GAAG,IAAI,CAACA,OAAO;IACrC,IAAI,CAACxH,SAAS,CAACsG,KAAK,GAAG,IAAI;IAC3B,IAAI,CAAC+I,WAAW,GAAG,EAAE;IACrB,IAAI,CAAC5I,KAAK,GAAG;MACXC,MAAM,EAAE,KAAK;MACb+E,UAAU,EAAE,KAAK;MACjBjD,GAAG,EAAE;IACP,CAAC;IAED,IAAMd,KAAK,GAAG;MACZC,KAAK,EAAEA,KAAK,CAACqG,MAAM;MACnB/F,MAAM,EAAEA,MAAM,CAAC+F;IACjB,CAAC;IAED,IAAI,IAAI,CAACxG,OAAO,CAAC9H,QAAQ,EAAE;MACzBgI,KAAK,CAACC,KAAK,GAAGA,KAAK,CAACjI,QAAQ;MAC5BgI,KAAK,CAACO,MAAM,GAAGA,MAAM,CAACvI,QAAQ;IAChC,CAAC,MAAM,IAAI,IAAI,CAAC8H,OAAO,CAACpI,GAAG,EAAE;MAC3BsI,KAAK,CAACC,KAAK,GAAGA,KAAK,CAACvI,GAAG;MACvB,IAAI,IAAI,CAACoI,OAAO,CAACtI,MAAM,EAAE;QACvBwI,KAAK,CAACO,MAAM,GAAGA,MAAM,CAAC/I,MAAM;MAC9B,CAAC,MAAM;QACLwI,KAAK,CAACO,MAAM,GAAGA,MAAM,CAAC7I,GAAG;MAC3B;IACF;IACA,IAAI,CAACY,SAAS,CAAC0H,KAAK,GAAGA,KAAK;EAC9B;;EAEA;AACF;AACA;EAFE;IAAA;IAAA;IA0BA;AACF;AACA;IACE,aAAID,GAAG,EAAE;MACPA,GAAG,GAAGA,GAAG,CACNtG,OAAO,CAAC,UAAU,EAAE,IAAI,CAAC;MAE5B,IAAI,CAACsH,WAAW,CAAChB,GAAG,EAAE,IAAI,CAACZ,MAAM,CAAC;MAElC,IAAIyI,IAAI;MACR,OAAOA,IAAI,GAAG,IAAI,CAACD,WAAW,CAACtK,KAAK,EAAE,EAAE;QACtC,IAAI,CAAC+B,YAAY,CAACwI,IAAI,CAAC7H,GAAG,EAAE6H,IAAI,CAACzI,MAAM,CAAC;MAC1C;MAEA,OAAO,IAAI,CAACA,MAAM;IACpB;;IAEA;AACF;AACA;EAFE;IAAA;IAAA,OAGA,qBAAYY,GAAG,EAAe;MAAA;MAAA,IAAbZ,MAAM,uEAAG,EAAE;MAC1B,IAAI,IAAI,CAACW,OAAO,CAAC9H,QAAQ,EAAE;QACzB+H,GAAG,GAAGA,GAAG,CAACtG,OAAO,CAAC,KAAK,EAAE,MAAM,CAAC,CAACA,OAAO,CAAC,QAAQ,EAAE,EAAE,CAAC;MACxD,CAAC,MAAM;QACLsG,GAAG,GAAGA,GAAG,CAACtG,OAAO,CAAC,cAAc,EAAE,UAACG,CAAC,EAAEiO,OAAO,EAAEC,IAAI,EAAK;UACtD,OAAOD,OAAO,GAAG,MAAM,CAAC1F,MAAM,CAAC2F,IAAI,CAAC1L,MAAM,CAAC;QAC7C,CAAC,CAAC;MACJ;MAEA,IAAI6C,KAAK,EAAE8I,SAAS,EAAEC,MAAM,EAAEC,oBAAoB;MAAC,6BAEvC;QACV,IAAI,KAAI,CAACnI,OAAO,CAACrI,UAAU,IACtB,KAAI,CAACqI,OAAO,CAACrI,UAAU,CAACwI,KAAK,IAC7B,KAAI,CAACH,OAAO,CAACrI,UAAU,CAACwI,KAAK,CAACiD,IAAI,CAAC,UAACgF,YAAY,EAAK;UACtD,IAAIjJ,KAAK,GAAGiJ,YAAY,CAAC1L,IAAI,CAAC;YAAEoC,KAAK,EAAE;UAAK,CAAC,EAAEmB,GAAG,EAAEZ,MAAM,CAAC,EAAE;YAC3DY,GAAG,GAAGA,GAAG,CAAC5F,SAAS,CAAC8E,KAAK,CAACN,GAAG,CAACvC,MAAM,CAAC;YACrC+C,MAAM,CAAC3B,IAAI,CAACyB,KAAK,CAAC;YAClB,OAAO,IAAI;UACb;UACA,OAAO,KAAK;QACd,CAAC,CAAC,EAAE;UAAA;QAEN;;QAEA;QACA,IAAIA,KAAK,GAAG,KAAI,CAAC3G,SAAS,CAAC6P,KAAK,CAACpI,GAAG,CAAC,EAAE;UACrCA,GAAG,GAAGA,GAAG,CAAC5F,SAAS,CAAC8E,KAAK,CAACN,GAAG,CAACvC,MAAM,CAAC;UACrC,IAAI6C,KAAK,CAACN,GAAG,CAACvC,MAAM,KAAK,CAAC,IAAI+C,MAAM,CAAC/C,MAAM,GAAG,CAAC,EAAE;YAC/C;YACA;YACA+C,MAAM,CAACA,MAAM,CAAC/C,MAAM,GAAG,CAAC,CAAC,CAACuC,GAAG,IAAI,IAAI;UACvC,CAAC,MAAM;YACLQ,MAAM,CAAC3B,IAAI,CAACyB,KAAK,CAAC;UACpB;UAAC;QAEH;;QAEA;QACA,IAAIA,KAAK,GAAG,KAAI,CAAC3G,SAAS,CAAC6H,IAAI,CAACJ,GAAG,CAAC,EAAE;UACpCA,GAAG,GAAGA,GAAG,CAAC5F,SAAS,CAAC8E,KAAK,CAACN,GAAG,CAACvC,MAAM,CAAC;UACrC2L,SAAS,GAAG5I,MAAM,CAACA,MAAM,CAAC/C,MAAM,GAAG,CAAC,CAAC;UACrC;UACA,IAAI2L,SAAS,KAAKA,SAAS,CAAC7I,IAAI,KAAK,WAAW,IAAI6I,SAAS,CAAC7I,IAAI,KAAK,MAAM,CAAC,EAAE;YAC9E6I,SAAS,CAACpJ,GAAG,IAAI,IAAI,GAAGM,KAAK,CAACN,GAAG;YACjCoJ,SAAS,CAACjJ,IAAI,IAAI,IAAI,GAAGG,KAAK,CAACH,IAAI;YACnC,KAAI,CAAC6I,WAAW,CAAC,KAAI,CAACA,WAAW,CAACvL,MAAM,GAAG,CAAC,CAAC,CAAC2D,GAAG,GAAGgI,SAAS,CAACjJ,IAAI;UACpE,CAAC,MAAM;YACLK,MAAM,CAAC3B,IAAI,CAACyB,KAAK,CAAC;UACpB;UAAC;QAEH;;QAEA;QACA,IAAIA,KAAK,GAAG,KAAI,CAAC3G,SAAS,CAAC+H,MAAM,CAACN,GAAG,CAAC,EAAE;UACtCA,GAAG,GAAGA,GAAG,CAAC5F,SAAS,CAAC8E,KAAK,CAACN,GAAG,CAACvC,MAAM,CAAC;UACrC+C,MAAM,CAAC3B,IAAI,CAACyB,KAAK,CAAC;UAAC;QAErB;;QAEA;QACA,IAAIA,KAAK,GAAG,KAAI,CAAC3G,SAAS,CAACmI,OAAO,CAACV,GAAG,CAAC,EAAE;UACvCA,GAAG,GAAGA,GAAG,CAAC5F,SAAS,CAAC8E,KAAK,CAACN,GAAG,CAACvC,MAAM,CAAC;UACrC+C,MAAM,CAAC3B,IAAI,CAACyB,KAAK,CAAC;UAAC;QAErB;;QAEA;QACA,IAAIA,KAAK,GAAG,KAAI,CAAC3G,SAAS,CAACsI,EAAE,CAACb,GAAG,CAAC,EAAE;UAClCA,GAAG,GAAGA,GAAG,CAAC5F,SAAS,CAAC8E,KAAK,CAACN,GAAG,CAACvC,MAAM,CAAC;UACrC+C,MAAM,CAAC3B,IAAI,CAACyB,KAAK,CAAC;UAAC;QAErB;;QAEA;QACA,IAAIA,KAAK,GAAG,KAAI,CAAC3G,SAAS,CAACuI,UAAU,CAACd,GAAG,CAAC,EAAE;UAC1CA,GAAG,GAAGA,GAAG,CAAC5F,SAAS,CAAC8E,KAAK,CAACN,GAAG,CAACvC,MAAM,CAAC;UACrC+C,MAAM,CAAC3B,IAAI,CAACyB,KAAK,CAAC;UAAC;QAErB;;QAEA;QACA,IAAIA,KAAK,GAAG,KAAI,CAAC3G,SAAS,CAAC0I,IAAI,CAACjB,GAAG,CAAC,EAAE;UACpCA,GAAG,GAAGA,GAAG,CAAC5F,SAAS,CAAC8E,KAAK,CAACN,GAAG,CAACvC,MAAM,CAAC;UACrC+C,MAAM,CAAC3B,IAAI,CAACyB,KAAK,CAAC;UAAC;QAErB;;QAEA;QACA,IAAIA,KAAK,GAAG,KAAI,CAAC3G,SAAS,CAACgB,IAAI,CAACyG,GAAG,CAAC,EAAE;UACpCA,GAAG,GAAGA,GAAG,CAAC5F,SAAS,CAAC8E,KAAK,CAACN,GAAG,CAACvC,MAAM,CAAC;UACrC+C,MAAM,CAAC3B,IAAI,CAACyB,KAAK,CAAC;UAAC;QAErB;;QAEA;QACA,IAAIA,KAAK,GAAG,KAAI,CAAC3G,SAAS,CAAC8K,GAAG,CAACrD,GAAG,CAAC,EAAE;UACnCA,GAAG,GAAGA,GAAG,CAAC5F,SAAS,CAAC8E,KAAK,CAACN,GAAG,CAACvC,MAAM,CAAC;UACrC2L,SAAS,GAAG5I,MAAM,CAACA,MAAM,CAAC/C,MAAM,GAAG,CAAC,CAAC;UACrC,IAAI2L,SAAS,KAAKA,SAAS,CAAC7I,IAAI,KAAK,WAAW,IAAI6I,SAAS,CAAC7I,IAAI,KAAK,MAAM,CAAC,EAAE;YAC9E6I,SAAS,CAACpJ,GAAG,IAAI,IAAI,GAAGM,KAAK,CAACN,GAAG;YACjCoJ,SAAS,CAACjJ,IAAI,IAAI,IAAI,GAAGG,KAAK,CAACN,GAAG;YAClC,KAAI,CAACgJ,WAAW,CAAC,KAAI,CAACA,WAAW,CAACvL,MAAM,GAAG,CAAC,CAAC,CAAC2D,GAAG,GAAGgI,SAAS,CAACjJ,IAAI;UACpE,CAAC,MAAM,IAAI,CAAC,KAAI,CAACK,MAAM,CAACiF,KAAK,CAACnF,KAAK,CAACoE,GAAG,CAAC,EAAE;YACxC,KAAI,CAAClE,MAAM,CAACiF,KAAK,CAACnF,KAAK,CAACoE,GAAG,CAAC,GAAG;cAC7BrI,IAAI,EAAEiE,KAAK,CAACjE,IAAI;cAChB6D,KAAK,EAAEI,KAAK,CAACJ;YACf,CAAC;UACH;UAAC;QAEH;;QAEA;QACA,IAAII,KAAK,GAAG,KAAI,CAAC3G,SAAS,CAACgL,KAAK,CAACvD,GAAG,CAAC,EAAE;UACrCA,GAAG,GAAGA,GAAG,CAAC5F,SAAS,CAAC8E,KAAK,CAACN,GAAG,CAACvC,MAAM,CAAC;UACrC+C,MAAM,CAAC3B,IAAI,CAACyB,KAAK,CAAC;UAAC;QAErB;;QAEA;QACA,IAAIA,KAAK,GAAG,KAAI,CAAC3G,SAAS,CAACuL,QAAQ,CAAC9D,GAAG,CAAC,EAAE;UACxCA,GAAG,GAAGA,GAAG,CAAC5F,SAAS,CAAC8E,KAAK,CAACN,GAAG,CAACvC,MAAM,CAAC;UACrC+C,MAAM,CAAC3B,IAAI,CAACyB,KAAK,CAAC;UAAC;QAErB;;QAEA;QACA;QACA+I,MAAM,GAAGjI,GAAG;QACZ,IAAI,KAAI,CAACD,OAAO,CAACrI,UAAU,IAAI,KAAI,CAACqI,OAAO,CAACrI,UAAU,CAAC2Q,UAAU,EAAE;UACjE,IAAIC,UAAU,GAAGC,QAAQ;UACzB,IAAMC,OAAO,GAAGxI,GAAG,CAACjC,KAAK,CAAC,CAAC,CAAC;UAC5B,IAAI0K,SAAS;UACb,KAAI,CAAC1I,OAAO,CAACrI,UAAU,CAAC2Q,UAAU,CAACK,OAAO,CAAC,UAASC,aAAa,EAAE;YACjEF,SAAS,GAAGE,aAAa,CAAClM,IAAI,CAAC;cAAEoC,KAAK,EAAE;YAAK,CAAC,EAAE2J,OAAO,CAAC;YACxD,IAAI,OAAOC,SAAS,KAAK,QAAQ,IAAIA,SAAS,IAAI,CAAC,EAAE;cAAEH,UAAU,GAAG9F,IAAI,CAACC,GAAG,CAAC6F,UAAU,EAAEG,SAAS,CAAC;YAAE;UACvG,CAAC,CAAC;UACF,IAAIH,UAAU,GAAGC,QAAQ,IAAID,UAAU,IAAI,CAAC,EAAE;YAC5CL,MAAM,GAAGjI,GAAG,CAAC5F,SAAS,CAAC,CAAC,EAAEkO,UAAU,GAAG,CAAC,CAAC;UAC3C;QACF;QACA,IAAI,KAAI,CAACtJ,KAAK,CAAC+B,GAAG,KAAK7B,KAAK,GAAG,KAAI,CAAC3G,SAAS,CAACwL,SAAS,CAACkE,MAAM,CAAC,CAAC,EAAE;UAChED,SAAS,GAAG5I,MAAM,CAACA,MAAM,CAAC/C,MAAM,GAAG,CAAC,CAAC;UACrC,IAAI6L,oBAAoB,IAAIF,SAAS,CAAC7I,IAAI,KAAK,WAAW,EAAE;YAC1D6I,SAAS,CAACpJ,GAAG,IAAI,IAAI,GAAGM,KAAK,CAACN,GAAG;YACjCoJ,SAAS,CAACjJ,IAAI,IAAI,IAAI,GAAGG,KAAK,CAACH,IAAI;YACnC,KAAI,CAAC6I,WAAW,CAACrK,GAAG,EAAE;YACtB,KAAI,CAACqK,WAAW,CAAC,KAAI,CAACA,WAAW,CAACvL,MAAM,GAAG,CAAC,CAAC,CAAC2D,GAAG,GAAGgI,SAAS,CAACjJ,IAAI;UACpE,CAAC,MAAM;YACLK,MAAM,CAAC3B,IAAI,CAACyB,KAAK,CAAC;UACpB;UACAgJ,oBAAoB,GAAID,MAAM,CAAC5L,MAAM,KAAK2D,GAAG,CAAC3D,MAAO;UACrD2D,GAAG,GAAGA,GAAG,CAAC5F,SAAS,CAAC8E,KAAK,CAACN,GAAG,CAACvC,MAAM,CAAC;UAAC;QAExC;;QAEA;QACA,IAAI6C,KAAK,GAAG,KAAI,CAAC3G,SAAS,CAACwG,IAAI,CAACiB,GAAG,CAAC,EAAE;UACpCA,GAAG,GAAGA,GAAG,CAAC5F,SAAS,CAAC8E,KAAK,CAACN,GAAG,CAACvC,MAAM,CAAC;UACrC2L,SAAS,GAAG5I,MAAM,CAACA,MAAM,CAAC/C,MAAM,GAAG,CAAC,CAAC;UACrC,IAAI2L,SAAS,IAAIA,SAAS,CAAC7I,IAAI,KAAK,MAAM,EAAE;YAC1C6I,SAAS,CAACpJ,GAAG,IAAI,IAAI,GAAGM,KAAK,CAACN,GAAG;YACjCoJ,SAAS,CAACjJ,IAAI,IAAI,IAAI,GAAGG,KAAK,CAACH,IAAI;YACnC,KAAI,CAAC6I,WAAW,CAACrK,GAAG,EAAE;YACtB,KAAI,CAACqK,WAAW,CAAC,KAAI,CAACA,WAAW,CAACvL,MAAM,GAAG,CAAC,CAAC,CAAC2D,GAAG,GAAGgI,SAAS,CAACjJ,IAAI;UACpE,CAAC,MAAM;YACLK,MAAM,CAAC3B,IAAI,CAACyB,KAAK,CAAC;UACpB;UAAC;QAEH;QAEA,IAAIc,GAAG,EAAE;UACP,IAAM4I,MAAM,GAAG,yBAAyB,GAAG5I,GAAG,CAACuH,UAAU,CAAC,CAAC,CAAC;UAC5D,IAAI,KAAI,CAACxH,OAAO,CAAC1H,MAAM,EAAE;YACvB+F,OAAO,CAACyK,KAAK,CAACD,MAAM,CAAC;YAAC;UAExB,CAAC,MAAM;YACL,MAAM,IAAIE,KAAK,CAACF,MAAM,CAAC;UACzB;QACF;MACF,CAAC;MAzKD,OAAO5I,GAAG;QAAA;QAAA,yBAWN;QAAS,sBAyJP;MAAM;MAOZ,IAAI,CAAChB,KAAK,CAAC+B,GAAG,GAAG,IAAI;MACrB,OAAO3B,MAAM;IACf;EAAC;IAAA;IAAA,OAED,gBAAOY,GAAG,EAAe;MAAA,IAAbZ,MAAM,uEAAG,EAAE;MACrB,IAAI,CAACwI,WAAW,CAACnK,IAAI,CAAC;QAAEuC,GAAG,EAAHA,GAAG;QAAEZ,MAAM,EAANA;MAAO,CAAC,CAAC;MACtC,OAAOA,MAAM;IACf;;IAEA;AACF;AACA;EAFE;IAAA;IAAA,OAGA,sBAAaY,GAAG,EAAe;MAAA;MAAA,IAAbZ,MAAM,uEAAG,EAAE;MAC3B,IAAIF,KAAK,EAAE8I,SAAS,EAAEC,MAAM;;MAE5B;MACA,IAAIzD,SAAS,GAAGxE,GAAG;MACnB,IAAIlD,KAAK;MACT,IAAIiM,YAAY,EAAEtE,QAAQ;;MAE1B;MACA,IAAI,IAAI,CAACrF,MAAM,CAACiF,KAAK,EAAE;QACrB,IAAMA,KAAK,GAAG/H,MAAM,CAAC0M,IAAI,CAAC,IAAI,CAAC5J,MAAM,CAACiF,KAAK,CAAC;QAC5C,IAAIA,KAAK,CAAChI,MAAM,GAAG,CAAC,EAAE;UACpB,OAAO,CAACS,KAAK,GAAG,IAAI,CAACvE,SAAS,CAAC0H,KAAK,CAACO,MAAM,CAACgG,aAAa,CAACzK,IAAI,CAACyI,SAAS,CAAC,KAAK,IAAI,EAAE;YAClF,IAAIH,KAAK,CAAC4E,QAAQ,CAACnM,KAAK,CAAC,CAAC,CAAC,CAACiB,KAAK,CAACjB,KAAK,CAAC,CAAC,CAAC,CAACoM,WAAW,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE;cACrE1E,SAAS,GAAGA,SAAS,CAACzG,KAAK,CAAC,CAAC,EAAEjB,KAAK,CAACyI,KAAK,CAAC,GAAG,GAAG,GAAGjH,YAAY,CAAC,GAAG,EAAExB,KAAK,CAAC,CAAC,CAAC,CAACT,MAAM,GAAG,CAAC,CAAC,GAAG,GAAG,GAAGmI,SAAS,CAACzG,KAAK,CAAC,IAAI,CAACxF,SAAS,CAAC0H,KAAK,CAACO,MAAM,CAACgG,aAAa,CAAClB,SAAS,CAAC;YACzK;UACF;QACF;MACF;MACA;MACA,OAAO,CAACxI,KAAK,GAAG,IAAI,CAACvE,SAAS,CAAC0H,KAAK,CAACO,MAAM,CAACkG,SAAS,CAAC3K,IAAI,CAACyI,SAAS,CAAC,KAAK,IAAI,EAAE;QAC9EA,SAAS,GAAGA,SAAS,CAACzG,KAAK,CAAC,CAAC,EAAEjB,KAAK,CAACyI,KAAK,CAAC,GAAG,GAAG,GAAGjH,YAAY,CAAC,GAAG,EAAExB,KAAK,CAAC,CAAC,CAAC,CAACT,MAAM,GAAG,CAAC,CAAC,GAAG,GAAG,GAAGmI,SAAS,CAACzG,KAAK,CAAC,IAAI,CAACxF,SAAS,CAAC0H,KAAK,CAACO,MAAM,CAACkG,SAAS,CAACpB,SAAS,CAAC;MACrK;;MAEA;MACA,OAAO,CAACxI,KAAK,GAAG,IAAI,CAACvE,SAAS,CAAC0H,KAAK,CAACO,MAAM,CAACmG,WAAW,CAAC5K,IAAI,CAACyI,SAAS,CAAC,KAAK,IAAI,EAAE;QAChFA,SAAS,GAAGA,SAAS,CAACzG,KAAK,CAAC,CAAC,EAAEjB,KAAK,CAACyI,KAAK,GAAGzI,KAAK,CAAC,CAAC,CAAC,CAACT,MAAM,GAAG,CAAC,CAAC,GAAG,IAAI,GAAGmI,SAAS,CAACzG,KAAK,CAAC,IAAI,CAACxF,SAAS,CAAC0H,KAAK,CAACO,MAAM,CAACmG,WAAW,CAACrB,SAAS,CAAC;QAC7I,IAAI,CAAC/M,SAAS,CAAC0H,KAAK,CAACO,MAAM,CAACmG,WAAW,CAACrB,SAAS,EAAE;MACrD;MAAC,+BAEW;QACV,IAAI,CAACyD,YAAY,EAAE;UACjBtE,QAAQ,GAAG,EAAE;QACf;QACAsE,YAAY,GAAG,KAAK;;QAEpB;QACA,IAAI,MAAI,CAAChJ,OAAO,CAACrI,UAAU,IACtB,MAAI,CAACqI,OAAO,CAACrI,UAAU,CAAC8I,MAAM,IAC9B,MAAI,CAACT,OAAO,CAACrI,UAAU,CAAC8I,MAAM,CAAC2C,IAAI,CAAC,UAACgF,YAAY,EAAK;UACvD,IAAIjJ,KAAK,GAAGiJ,YAAY,CAAC1L,IAAI,CAAC;YAAEoC,KAAK,EAAE;UAAK,CAAC,EAAEmB,GAAG,EAAEZ,MAAM,CAAC,EAAE;YAC3DY,GAAG,GAAGA,GAAG,CAAC5F,SAAS,CAAC8E,KAAK,CAACN,GAAG,CAACvC,MAAM,CAAC;YACrC+C,MAAM,CAAC3B,IAAI,CAACyB,KAAK,CAAC;YAClB,OAAO,IAAI;UACb;UACA,OAAO,KAAK;QACd,CAAC,CAAC,EAAE;UAAA;QAEN;;QAEA;QACA,IAAIA,KAAK,GAAG,MAAI,CAAC3G,SAAS,CAACe,MAAM,CAAC0G,GAAG,CAAC,EAAE;UACtCA,GAAG,GAAGA,GAAG,CAAC5F,SAAS,CAAC8E,KAAK,CAACN,GAAG,CAACvC,MAAM,CAAC;UACrC+C,MAAM,CAAC3B,IAAI,CAACyB,KAAK,CAAC;UAAC;QAErB;;QAEA;QACA,IAAIA,KAAK,GAAG,MAAI,CAAC3G,SAAS,CAAC+K,GAAG,CAACtD,GAAG,CAAC,EAAE;UACnCA,GAAG,GAAGA,GAAG,CAAC5F,SAAS,CAAC8E,KAAK,CAACN,GAAG,CAACvC,MAAM,CAAC;UACrC2L,SAAS,GAAG5I,MAAM,CAACA,MAAM,CAAC/C,MAAM,GAAG,CAAC,CAAC;UACrC,IAAI2L,SAAS,IAAI9I,KAAK,CAACC,IAAI,KAAK,MAAM,IAAI6I,SAAS,CAAC7I,IAAI,KAAK,MAAM,EAAE;YACnE6I,SAAS,CAACpJ,GAAG,IAAIM,KAAK,CAACN,GAAG;YAC1BoJ,SAAS,CAACjJ,IAAI,IAAIG,KAAK,CAACH,IAAI;UAC9B,CAAC,MAAM;YACLK,MAAM,CAAC3B,IAAI,CAACyB,KAAK,CAAC;UACpB;UAAC;QAEH;;QAEA;QACA,IAAIA,KAAK,GAAG,MAAI,CAAC3G,SAAS,CAACoG,IAAI,CAACqB,GAAG,CAAC,EAAE;UACpCA,GAAG,GAAGA,GAAG,CAAC5F,SAAS,CAAC8E,KAAK,CAACN,GAAG,CAACvC,MAAM,CAAC;UACrC+C,MAAM,CAAC3B,IAAI,CAACyB,KAAK,CAAC;UAAC;QAErB;;QAEA;QACA,IAAIA,KAAK,GAAG,MAAI,CAAC3G,SAAS,CAAC+L,OAAO,CAACtE,GAAG,EAAE,MAAI,CAACZ,MAAM,CAACiF,KAAK,CAAC,EAAE;UAC1DrE,GAAG,GAAGA,GAAG,CAAC5F,SAAS,CAAC8E,KAAK,CAACN,GAAG,CAACvC,MAAM,CAAC;UACrC2L,SAAS,GAAG5I,MAAM,CAACA,MAAM,CAAC/C,MAAM,GAAG,CAAC,CAAC;UACrC,IAAI2L,SAAS,IAAI9I,KAAK,CAACC,IAAI,KAAK,MAAM,IAAI6I,SAAS,CAAC7I,IAAI,KAAK,MAAM,EAAE;YACnE6I,SAAS,CAACpJ,GAAG,IAAIM,KAAK,CAACN,GAAG;YAC1BoJ,SAAS,CAACjJ,IAAI,IAAIG,KAAK,CAACH,IAAI;UAC9B,CAAC,MAAM;YACLK,MAAM,CAAC3B,IAAI,CAACyB,KAAK,CAAC;UACpB;UAAC;QAEH;;QAEA;QACA,IAAIA,KAAK,GAAG,MAAI,CAAC3G,SAAS,CAACmM,QAAQ,CAAC1E,GAAG,EAAEwE,SAAS,EAAEC,QAAQ,CAAC,EAAE;UAC7DzE,GAAG,GAAGA,GAAG,CAAC5F,SAAS,CAAC8E,KAAK,CAACN,GAAG,CAACvC,MAAM,CAAC;UACrC+C,MAAM,CAAC3B,IAAI,CAACyB,KAAK,CAAC;UAAC;QAErB;;QAEA;QACA,IAAIA,KAAK,GAAG,MAAI,CAAC3G,SAAS,CAAC4Q,QAAQ,CAACnJ,GAAG,CAAC,EAAE;UACxCA,GAAG,GAAGA,GAAG,CAAC5F,SAAS,CAAC8E,KAAK,CAACN,GAAG,CAACvC,MAAM,CAAC;UACrC+C,MAAM,CAAC3B,IAAI,CAACyB,KAAK,CAAC;UAAC;QAErB;;QAEA;QACA,IAAIA,KAAK,GAAG,MAAI,CAAC3G,SAAS,CAACmN,EAAE,CAAC1F,GAAG,CAAC,EAAE;UAClCA,GAAG,GAAGA,GAAG,CAAC5F,SAAS,CAAC8E,KAAK,CAACN,GAAG,CAACvC,MAAM,CAAC;UACrC+C,MAAM,CAAC3B,IAAI,CAACyB,KAAK,CAAC;UAAC;QAErB;;QAEA;QACA,IAAIA,KAAK,GAAG,MAAI,CAAC3G,SAAS,CAACoN,GAAG,CAAC3F,GAAG,CAAC,EAAE;UACnCA,GAAG,GAAGA,GAAG,CAAC5F,SAAS,CAAC8E,KAAK,CAACN,GAAG,CAACvC,MAAM,CAAC;UACrC+C,MAAM,CAAC3B,IAAI,CAACyB,KAAK,CAAC;UAAC;QAErB;;QAEA;QACA,IAAIA,KAAK,GAAG,MAAI,CAAC3G,SAAS,CAACqN,QAAQ,CAAC5F,GAAG,EAAEhI,MAAM,CAAC,EAAE;UAChDgI,GAAG,GAAGA,GAAG,CAAC5F,SAAS,CAAC8E,KAAK,CAACN,GAAG,CAACvC,MAAM,CAAC;UACrC+C,MAAM,CAAC3B,IAAI,CAACyB,KAAK,CAAC;UAAC;QAErB;;QAEA;QACA,IAAI,CAAC,MAAI,CAACF,KAAK,CAACC,MAAM,KAAKC,KAAK,GAAG,MAAI,CAAC3G,SAAS,CAACsN,GAAG,CAAC7F,GAAG,EAAEhI,MAAM,CAAC,CAAC,EAAE;UACnEgI,GAAG,GAAGA,GAAG,CAAC5F,SAAS,CAAC8E,KAAK,CAACN,GAAG,CAACvC,MAAM,CAAC;UACrC+C,MAAM,CAAC3B,IAAI,CAACyB,KAAK,CAAC;UAAC;QAErB;;QAEA;QACA;QACA+I,MAAM,GAAGjI,GAAG;QACZ,IAAI,MAAI,CAACD,OAAO,CAACrI,UAAU,IAAI,MAAI,CAACqI,OAAO,CAACrI,UAAU,CAAC0R,WAAW,EAAE;UAClE,IAAId,UAAU,GAAGC,QAAQ;UACzB,IAAMC,OAAO,GAAGxI,GAAG,CAACjC,KAAK,CAAC,CAAC,CAAC;UAC5B,IAAI0K,SAAS;UACb,MAAI,CAAC1I,OAAO,CAACrI,UAAU,CAAC0R,WAAW,CAACV,OAAO,CAAC,UAASC,aAAa,EAAE;YAClEF,SAAS,GAAGE,aAAa,CAAClM,IAAI,CAAC;cAAEoC,KAAK,EAAE;YAAK,CAAC,EAAE2J,OAAO,CAAC;YACxD,IAAI,OAAOC,SAAS,KAAK,QAAQ,IAAIA,SAAS,IAAI,CAAC,EAAE;cAAEH,UAAU,GAAG9F,IAAI,CAACC,GAAG,CAAC6F,UAAU,EAAEG,SAAS,CAAC;YAAE;UACvG,CAAC,CAAC;UACF,IAAIH,UAAU,GAAGC,QAAQ,IAAID,UAAU,IAAI,CAAC,EAAE;YAC5CL,MAAM,GAAGjI,GAAG,CAAC5F,SAAS,CAAC,CAAC,EAAEkO,UAAU,GAAG,CAAC,CAAC;UAC3C;QACF;QACA,IAAIpJ,KAAK,GAAG,MAAI,CAAC3G,SAAS,CAAC8Q,UAAU,CAACpB,MAAM,EAAE3P,WAAW,CAAC,EAAE;UAC1D0H,GAAG,GAAGA,GAAG,CAAC5F,SAAS,CAAC8E,KAAK,CAACN,GAAG,CAACvC,MAAM,CAAC;UACrC,IAAI6C,KAAK,CAACN,GAAG,CAACb,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;YAAE;YACjC0G,QAAQ,GAAGvF,KAAK,CAACN,GAAG,CAACb,KAAK,CAAC,CAAC,CAAC,CAAC;UAChC;UACAgL,YAAY,GAAG,IAAI;UACnBf,SAAS,GAAG5I,MAAM,CAACA,MAAM,CAAC/C,MAAM,GAAG,CAAC,CAAC;UACrC,IAAI2L,SAAS,IAAIA,SAAS,CAAC7I,IAAI,KAAK,MAAM,EAAE;YAC1C6I,SAAS,CAACpJ,GAAG,IAAIM,KAAK,CAACN,GAAG;YAC1BoJ,SAAS,CAACjJ,IAAI,IAAIG,KAAK,CAACH,IAAI;UAC9B,CAAC,MAAM;YACLK,MAAM,CAAC3B,IAAI,CAACyB,KAAK,CAAC;UACpB;UAAC;QAEH;QAEA,IAAIc,GAAG,EAAE;UACP,IAAM4I,MAAM,GAAG,yBAAyB,GAAG5I,GAAG,CAACuH,UAAU,CAAC,CAAC,CAAC;UAC5D,IAAI,MAAI,CAACxH,OAAO,CAAC1H,MAAM,EAAE;YACvB+F,OAAO,CAACyK,KAAK,CAACD,MAAM,CAAC;YAAC;UAExB,CAAC,MAAM;YACL,MAAM,IAAIE,KAAK,CAACF,MAAM,CAAC;UACzB;QACF;MACF,CAAC;MA9ID,OAAO5I,GAAG;QAAA;QAAA,0BAiBN;QAAS,uBAwHP;MAAM;MAOZ,OAAOZ,MAAM;IACf;EAAC;IAAA;IAAA,KA5ZD,eAAmB;MACjB,OAAO;QACLc,KAAK,EAALA,KAAK;QACLM,MAAM,EAANA;MACF,CAAC;IACH;;IAEA;AACF;AACA;EAFE;IAAA;IAAA,OAGA,aAAWR,GAAG,EAAED,OAAO,EAAE;MACvB,IAAMlB,KAAK,GAAG,IAAI6I,KAAK,CAAC3H,OAAO,CAAC;MAChC,OAAOlB,KAAK,CAACyK,GAAG,CAACtJ,GAAG,CAAC;IACvB;;IAEA;AACF;AACA;EAFE;IAAA;IAAA,OAGA,mBAAiBA,GAAG,EAAED,OAAO,EAAE;MAC7B,IAAMlB,KAAK,GAAG,IAAI6I,KAAK,CAAC3H,OAAO,CAAC;MAChC,OAAOlB,KAAK,CAACQ,YAAY,CAACW,GAAG,CAAC;IAChC;EAAC;EAAA;AAAA;AA0YH;AACA;AACA;AAFA,IAGMuJ,QAAQ;EACZ,kBAAYxJ,OAAO,EAAE;IAAA;IACnB,IAAI,CAACA,OAAO,GAAGA,OAAO,IAAIrH,QAAQ;EACpC;EAAC;IAAA;IAAA,OAED,cAAK0H,KAAI,EAAEoJ,UAAU,EAAEvM,OAAO,EAAE;MAC9B,IAAMsD,IAAI,GAAG,CAACiJ,UAAU,IAAI,EAAE,EAAE1M,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;MAC/C,IAAI,IAAI,CAACiD,OAAO,CAACjI,SAAS,EAAE;QAC1B,IAAMwP,GAAG,GAAG,IAAI,CAACvH,OAAO,CAACjI,SAAS,CAACsI,KAAI,EAAEG,IAAI,CAAC;QAC9C,IAAI+G,GAAG,IAAI,IAAI,IAAIA,GAAG,KAAKlH,KAAI,EAAE;UAC/BnD,OAAO,GAAG,IAAI;UACdmD,KAAI,GAAGkH,GAAG;QACZ;MACF;MAEAlH,KAAI,GAAGA,KAAI,CAAC1G,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,GAAG,IAAI;MAErC,IAAI,CAAC6G,IAAI,EAAE;QACT,OAAO,aAAa,IACftD,OAAO,GAAGmD,KAAI,GAAG9G,OAAM,CAAC8G,KAAI,EAAE,IAAI,CAAC,CAAC,GACrC,iBAAiB;MACvB;MAEA,OAAO,oBAAoB,GACvB,IAAI,CAACL,OAAO,CAAChI,UAAU,GACvBuB,OAAM,CAACiH,IAAI,CAAC,GACZ,IAAI,IACHtD,OAAO,GAAGmD,KAAI,GAAG9G,OAAM,CAAC8G,KAAI,EAAE,IAAI,CAAC,CAAC,GACrC,iBAAiB;IACvB;;IAEA;AACF;AACA;EAFE;IAAA;IAAA,OAGA,oBAAWqJ,KAAK,EAAE;MAChB,+BAAwBA,KAAK;IAC/B;EAAC;IAAA;IAAA,OAED,cAAKlQ,KAAI,EAAE;MACT,OAAOA,KAAI;IACb;;IAEA;AACF;AACA;AACA;AACA;AACA;EALE;IAAA;IAAA,OAMA,iBAAQwF,IAAI,EAAEb,KAAK,EAAEU,GAAG,EAAE8K,OAAO,EAAE;MACjC,IAAI,IAAI,CAAC3J,OAAO,CAACnI,SAAS,EAAE;QAC1B,IAAM+R,EAAE,GAAG,IAAI,CAAC5J,OAAO,CAAClI,YAAY,GAAG6R,OAAO,CAACE,IAAI,CAAChL,GAAG,CAAC;QACxD,mBAAYV,KAAK,mBAAQyL,EAAE,gBAAK5K,IAAI,gBAAMb,KAAK;MACjD;;MAEA;MACA,mBAAYA,KAAK,cAAIa,IAAI,gBAAMb,KAAK;IACtC;EAAC;IAAA;IAAA,OAED,cAAK;MACH,OAAO,IAAI,CAAC6B,OAAO,CAACtH,KAAK,GAAG,SAAS,GAAG,QAAQ;IAClD;EAAC;IAAA;IAAA,OAED,cAAKoR,IAAI,EAAE/H,OAAO,EAAEC,KAAK,EAAE;MACzB,IAAM5C,IAAI,GAAG2C,OAAO,GAAG,IAAI,GAAG,IAAI;QAChCgI,QAAQ,GAAIhI,OAAO,IAAIC,KAAK,KAAK,CAAC,GAAK,UAAU,GAAGA,KAAK,GAAG,GAAG,GAAI,EAAE;MACvE,OAAO,GAAG,GAAG5C,IAAI,GAAG2K,QAAQ,GAAG,KAAK,GAAGD,IAAI,GAAG,IAAI,GAAG1K,IAAI,GAAG,KAAK;IACnE;;IAEA;AACF;AACA;EAFE;IAAA;IAAA,OAGA,kBAASJ,IAAI,EAAE;MACb,qBAAcA,IAAI;IACpB;EAAC;IAAA;IAAA,OAED,kBAAS+D,OAAO,EAAE;MAChB,OAAO,SAAS,IACXA,OAAO,GAAG,aAAa,GAAG,EAAE,CAAC,GAC9B,6BAA6B,IAC5B,IAAI,CAAC/C,OAAO,CAACtH,KAAK,GAAG,IAAI,GAAG,EAAE,CAAC,GAChC,IAAI;IACV;;IAEA;AACF;AACA;EAFE;IAAA;IAAA,OAGA,mBAAUsG,IAAI,EAAE;MACd,oBAAaA,IAAI;IACnB;;IAEA;AACF;AACA;AACA;EAHE;IAAA;IAAA,OAIA,eAAM0E,MAAM,EAAEoG,IAAI,EAAE;MAClB,IAAIA,IAAI,EAAEA,IAAI,oBAAaA,IAAI,aAAU;MAEzC,OAAO,WAAW,GACd,WAAW,GACXpG,MAAM,GACN,YAAY,GACZoG,IAAI,GACJ,YAAY;IAClB;;IAEA;AACF;AACA;EAFE;IAAA;IAAA,OAGA,kBAASE,OAAO,EAAE;MAChB,uBAAgBA,OAAO;IACzB;EAAC;IAAA;IAAA,OAED,mBAAUA,OAAO,EAAEC,KAAK,EAAE;MACxB,IAAM7K,IAAI,GAAG6K,KAAK,CAACvG,MAAM,GAAG,IAAI,GAAG,IAAI;MACvC,IAAMH,GAAG,GAAG0G,KAAK,CAACtG,KAAK,cACfvE,IAAI,sBAAW6K,KAAK,CAACtG,KAAK,sBAC1BvE,IAAI,MAAG;MACf,OAAOmE,GAAG,GAAGyG,OAAO,eAAQ5K,IAAI,QAAK;IACvC;;IAEA;AACF;AACA;AACA;EAHE;IAAA;IAAA,OAIA,gBAAOJ,IAAI,EAAE;MACX,yBAAkBA,IAAI;IACxB;;IAEA;AACF;AACA;EAFE;IAAA;IAAA,OAGA,YAAGA,IAAI,EAAE;MACP,qBAAcA,IAAI;IACpB;;IAEA;AACF;AACA;EAFE;IAAA;IAAA,OAGA,kBAASA,IAAI,EAAE;MACb,uBAAgBA,IAAI;IACtB;EAAC;IAAA;IAAA,OAED,cAAK;MACH,OAAO,IAAI,CAACgB,OAAO,CAACtH,KAAK,GAAG,OAAO,GAAG,MAAM;IAC9C;;IAEA;AACF;AACA;EAFE;IAAA;IAAA,OAGA,aAAIsG,IAAI,EAAE;MACR,sBAAeA,IAAI;IACrB;;IAEA;AACF;AACA;AACA;AACA;EAJE;IAAA;IAAA,OAKA,cAAK9D,IAAI,EAAE6D,KAAK,EAAEC,IAAI,EAAE;MACtB9D,IAAI,GAAGF,QAAQ,CAAC,IAAI,CAACgF,OAAO,CAAC5H,QAAQ,EAAE,IAAI,CAAC4H,OAAO,CAACvI,OAAO,EAAEyD,IAAI,CAAC;MAClE,IAAIA,IAAI,KAAK,IAAI,EAAE;QACjB,OAAO8D,IAAI;MACb;MACA,IAAIuI,GAAG,GAAG,WAAW,GAAGrM,IAAI,GAAG,GAAG;MAClC,IAAI6D,KAAK,EAAE;QACTwI,GAAG,IAAI,UAAU,GAAGxI,KAAK,GAAG,GAAG;MACjC;MACAwI,GAAG,IAAI,GAAG,GAAGvI,IAAI,GAAG,MAAM;MAC1B,OAAOuI,GAAG;IACZ;;IAEA;AACF;AACA;AACA;AACA;EAJE;IAAA;IAAA,OAKA,eAAMrM,IAAI,EAAE6D,KAAK,EAAEC,IAAI,EAAE;MACvB9D,IAAI,GAAGF,QAAQ,CAAC,IAAI,CAACgF,OAAO,CAAC5H,QAAQ,EAAE,IAAI,CAAC4H,OAAO,CAACvI,OAAO,EAAEyD,IAAI,CAAC;MAClE,IAAIA,IAAI,KAAK,IAAI,EAAE;QACjB,OAAO8D,IAAI;MACb;MAEA,IAAIuI,GAAG,wBAAgBrM,IAAI,sBAAU8D,IAAI,OAAG;MAC5C,IAAID,KAAK,EAAE;QACTwI,GAAG,uBAAexI,KAAK,OAAG;MAC5B;MACAwI,GAAG,IAAI,IAAI,CAACvH,OAAO,CAACtH,KAAK,GAAG,IAAI,GAAG,GAAG;MACtC,OAAO6O,GAAG;IACZ;EAAC;IAAA;IAAA,OAED,cAAKvI,MAAI,EAAE;MACT,OAAOA,MAAI;IACb;EAAC;EAAA;AAAA;AAGH;AACA;AACA;AACA;AAHA,IAIMkL,YAAY;EAAA;IAAA;EAAA;EAAA;IAAA;IAAA;IAChB;IACA,gBAAOlL,IAAI,EAAE;MACX,OAAOA,IAAI;IACb;EAAC;IAAA;IAAA,OAED,YAAGA,IAAI,EAAE;MACP,OAAOA,IAAI;IACb;EAAC;IAAA;IAAA,OAED,kBAASA,IAAI,EAAE;MACb,OAAOA,IAAI;IACb;EAAC;IAAA;IAAA,OAED,aAAIA,IAAI,EAAE;MACR,OAAOA,IAAI;IACb;EAAC;IAAA;IAAA,OAED,cAAKA,IAAI,EAAE;MACT,OAAOA,IAAI;IACb;EAAC;IAAA;IAAA,OAED,cAAKA,MAAI,EAAE;MACT,OAAOA,MAAI;IACb;EAAC;IAAA;IAAA,OAED,cAAK9D,IAAI,EAAE6D,KAAK,EAAEC,IAAI,EAAE;MACtB,OAAO,EAAE,GAAGA,IAAI;IAClB;EAAC;IAAA;IAAA,OAED,eAAM9D,IAAI,EAAE6D,KAAK,EAAEC,IAAI,EAAE;MACvB,OAAO,EAAE,GAAGA,IAAI;IAClB;EAAC;IAAA;IAAA,OAED,cAAK;MACH,OAAO,EAAE;IACX;EAAC;EAAA;AAAA;AAGH;AACA;AACA;AAFA,IAGMmL,OAAO;EACX,mBAAc;IAAA;IACZ,IAAI,CAACC,IAAI,GAAG,CAAC,CAAC;EAChB;;EAEA;AACF;AACA;EAFE;IAAA;IAAA,OAGA,mBAAUC,KAAK,EAAE;MACf,OAAOA,KAAK,CACTrQ,WAAW,EAAE,CACbsD,IAAI;MACL;MAAA,CACC3D,OAAO,CAAC,iBAAiB,EAAE,EAAE;MAC9B;MAAA,CACCA,OAAO,CAAC,+DAA+D,EAAE,EAAE,CAAC,CAC5EA,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC;IACxB;;IAEA;AACF;AACA;AACA;AACA;EAJE;IAAA;IAAA,OAKA,yBAAgB2Q,YAAY,EAAEC,QAAQ,EAAE;MACtC,IAAIV,IAAI,GAAGS,YAAY;MACvB,IAAIE,oBAAoB,GAAG,CAAC;MAC5B,IAAI,IAAI,CAACJ,IAAI,CAAC3N,cAAc,CAACoN,IAAI,CAAC,EAAE;QAClCW,oBAAoB,GAAG,IAAI,CAACJ,IAAI,CAACE,YAAY,CAAC;QAC9C,GAAG;UACDE,oBAAoB,EAAE;UACtBX,IAAI,GAAGS,YAAY,GAAG,GAAG,GAAGE,oBAAoB;QAClD,CAAC,QAAQ,IAAI,CAACJ,IAAI,CAAC3N,cAAc,CAACoN,IAAI,CAAC;MACzC;MACA,IAAI,CAACU,QAAQ,EAAE;QACb,IAAI,CAACH,IAAI,CAACE,YAAY,CAAC,GAAGE,oBAAoB;QAC9C,IAAI,CAACJ,IAAI,CAACP,IAAI,CAAC,GAAG,CAAC;MACrB;MACA,OAAOA,IAAI;IACb;;IAEA;AACF;AACA;AACA;AACA;AACA;EALE;IAAA;IAAA,OAMA,cAAKQ,KAAK,EAAgB;MAAA,IAAdrK,OAAO,uEAAG,CAAC,CAAC;MACtB,IAAM6J,IAAI,GAAG,IAAI,CAACY,SAAS,CAACJ,KAAK,CAAC;MAClC,OAAO,IAAI,CAACK,eAAe,CAACb,IAAI,EAAE7J,OAAO,CAAC2K,MAAM,CAAC;IACnD;EAAC;EAAA;AAAA;AAGH;AACA;AACA;AAFA,IAGMC,MAAM;EACV,gBAAY5K,OAAO,EAAE;IAAA;IACnB,IAAI,CAACA,OAAO,GAAGA,OAAO,IAAIrH,QAAQ;IAClC,IAAI,CAACqH,OAAO,CAAC7H,QAAQ,GAAG,IAAI,CAAC6H,OAAO,CAAC7H,QAAQ,IAAI,IAAIqR,QAAQ,EAAE;IAC/D,IAAI,CAACrR,QAAQ,GAAG,IAAI,CAAC6H,OAAO,CAAC7H,QAAQ;IACrC,IAAI,CAACA,QAAQ,CAAC6H,OAAO,GAAG,IAAI,CAACA,OAAO;IACpC,IAAI,CAAC6K,YAAY,GAAG,IAAIX,YAAY,EAAE;IACtC,IAAI,CAACP,OAAO,GAAG,IAAIQ,OAAO,EAAE;EAC9B;;EAEA;AACF;AACA;EAFE;IAAA;IAAA;IAgBA;AACF;AACA;IACE,eAAM9K,MAAM,EAAc;MAAA,IAAZ2B,GAAG,uEAAG,IAAI;MACtB,IAAIuG,GAAG,GAAG,EAAE;QACVrL,CAAC;QACD2H,CAAC;QACDC,CAAC;QACDgH,EAAE;QACFC,EAAE;QACFjO,GAAG;QACHkO,IAAI;QACJtH,MAAM;QACNoG,IAAI;QACJ3K,KAAK;QACL4C,OAAO;QACPC,KAAK;QACLC,KAAK;QACLgJ,QAAQ;QACRxH,IAAI;QACJV,OAAO;QACPD,IAAI;QACJoI,QAAQ;QACRC,GAAG;MAEL,IAAMtN,CAAC,GAAGwB,MAAM,CAAC/C,MAAM;MACvB,KAAKJ,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG2B,CAAC,EAAE3B,CAAC,EAAE,EAAE;QACtBiD,KAAK,GAAGE,MAAM,CAACnD,CAAC,CAAC;;QAEjB;QACA,IAAI,IAAI,CAAC8D,OAAO,CAACrI,UAAU,IAAI,IAAI,CAACqI,OAAO,CAACrI,UAAU,CAACyT,SAAS,IAAI,IAAI,CAACpL,OAAO,CAACrI,UAAU,CAACyT,SAAS,CAACjM,KAAK,CAACC,IAAI,CAAC,EAAE;UACjH+L,GAAG,GAAG,IAAI,CAACnL,OAAO,CAACrI,UAAU,CAACyT,SAAS,CAACjM,KAAK,CAACC,IAAI,CAAC,CAAC1C,IAAI,CAAC;YAAE2O,MAAM,EAAE;UAAK,CAAC,EAAElM,KAAK,CAAC;UACjF,IAAIgM,GAAG,KAAK,KAAK,IAAI,CAAC,CAAC,OAAO,EAAE,IAAI,EAAE,SAAS,EAAE,MAAM,EAAE,OAAO,EAAE,YAAY,EAAE,MAAM,EAAE,MAAM,EAAE,WAAW,EAAE,MAAM,CAAC,CAACjC,QAAQ,CAAC/J,KAAK,CAACC,IAAI,CAAC,EAAE;YACzImI,GAAG,IAAI4D,GAAG,IAAI,EAAE;YAChB;UACF;QACF;QAEA,QAAQhM,KAAK,CAACC,IAAI;UAChB,KAAK,OAAO;YAAE;cACZ;YACF;UACA,KAAK,IAAI;YAAE;cACTmI,GAAG,IAAI,IAAI,CAACpP,QAAQ,CAAC2I,EAAE,EAAE;cACzB;YACF;UACA,KAAK,SAAS;YAAE;cACdyG,GAAG,IAAI,IAAI,CAACpP,QAAQ,CAACwI,OAAO,CAC1B,IAAI,CAAC2K,WAAW,CAACnM,KAAK,CAACE,MAAM,CAAC,EAC9BF,KAAK,CAAC0B,KAAK,EACXhH,QAAQ,CAAC,IAAI,CAACyR,WAAW,CAACnM,KAAK,CAACE,MAAM,EAAE,IAAI,CAACwL,YAAY,CAAC,CAAC,EAC3D,IAAI,CAAClB,OAAO,CAAC;cACf;YACF;UACA,KAAK,MAAM;YAAE;cACXpC,GAAG,IAAI,IAAI,CAACpP,QAAQ,CAACkI,IAAI,CAAClB,KAAK,CAACH,IAAI,EAClCG,KAAK,CAACqB,IAAI,EACVrB,KAAK,CAACjC,OAAO,CAAC;cAChB;YACF;UACA,KAAK,OAAO;YAAE;cACZwG,MAAM,GAAG,EAAE;;cAEX;cACAsH,IAAI,GAAG,EAAE;cACTF,EAAE,GAAG3L,KAAK,CAACuE,MAAM,CAACpH,MAAM;cACxB,KAAKuH,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGiH,EAAE,EAAEjH,CAAC,EAAE,EAAE;gBACvBmH,IAAI,IAAI,IAAI,CAAC7S,QAAQ,CAACoT,SAAS,CAC7B,IAAI,CAACD,WAAW,CAACnM,KAAK,CAACuE,MAAM,CAACG,CAAC,CAAC,CAACxE,MAAM,CAAC,EACxC;kBAAEqE,MAAM,EAAE,IAAI;kBAAEC,KAAK,EAAExE,KAAK,CAACwE,KAAK,CAACE,CAAC;gBAAE,CAAC,CACxC;cACH;cACAH,MAAM,IAAI,IAAI,CAACvL,QAAQ,CAACqT,QAAQ,CAACR,IAAI,CAAC;cAEtClB,IAAI,GAAG,EAAE;cACTgB,EAAE,GAAG3L,KAAK,CAACyE,IAAI,CAACtH,MAAM;cACtB,KAAKuH,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGiH,EAAE,EAAEjH,CAAC,EAAE,EAAE;gBACvB/G,GAAG,GAAGqC,KAAK,CAACyE,IAAI,CAACC,CAAC,CAAC;gBAEnBmH,IAAI,GAAG,EAAE;gBACTD,EAAE,GAAGjO,GAAG,CAACR,MAAM;gBACf,KAAKwH,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGiH,EAAE,EAAEjH,CAAC,EAAE,EAAE;kBACvBkH,IAAI,IAAI,IAAI,CAAC7S,QAAQ,CAACoT,SAAS,CAC7B,IAAI,CAACD,WAAW,CAACxO,GAAG,CAACgH,CAAC,CAAC,CAACzE,MAAM,CAAC,EAC/B;oBAAEqE,MAAM,EAAE,KAAK;oBAAEC,KAAK,EAAExE,KAAK,CAACwE,KAAK,CAACG,CAAC;kBAAE,CAAC,CACzC;gBACH;gBAEAgG,IAAI,IAAI,IAAI,CAAC3R,QAAQ,CAACqT,QAAQ,CAACR,IAAI,CAAC;cACtC;cACAzD,GAAG,IAAI,IAAI,CAACpP,QAAQ,CAACqL,KAAK,CAACE,MAAM,EAAEoG,IAAI,CAAC;cACxC;YACF;UACA,KAAK,YAAY;YAAE;cACjBA,IAAI,GAAG,IAAI,CAAC2B,KAAK,CAACtM,KAAK,CAACE,MAAM,CAAC;cAC/BkI,GAAG,IAAI,IAAI,CAACpP,QAAQ,CAAC4I,UAAU,CAAC+I,IAAI,CAAC;cACrC;YACF;UACA,KAAK,MAAM;YAAE;cACX/H,OAAO,GAAG5C,KAAK,CAAC4C,OAAO;cACvBC,KAAK,GAAG7C,KAAK,CAAC6C,KAAK;cACnBC,KAAK,GAAG9C,KAAK,CAAC8C,KAAK;cACnB6I,EAAE,GAAG3L,KAAK,CAAC+C,KAAK,CAAC5F,MAAM;cAEvBwN,IAAI,GAAG,EAAE;cACT,KAAKjG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGiH,EAAE,EAAEjH,CAAC,EAAE,EAAE;gBACvBJ,IAAI,GAAGtE,KAAK,CAAC+C,KAAK,CAAC2B,CAAC,CAAC;gBACrBd,OAAO,GAAGU,IAAI,CAACV,OAAO;gBACtBD,IAAI,GAAGW,IAAI,CAACX,IAAI;gBAEhBmI,QAAQ,GAAG,EAAE;gBACb,IAAIxH,IAAI,CAACX,IAAI,EAAE;kBACboI,QAAQ,GAAG,IAAI,CAAC/S,QAAQ,CAAC+S,QAAQ,CAACnI,OAAO,CAAC;kBAC1C,IAAId,KAAK,EAAE;oBACT,IAAIwB,IAAI,CAACpE,MAAM,CAAC/C,MAAM,GAAG,CAAC,IAAImH,IAAI,CAACpE,MAAM,CAAC,CAAC,CAAC,CAACD,IAAI,KAAK,WAAW,EAAE;sBACjEqE,IAAI,CAACpE,MAAM,CAAC,CAAC,CAAC,CAACL,IAAI,GAAGkM,QAAQ,GAAG,GAAG,GAAGzH,IAAI,CAACpE,MAAM,CAAC,CAAC,CAAC,CAACL,IAAI;sBAC1D,IAAIyE,IAAI,CAACpE,MAAM,CAAC,CAAC,CAAC,CAACA,MAAM,IAAIoE,IAAI,CAACpE,MAAM,CAAC,CAAC,CAAC,CAACA,MAAM,CAAC/C,MAAM,GAAG,CAAC,IAAImH,IAAI,CAACpE,MAAM,CAAC,CAAC,CAAC,CAACA,MAAM,CAAC,CAAC,CAAC,CAACD,IAAI,KAAK,MAAM,EAAE;wBACzGqE,IAAI,CAACpE,MAAM,CAAC,CAAC,CAAC,CAACA,MAAM,CAAC,CAAC,CAAC,CAACL,IAAI,GAAGkM,QAAQ,GAAG,GAAG,GAAGzH,IAAI,CAACpE,MAAM,CAAC,CAAC,CAAC,CAACA,MAAM,CAAC,CAAC,CAAC,CAACL,IAAI;sBAChF;oBACF,CAAC,MAAM;sBACLyE,IAAI,CAACpE,MAAM,CAACqM,OAAO,CAAC;wBAClBtM,IAAI,EAAE,MAAM;wBACZJ,IAAI,EAAEkM;sBACR,CAAC,CAAC;oBACJ;kBACF,CAAC,MAAM;oBACLD,QAAQ,IAAIC,QAAQ;kBACtB;gBACF;gBAEAD,QAAQ,IAAI,IAAI,CAACQ,KAAK,CAAChI,IAAI,CAACpE,MAAM,EAAE4C,KAAK,CAAC;gBAC1C6H,IAAI,IAAI,IAAI,CAAC3R,QAAQ,CAACwT,QAAQ,CAACV,QAAQ,EAAEnI,IAAI,EAAEC,OAAO,CAAC;cACzD;cAEAwE,GAAG,IAAI,IAAI,CAACpP,QAAQ,CAAC+I,IAAI,CAAC4I,IAAI,EAAE/H,OAAO,EAAEC,KAAK,CAAC;cAC/C;YACF;UACA,KAAK,MAAM;YAAE;cACX;cACAuF,GAAG,IAAI,IAAI,CAACpP,QAAQ,CAACqB,IAAI,CAAC2F,KAAK,CAACH,IAAI,CAAC;cACrC;YACF;UACA,KAAK,WAAW;YAAE;cAChBuI,GAAG,IAAI,IAAI,CAACpP,QAAQ,CAAC6L,SAAS,CAAC,IAAI,CAACsH,WAAW,CAACnM,KAAK,CAACE,MAAM,CAAC,CAAC;cAC9D;YACF;UACA,KAAK,MAAM;YAAE;cACXyK,IAAI,GAAG3K,KAAK,CAACE,MAAM,GAAG,IAAI,CAACiM,WAAW,CAACnM,KAAK,CAACE,MAAM,CAAC,GAAGF,KAAK,CAACH,IAAI;cACjE,OAAO9C,CAAC,GAAG,CAAC,GAAG2B,CAAC,IAAIwB,MAAM,CAACnD,CAAC,GAAG,CAAC,CAAC,CAACkD,IAAI,KAAK,MAAM,EAAE;gBACjDD,KAAK,GAAGE,MAAM,CAAC,EAAEnD,CAAC,CAAC;gBACnB4N,IAAI,IAAI,IAAI,IAAI3K,KAAK,CAACE,MAAM,GAAG,IAAI,CAACiM,WAAW,CAACnM,KAAK,CAACE,MAAM,CAAC,GAAGF,KAAK,CAACH,IAAI,CAAC;cAC7E;cACAuI,GAAG,IAAIvG,GAAG,GAAG,IAAI,CAAC7I,QAAQ,CAAC6L,SAAS,CAAC8F,IAAI,CAAC,GAAGA,IAAI;cACjD;YACF;UAEA;YAAS;cACP,IAAMjB,MAAM,GAAG,cAAc,GAAG1J,KAAK,CAACC,IAAI,GAAG,uBAAuB;cACpE,IAAI,IAAI,CAACY,OAAO,CAAC1H,MAAM,EAAE;gBACvB+F,OAAO,CAACyK,KAAK,CAACD,MAAM,CAAC;gBACrB;cACF,CAAC,MAAM;gBACL,MAAM,IAAIE,KAAK,CAACF,MAAM,CAAC;cACzB;YACF;QAAC;MAEL;MAEA,OAAOtB,GAAG;IACZ;;IAEA;AACF;AACA;EAFE;IAAA;IAAA,OAGA,qBAAYlI,MAAM,EAAElH,QAAQ,EAAE;MAC5BA,QAAQ,GAAGA,QAAQ,IAAI,IAAI,CAACA,QAAQ;MACpC,IAAIoP,GAAG,GAAG,EAAE;QACVrL,CAAC;QACDiD,KAAK;QACLgM,GAAG;MAEL,IAAMtN,CAAC,GAAGwB,MAAM,CAAC/C,MAAM;MACvB,KAAKJ,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG2B,CAAC,EAAE3B,CAAC,EAAE,EAAE;QACtBiD,KAAK,GAAGE,MAAM,CAACnD,CAAC,CAAC;;QAEjB;QACA,IAAI,IAAI,CAAC8D,OAAO,CAACrI,UAAU,IAAI,IAAI,CAACqI,OAAO,CAACrI,UAAU,CAACyT,SAAS,IAAI,IAAI,CAACpL,OAAO,CAACrI,UAAU,CAACyT,SAAS,CAACjM,KAAK,CAACC,IAAI,CAAC,EAAE;UACjH+L,GAAG,GAAG,IAAI,CAACnL,OAAO,CAACrI,UAAU,CAACyT,SAAS,CAACjM,KAAK,CAACC,IAAI,CAAC,CAAC1C,IAAI,CAAC;YAAE2O,MAAM,EAAE;UAAK,CAAC,EAAElM,KAAK,CAAC;UACjF,IAAIgM,GAAG,KAAK,KAAK,IAAI,CAAC,CAAC,QAAQ,EAAE,MAAM,EAAE,MAAM,EAAE,OAAO,EAAE,QAAQ,EAAE,IAAI,EAAE,UAAU,EAAE,IAAI,EAAE,KAAK,EAAE,MAAM,CAAC,CAACjC,QAAQ,CAAC/J,KAAK,CAACC,IAAI,CAAC,EAAE;YAC/HmI,GAAG,IAAI4D,GAAG,IAAI,EAAE;YAChB;UACF;QACF;QAEA,QAAQhM,KAAK,CAACC,IAAI;UAChB,KAAK,QAAQ;YAAE;cACbmI,GAAG,IAAIpP,QAAQ,CAAC6G,IAAI,CAACG,KAAK,CAACH,IAAI,CAAC;cAChC;YACF;UACA,KAAK,MAAM;YAAE;cACXuI,GAAG,IAAIpP,QAAQ,CAACqB,IAAI,CAAC2F,KAAK,CAACH,IAAI,CAAC;cAChC;YACF;UACA,KAAK,MAAM;YAAE;cACXuI,GAAG,IAAIpP,QAAQ,CAACyG,IAAI,CAACO,KAAK,CAACjE,IAAI,EAAEiE,KAAK,CAACJ,KAAK,EAAE,IAAI,CAACuM,WAAW,CAACnM,KAAK,CAACE,MAAM,EAAElH,QAAQ,CAAC,CAAC;cACvF;YACF;UACA,KAAK,OAAO;YAAE;cACZoP,GAAG,IAAIpP,QAAQ,CAACyT,KAAK,CAACzM,KAAK,CAACjE,IAAI,EAAEiE,KAAK,CAACJ,KAAK,EAAEI,KAAK,CAACH,IAAI,CAAC;cAC1D;YACF;UACA,KAAK,QAAQ;YAAE;cACbuI,GAAG,IAAIpP,QAAQ,CAAC8O,MAAM,CAAC,IAAI,CAACqE,WAAW,CAACnM,KAAK,CAACE,MAAM,EAAElH,QAAQ,CAAC,CAAC;cAChE;YACF;UACA,KAAK,IAAI;YAAE;cACToP,GAAG,IAAIpP,QAAQ,CAACkP,EAAE,CAAC,IAAI,CAACiE,WAAW,CAACnM,KAAK,CAACE,MAAM,EAAElH,QAAQ,CAAC,CAAC;cAC5D;YACF;UACA,KAAK,UAAU;YAAE;cACfoP,GAAG,IAAIpP,QAAQ,CAACiR,QAAQ,CAACjK,KAAK,CAACH,IAAI,CAAC;cACpC;YACF;UACA,KAAK,IAAI;YAAE;cACTuI,GAAG,IAAIpP,QAAQ,CAACwN,EAAE,EAAE;cACpB;YACF;UACA,KAAK,KAAK;YAAE;cACV4B,GAAG,IAAIpP,QAAQ,CAACyN,GAAG,CAAC,IAAI,CAAC0F,WAAW,CAACnM,KAAK,CAACE,MAAM,EAAElH,QAAQ,CAAC,CAAC;cAC7D;YACF;UACA,KAAK,MAAM;YAAE;cACXoP,GAAG,IAAIpP,QAAQ,CAAC6G,IAAI,CAACG,KAAK,CAACH,IAAI,CAAC;cAChC;YACF;UACA;YAAS;cACP,IAAM6J,MAAM,GAAG,cAAc,GAAG1J,KAAK,CAACC,IAAI,GAAG,uBAAuB;cACpE,IAAI,IAAI,CAACY,OAAO,CAAC1H,MAAM,EAAE;gBACvB+F,OAAO,CAACyK,KAAK,CAACD,MAAM,CAAC;gBACrB;cACF,CAAC,MAAM;gBACL,MAAM,IAAIE,KAAK,CAACF,MAAM,CAAC;cACzB;YACF;QAAC;MAEL;MACA,OAAOtB,GAAG;IACZ;EAAC;IAAA;IAAA,OApQD,eAAalI,MAAM,EAAEW,OAAO,EAAE;MAC5B,IAAMqL,MAAM,GAAG,IAAIT,MAAM,CAAC5K,OAAO,CAAC;MAClC,OAAOqL,MAAM,CAACI,KAAK,CAACpM,MAAM,CAAC;IAC7B;;IAEA;AACF;AACA;EAFE;IAAA;IAAA,OAGA,qBAAmBA,MAAM,EAAEW,OAAO,EAAE;MAClC,IAAMqL,MAAM,GAAG,IAAIT,MAAM,CAAC5K,OAAO,CAAC;MAClC,OAAOqL,MAAM,CAACC,WAAW,CAACjM,MAAM,CAAC;IACnC;EAAC;EAAA;AAAA;AA4PH;AACA;AACA;AACA,SAASwM,MAAM,CAAC5L,GAAG,EAAExF,GAAG,EAAEqR,QAAQ,EAAE;EAClC;EACA,IAAI,OAAO7L,GAAG,KAAK,WAAW,IAAIA,GAAG,KAAK,IAAI,EAAE;IAC9C,MAAM,IAAI8I,KAAK,CAAC,gDAAgD,CAAC;EACnE;EACA,IAAI,OAAO9I,GAAG,KAAK,QAAQ,EAAE;IAC3B,MAAM,IAAI8I,KAAK,CAAC,uCAAuC,GACnDxM,MAAM,CAACC,SAAS,CAACkL,QAAQ,CAAChL,IAAI,CAACuD,GAAG,CAAC,GAAG,mBAAmB,CAAC;EAChE;EAEA,IAAI,OAAOxF,GAAG,KAAK,UAAU,EAAE;IAC7BqR,QAAQ,GAAGrR,GAAG;IACdA,GAAG,GAAG,IAAI;EACZ;EAEAA,GAAG,GAAGwB,KAAK,CAAC,CAAC,CAAC,EAAE4P,MAAM,CAAClT,QAAQ,EAAE8B,GAAG,IAAI,CAAC,CAAC,CAAC;EAC3C2D,wBAAwB,CAAC3D,GAAG,CAAC;EAE7B,IAAIqR,QAAQ,EAAE;IACZ,IAAM/T,SAAS,GAAG0C,GAAG,CAAC1C,SAAS;IAC/B,IAAIsH,MAAM;IAEV,IAAI;MACFA,MAAM,GAAGsI,KAAK,CAAC4B,GAAG,CAACtJ,GAAG,EAAExF,GAAG,CAAC;IAC9B,CAAC,CAAC,OAAOY,CAAC,EAAE;MACV,OAAOyQ,QAAQ,CAACzQ,CAAC,CAAC;IACpB;IAEA,IAAM0Q,IAAI,GAAG,SAAPA,IAAI,CAAYC,GAAG,EAAE;MACzB,IAAIzE,GAAG;MAEP,IAAI,CAACyE,GAAG,EAAE;QACR,IAAI;UACF,IAAIvR,GAAG,CAAChC,UAAU,EAAE;YAClBoT,MAAM,CAACpT,UAAU,CAAC4G,MAAM,EAAE5E,GAAG,CAAChC,UAAU,CAAC;UAC3C;UACA8O,GAAG,GAAGqD,MAAM,CAACa,KAAK,CAACpM,MAAM,EAAE5E,GAAG,CAAC;QACjC,CAAC,CAAC,OAAOY,CAAC,EAAE;UACV2Q,GAAG,GAAG3Q,CAAC;QACT;MACF;MAEAZ,GAAG,CAAC1C,SAAS,GAAGA,SAAS;MAEzB,OAAOiU,GAAG,GACNF,QAAQ,CAACE,GAAG,CAAC,GACbF,QAAQ,CAAC,IAAI,EAAEvE,GAAG,CAAC;IACzB,CAAC;IAED,IAAI,CAACxP,SAAS,IAAIA,SAAS,CAACuE,MAAM,GAAG,CAAC,EAAE;MACtC,OAAOyP,IAAI,EAAE;IACf;IAEA,OAAOtR,GAAG,CAAC1C,SAAS;IAEpB,IAAI,CAACsH,MAAM,CAAC/C,MAAM,EAAE,OAAOyP,IAAI,EAAE;IAEjC,IAAIE,OAAO,GAAG,CAAC;IACfJ,MAAM,CAACpT,UAAU,CAAC4G,MAAM,EAAE,UAASF,KAAK,EAAE;MACxC,IAAIA,KAAK,CAACC,IAAI,KAAK,MAAM,EAAE;QACzB6M,OAAO,EAAE;QACTC,UAAU,CAAC,YAAM;UACfnU,SAAS,CAACoH,KAAK,CAACH,IAAI,EAAEG,KAAK,CAACqB,IAAI,EAAE,UAASwL,GAAG,EAAE3L,IAAI,EAAE;YACpD,IAAI2L,GAAG,EAAE;cACP,OAAOD,IAAI,CAACC,GAAG,CAAC;YAClB;YACA,IAAI3L,IAAI,IAAI,IAAI,IAAIA,IAAI,KAAKlB,KAAK,CAACH,IAAI,EAAE;cACvCG,KAAK,CAACH,IAAI,GAAGqB,IAAI;cACjBlB,KAAK,CAACjC,OAAO,GAAG,IAAI;YACtB;YAEA+O,OAAO,EAAE;YACT,IAAIA,OAAO,KAAK,CAAC,EAAE;cACjBF,IAAI,EAAE;YACR;UACF,CAAC,CAAC;QACJ,CAAC,EAAE,CAAC,CAAC;MACP;IACF,CAAC,CAAC;IAEF,IAAIE,OAAO,KAAK,CAAC,EAAE;MACjBF,IAAI,EAAE;IACR;IAEA;EACF;EAEA,SAASI,OAAO,CAAC9Q,CAAC,EAAE;IAClBA,CAAC,CAAC+Q,OAAO,IAAI,6DAA6D;IAC1E,IAAI3R,GAAG,CAACnC,MAAM,EAAE;MACd,OAAO,gCAAgC,GACnCiB,OAAM,CAAC8B,CAAC,CAAC+Q,OAAO,GAAG,EAAE,EAAE,IAAI,CAAC,GAC5B,QAAQ;IACd;IACA,MAAM/Q,CAAC;EACT;EAEA,IAAI;IACF,IAAMgE,OAAM,GAAGsI,KAAK,CAAC4B,GAAG,CAACtJ,GAAG,EAAExF,GAAG,CAAC;IAClC,IAAIA,GAAG,CAAChC,UAAU,EAAE;MAClB,IAAIgC,GAAG,CAACjD,KAAK,EAAE;QACb,OAAO6U,OAAO,CAACC,GAAG,CAACT,MAAM,CAACpT,UAAU,CAAC4G,OAAM,EAAE5E,GAAG,CAAChC,UAAU,CAAC,CAAC,CAC1D8T,IAAI,CAAC,YAAM;UACV,OAAO3B,MAAM,CAACa,KAAK,CAACpM,OAAM,EAAE5E,GAAG,CAAC;QAClC,CAAC,CAAC,CACD+R,KAAK,CAACL,OAAO,CAAC;MACnB;MACAN,MAAM,CAACpT,UAAU,CAAC4G,OAAM,EAAE5E,GAAG,CAAChC,UAAU,CAAC;IAC3C;IACA,OAAOmS,MAAM,CAACa,KAAK,CAACpM,OAAM,EAAE5E,GAAG,CAAC;EAClC,CAAC,CAAC,OAAOY,CAAC,EAAE;IACV8Q,OAAO,CAAC9Q,CAAC,CAAC;EACZ;AACF;;AAEA;AACA;AACA;;AAEAwQ,MAAM,CAAC7L,OAAO,GACd6L,MAAM,CAACY,UAAU,GAAG,UAAShS,GAAG,EAAE;EAChCwB,KAAK,CAAC4P,MAAM,CAAClT,QAAQ,EAAE8B,GAAG,CAAC;EAC3B7B,cAAc,CAACiT,MAAM,CAAClT,QAAQ,CAAC;EAC/B,OAAOkT,MAAM;AACf,CAAC;AAEDA,MAAM,CAACtU,WAAW,GAAGA,WAAW;AAEhCsU,MAAM,CAAClT,QAAQ,GAAGA,QAAQ;;AAE1B;AACA;AACA;;AAEAkT,MAAM,CAACa,GAAG,GAAG,YAAkB;EAC7B,IAAM/U,UAAU,GAAGkU,MAAM,CAAClT,QAAQ,CAAChB,UAAU,IAAI;IAAEyT,SAAS,EAAE,CAAC,CAAC;IAAEuB,WAAW,EAAE,CAAC;EAAE,CAAC;EAAC,kCAD7DC,IAAI;IAAJA,IAAI;EAAA;EAG3BA,IAAI,CAACjE,OAAO,CAAC,UAACkE,IAAI,EAAK;IACrB;IACA,IAAMC,IAAI,GAAG7Q,KAAK,CAAC,CAAC,CAAC,EAAE4Q,IAAI,CAAC;;IAE5B;IACAC,IAAI,CAACtV,KAAK,GAAGqU,MAAM,CAAClT,QAAQ,CAACnB,KAAK,IAAIsV,IAAI,CAACtV,KAAK;;IAEhD;IACA,IAAIqV,IAAI,CAAClV,UAAU,EAAE;MACnBkV,IAAI,CAAClV,UAAU,CAACgR,OAAO,CAAC,UAACoE,GAAG,EAAK;QAC/B,IAAI,CAACA,GAAG,CAACpS,IAAI,EAAE;UACb,MAAM,IAAIoO,KAAK,CAAC,yBAAyB,CAAC;QAC5C;QACA,IAAIgE,GAAG,CAAC5U,QAAQ,EAAE;UAAE;UAClB,IAAM6U,YAAY,GAAGrV,UAAU,CAACyT,SAAS,CAAC2B,GAAG,CAACpS,IAAI,CAAC;UACnD,IAAIqS,YAAY,EAAE;YAChB;YACArV,UAAU,CAACyT,SAAS,CAAC2B,GAAG,CAACpS,IAAI,CAAC,GAAG,YAAkB;cAAA,mCAANiS,IAAI;gBAAJA,IAAI;cAAA;cAC/C,IAAIzB,GAAG,GAAG4B,GAAG,CAAC5U,QAAQ,CAAC8U,KAAK,CAAC,IAAI,EAAEL,IAAI,CAAC;cACxC,IAAIzB,GAAG,KAAK,KAAK,EAAE;gBACjBA,GAAG,GAAG6B,YAAY,CAACC,KAAK,CAAC,IAAI,EAAEL,IAAI,CAAC;cACtC;cACA,OAAOzB,GAAG;YACZ,CAAC;UACH,CAAC,MAAM;YACLxT,UAAU,CAACyT,SAAS,CAAC2B,GAAG,CAACpS,IAAI,CAAC,GAAGoS,GAAG,CAAC5U,QAAQ;UAC/C;QACF;QACA,IAAI4U,GAAG,CAACvU,SAAS,EAAE;UAAE;UACnB,IAAI,CAACuU,GAAG,CAAC5O,KAAK,IAAK4O,GAAG,CAAC5O,KAAK,KAAK,OAAO,IAAI4O,GAAG,CAAC5O,KAAK,KAAK,QAAS,EAAE;YACnE,MAAM,IAAI4K,KAAK,CAAC,6CAA6C,CAAC;UAChE;UACA,IAAIpR,UAAU,CAACoV,GAAG,CAAC5O,KAAK,CAAC,EAAE;YACzBxG,UAAU,CAACoV,GAAG,CAAC5O,KAAK,CAAC,CAACuN,OAAO,CAACqB,GAAG,CAACvU,SAAS,CAAC;UAC9C,CAAC,MAAM;YACLb,UAAU,CAACoV,GAAG,CAAC5O,KAAK,CAAC,GAAG,CAAC4O,GAAG,CAACvU,SAAS,CAAC;UACzC;UACA,IAAIuU,GAAG,CAAC/K,KAAK,EAAE;YAAE;YACf,IAAI+K,GAAG,CAAC5O,KAAK,KAAK,OAAO,EAAE;cACzB,IAAIxG,UAAU,CAAC2Q,UAAU,EAAE;gBACzB3Q,UAAU,CAAC2Q,UAAU,CAAC5K,IAAI,CAACqP,GAAG,CAAC/K,KAAK,CAAC;cACvC,CAAC,MAAM;gBACLrK,UAAU,CAAC2Q,UAAU,GAAG,CAACyE,GAAG,CAAC/K,KAAK,CAAC;cACrC;YACF,CAAC,MAAM,IAAI+K,GAAG,CAAC5O,KAAK,KAAK,QAAQ,EAAE;cACjC,IAAIxG,UAAU,CAAC0R,WAAW,EAAE;gBAC1B1R,UAAU,CAAC0R,WAAW,CAAC3L,IAAI,CAACqP,GAAG,CAAC/K,KAAK,CAAC;cACxC,CAAC,MAAM;gBACLrK,UAAU,CAAC0R,WAAW,GAAG,CAAC0D,GAAG,CAAC/K,KAAK,CAAC;cACtC;YACF;UACF;QACF;QACA,IAAI+K,GAAG,CAACJ,WAAW,EAAE;UAAE;UACrBhV,UAAU,CAACgV,WAAW,CAACI,GAAG,CAACpS,IAAI,CAAC,GAAGoS,GAAG,CAACJ,WAAW;QACpD;MACF,CAAC,CAAC;MACFG,IAAI,CAACnV,UAAU,GAAGA,UAAU;IAC9B;;IAEA;IACA,IAAIkV,IAAI,CAAC1U,QAAQ,EAAE;MACjB,IAAMA,QAAQ,GAAG0T,MAAM,CAAClT,QAAQ,CAACR,QAAQ,IAAI,IAAIqR,QAAQ,EAAE;MAAC,mCAC1B;QAChC,IAAMwD,YAAY,GAAG7U,QAAQ,CAAC+U,IAAI,CAAC;QACnC;QACA/U,QAAQ,CAAC+U,IAAI,CAAC,GAAG,YAAa;UAAA,mCAATN,IAAI;YAAJA,IAAI;UAAA;UACvB,IAAIzB,GAAG,GAAG0B,IAAI,CAAC1U,QAAQ,CAAC+U,IAAI,CAAC,CAACD,KAAK,CAAC9U,QAAQ,EAAEyU,IAAI,CAAC;UACnD,IAAIzB,GAAG,KAAK,KAAK,EAAE;YACjBA,GAAG,GAAG6B,YAAY,CAACC,KAAK,CAAC9U,QAAQ,EAAEyU,IAAI,CAAC;UAC1C;UACA,OAAOzB,GAAG;QACZ,CAAC;MACH,CAAC;MAVD,KAAK,IAAM+B,IAAI,IAAIL,IAAI,CAAC1U,QAAQ;QAAA;MAAA;MAWhC2U,IAAI,CAAC3U,QAAQ,GAAGA,QAAQ;IAC1B;IACA,IAAI0U,IAAI,CAACrU,SAAS,EAAE;MAClB,IAAMA,SAAS,GAAGqT,MAAM,CAAClT,QAAQ,CAACH,SAAS,IAAI,IAAIuH,SAAS,EAAE;MAAC,mCAC5B;QACjC,IAAMoN,aAAa,GAAG3U,SAAS,CAAC0U,IAAI,CAAC;QACrC;QACA1U,SAAS,CAAC0U,IAAI,CAAC,GAAG,YAAa;UAAA,mCAATN,IAAI;YAAJA,IAAI;UAAA;UACxB,IAAIzB,GAAG,GAAG0B,IAAI,CAACrU,SAAS,CAAC0U,IAAI,CAAC,CAACD,KAAK,CAACzU,SAAS,EAAEoU,IAAI,CAAC;UACrD,IAAIzB,GAAG,KAAK,KAAK,EAAE;YACjBA,GAAG,GAAGgC,aAAa,CAACF,KAAK,CAACzU,SAAS,EAAEoU,IAAI,CAAC;UAC5C;UACA,OAAOzB,GAAG;QACZ,CAAC;MACH,CAAC;MAVD,KAAK,IAAM+B,KAAI,IAAIL,IAAI,CAACrU,SAAS;QAAA;MAAA;MAWjCsU,IAAI,CAACtU,SAAS,GAAGA,SAAS;IAC5B;;IAEA;IACA,IAAIqU,IAAI,CAACpU,UAAU,EAAE;MACnB,IAAMA,WAAU,GAAGoT,MAAM,CAAClT,QAAQ,CAACF,UAAU;MAC7CqU,IAAI,CAACrU,UAAU,GAAG,UAAS0G,KAAK,EAAE;QAChC,IAAIiO,MAAM,GAAG,EAAE;QACfA,MAAM,CAAC1P,IAAI,CAACmP,IAAI,CAACpU,UAAU,CAACiE,IAAI,CAAC,IAAI,EAAEyC,KAAK,CAAC,CAAC;QAC9C,IAAI1G,WAAU,EAAE;UACd2U,MAAM,GAAGA,MAAM,CAACC,MAAM,CAAC5U,WAAU,CAACiE,IAAI,CAAC,IAAI,EAAEyC,KAAK,CAAC,CAAC;QACtD;QACA,OAAOiO,MAAM;MACf,CAAC;IACH;IAEAvB,MAAM,CAACY,UAAU,CAACK,IAAI,CAAC;EACzB,CAAC,CAAC;AACJ,CAAC;;AAED;AACA;AACA;;AAEAjB,MAAM,CAACpT,UAAU,GAAG,UAAS4G,MAAM,EAAEyM,QAAQ,EAAE;EAC7C,IAAIsB,MAAM,GAAG,EAAE;EAAC,2CACI/N,MAAM;IAAA;EAAA;IAAA,+BAAE;MAAA,IAAjBF,KAAK;MACdiO,MAAM,GAAGA,MAAM,CAACC,MAAM,CAACvB,QAAQ,CAACpP,IAAI,CAACmP,MAAM,EAAE1M,KAAK,CAAC,CAAC;MACpD,QAAQA,KAAK,CAACC,IAAI;QAChB,KAAK,OAAO;UAAE;YAAA,4CACOD,KAAK,CAACuE,MAAM;cAAA;YAAA;cAA/B,uDAAiC;gBAAA,IAAtBsH,IAAI;gBACboC,MAAM,GAAGA,MAAM,CAACC,MAAM,CAACxB,MAAM,CAACpT,UAAU,CAACuS,IAAI,CAAC3L,MAAM,EAAEyM,QAAQ,CAAC,CAAC;cAClE;YAAC;cAAA;YAAA;cAAA;YAAA;YAAA,4CACiB3M,KAAK,CAACyE,IAAI;cAAA;YAAA;cAA5B,uDAA8B;gBAAA,IAAnB9G,GAAG;gBAAA,4CACOA,GAAG;kBAAA;gBAAA;kBAAtB,uDAAwB;oBAAA,IAAbkO,KAAI;oBACboC,MAAM,GAAGA,MAAM,CAACC,MAAM,CAACxB,MAAM,CAACpT,UAAU,CAACuS,KAAI,CAAC3L,MAAM,EAAEyM,QAAQ,CAAC,CAAC;kBAClE;gBAAC;kBAAA;gBAAA;kBAAA;gBAAA;cACH;YAAC;cAAA;YAAA;cAAA;YAAA;YACD;UACF;QACA,KAAK,MAAM;UAAE;YACXsB,MAAM,GAAGA,MAAM,CAACC,MAAM,CAACxB,MAAM,CAACpT,UAAU,CAAC0G,KAAK,CAAC+C,KAAK,EAAE4J,QAAQ,CAAC,CAAC;YAChE;UACF;QACA;UAAS;YACP,IAAID,MAAM,CAAClT,QAAQ,CAAChB,UAAU,IAAIkU,MAAM,CAAClT,QAAQ,CAAChB,UAAU,CAACgV,WAAW,IAAId,MAAM,CAAClT,QAAQ,CAAChB,UAAU,CAACgV,WAAW,CAACxN,KAAK,CAACC,IAAI,CAAC,EAAE;cAAE;cAChIyM,MAAM,CAAClT,QAAQ,CAAChB,UAAU,CAACgV,WAAW,CAACxN,KAAK,CAACC,IAAI,CAAC,CAACuJ,OAAO,CAAC,UAASgE,WAAW,EAAE;gBAC/ES,MAAM,GAAGA,MAAM,CAACC,MAAM,CAACxB,MAAM,CAACpT,UAAU,CAAC0G,KAAK,CAACwN,WAAW,CAAC,EAAEb,QAAQ,CAAC,CAAC;cACzE,CAAC,CAAC;YACJ,CAAC,MAAM,IAAI3M,KAAK,CAACE,MAAM,EAAE;cACvB+N,MAAM,GAAGA,MAAM,CAACC,MAAM,CAACxB,MAAM,CAACpT,UAAU,CAAC0G,KAAK,CAACE,MAAM,EAAEyM,QAAQ,CAAC,CAAC;YACnE;UACF;MAAC;IAEL,CAAC;IA5BD;MAAA;IAAA;EA4BC;IAAA;EAAA;IAAA;EAAA;EACD,OAAOsB,MAAM;AACf,CAAC;;AAED;AACA;AACA;AACA;AACAvB,MAAM,CAACP,WAAW,GAAG,UAASrL,GAAG,EAAExF,GAAG,EAAE;EACtC;EACA,IAAI,OAAOwF,GAAG,KAAK,WAAW,IAAIA,GAAG,KAAK,IAAI,EAAE;IAC9C,MAAM,IAAI8I,KAAK,CAAC,4DAA4D,CAAC;EAC/E;EACA,IAAI,OAAO9I,GAAG,KAAK,QAAQ,EAAE;IAC3B,MAAM,IAAI8I,KAAK,CAAC,mDAAmD,GAC/DxM,MAAM,CAACC,SAAS,CAACkL,QAAQ,CAAChL,IAAI,CAACuD,GAAG,CAAC,GAAG,mBAAmB,CAAC;EAChE;EAEAxF,GAAG,GAAGwB,KAAK,CAAC,CAAC,CAAC,EAAE4P,MAAM,CAAClT,QAAQ,EAAE8B,GAAG,IAAI,CAAC,CAAC,CAAC;EAC3C2D,wBAAwB,CAAC3D,GAAG,CAAC;EAE7B,IAAI;IACF,IAAM4E,MAAM,GAAGsI,KAAK,CAAC2F,SAAS,CAACrN,GAAG,EAAExF,GAAG,CAAC;IACxC,IAAIA,GAAG,CAAChC,UAAU,EAAE;MAClBoT,MAAM,CAACpT,UAAU,CAAC4G,MAAM,EAAE5E,GAAG,CAAChC,UAAU,CAAC;IAC3C;IACA,OAAOmS,MAAM,CAACU,WAAW,CAACjM,MAAM,EAAE5E,GAAG,CAAC;EACxC,CAAC,CAAC,OAAOY,CAAC,EAAE;IACVA,CAAC,CAAC+Q,OAAO,IAAI,6DAA6D;IAC1E,IAAI3R,GAAG,CAACnC,MAAM,EAAE;MACd,OAAO,gCAAgC,GACnCiB,OAAM,CAAC8B,CAAC,CAAC+Q,OAAO,GAAG,EAAE,EAAE,IAAI,CAAC,GAC5B,QAAQ;IACd;IACA,MAAM/Q,CAAC;EACT;AACF,CAAC;;AAED;AACA;AACA;AACAwQ,MAAM,CAACjB,MAAM,GAAGA,MAAM;AACtBiB,MAAM,CAACR,MAAM,GAAGT,MAAM,CAACa,KAAK;AAC5BI,MAAM,CAACrC,QAAQ,GAAGA,QAAQ;AAC1BqC,MAAM,CAAC3B,YAAY,GAAGA,YAAY;AAClC2B,MAAM,CAAClE,KAAK,GAAGA,KAAK;AACpBkE,MAAM,CAAC/M,KAAK,GAAG6I,KAAK,CAAC4B,GAAG;AACxBsC,MAAM,CAAC9L,SAAS,GAAGA,SAAS;AAC5B8L,MAAM,CAAC1B,OAAO,GAAGA,OAAO;AACxB0B,MAAM,CAACJ,KAAK,GAAGI,MAAM;AAErB,IAAM7L,OAAO,GAAG6L,MAAM,CAAC7L,OAAO;AAC9B,IAAMyM,UAAU,GAAGZ,MAAM,CAACY,UAAU;AACpC,IAAMC,GAAG,GAAGb,MAAM,CAACa,GAAG;AACtB,IAAMjU,UAAU,GAAGoT,MAAM,CAACpT,UAAU;AACpC,IAAM6S,WAAW,GAAGO,MAAM,CAACP,WAAW;AACtC,IAAMG,KAAK,GAAGI,MAAM;AACpB,IAAMR,MAAM,GAAGT,MAAM,CAACa,KAAK;AAC3B,IAAM3M,KAAK,GAAG6I,KAAK,CAAC4B,GAAG;AAEvB,SAAS5B,KAAK,EAAEiD,MAAM,EAAEpB,QAAQ,EAAEW,OAAO,EAAED,YAAY,EAAEnK,SAAS,EAAEpH,QAAQ,EAAEpB,WAAW,EAAEuH,KAAK,EAAE+M,MAAM,EAAE7L,OAAO,EAAEyL,KAAK,EAAEH,WAAW,EAAED,MAAM,EAAEoB,UAAU,EAAEC,GAAG,EAAEjU,UAAU"},"metadata":{},"sourceType":"module","externalDependencies":[]}